{"version":3,"sources":["di_perf.es6"],"names":[],"mappings":"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","file":"benchmarks/e2e_test/di_perf.js","sourcesContent":["var perfUtil = require('angular2/src/test_lib/perf_util');\n\ndescribe('ng2 di benchmark', function () {\n\n  var URL = 'benchmarks/src/di/di_benchmark.html';\n\n  afterEach(perfUtil.verifyNoBrowserErrors);\n\n  it('should log the stats for getByToken', function(done) {\n    perfUtil.runClickBenchmark({\n      url: URL,\n      buttons: ['#getByToken'],\n      id: 'ng2.di.getByToken',\n      params: [{\n        name: 'iterations', value: 20000, scale: 'linear'\n      }],\n      microMetrics: {\n        'injectAvg': 'avg time for injection (in ms)'\n      }\n    }).then(done, done.fail);\n  });\n\n  it('should log the stats for getByKey', function(done) {\n    perfUtil.runClickBenchmark({\n      url: URL,\n      buttons: ['#getByKey'],\n      id: 'ng2.di.getByKey',\n      params: [{\n        name: 'iterations', value: 20000, scale: 'linear'\n      }],\n      microMetrics: {\n        'injectAvg': 'avg time for injection (in ms)'\n      }\n    }).then(done, done.fail);\n  });\n\n  it('should log the stats for getChild', function(done) {\n    perfUtil.runClickBenchmark({\n      url: URL,\n      buttons: ['#getChild'],\n      id: 'ng2.di.getChild',\n      params: [{\n        name: 'iterations', value: 20000, scale: 'linear'\n      }],\n      microMetrics: {\n        'injectAvg': 'avg time for getChild (in ms)'\n      }\n    }).then(done, done.fail);\n  });\n\n  it('should log the stats for instantiate', function(done) {\n    perfUtil.runClickBenchmark({\n      url: URL,\n      buttons: ['#instantiate'],\n      id: 'ng2.di.instantiate',\n      params: [{\n        name: 'iterations', value: 10000, scale: 'linear'\n      }],\n      microMetrics: {\n        'injectAvg': 'avg time for instantiate (in ms)'\n      }\n    }).then(done, done.fail);\n  });\n\n  /**\n   * This benchmark measures the cost of creating a new injector with a mix\n   * of binding types: Type, unresolved, unflattened.\n   */\n  it('should log the stats for createVariety', function(done) {\n    perfUtil.runClickBenchmark({\n      url: URL,\n      buttons: ['#createVariety'],\n      id: 'ng2.di.createVariety',\n      params: [{\n        name: 'iterations', value: 10000, scale: 'linear'\n      }],\n      microMetrics: {\n        'injectAvg': 'avg time for createVariety (in ms)'\n      }\n    }).then(done, done.fail);\n  });\n\n  /**\n   * Same as 'createVariety' benchmark but operates on fully resolved bindings.\n   */\n  it('should log the stats for createVarietyResolved', function(done) {\n    perfUtil.runClickBenchmark({\n      url: URL,\n      buttons: ['#createVarietyResolved'],\n      id: 'ng2.di.createVarietyResolved',\n      params: [{\n        name: 'iterations', value: 10000, scale: 'linear'\n      }],\n      microMetrics: {\n        'injectAvg': 'avg time for createVarietyResolved (in ms)'\n      }\n    }).then(done, done.fail);\n  });\n\n});\n"]}