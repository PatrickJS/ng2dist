{"version":3,"sources":["base_query_list.es6"],"names":[],"mappings":"AAAA;;AAAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;eAArC,EAAC,GAAE,YAAqB;AAAE,0BAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;;;SAA1D,EAAC,8CAAoB,CAAA,OAAM,AAAC,kCAAkB,CACtC,CAAA,+CAAqB,wDAA2B,CAAA,+CAAqB,GAAK,EAAC,OAAM,8CAAmB,CAAC,AAD/D,CACgE;AADtG,OAAG;AAAG,aAAS;AAAG,cAAU;EAC5B,UAAQ,EADhB,EAAC,4DAAoB,CAAA,OAAM,AAAC,6CAAkB,CACtC,CAAA,6DAAqB,sEAA2B,CAAA,6DAAqB,GAAK,EAAC,OAAM,4DAAmB,CAAC,AAD/D,CACgE;AAD9G,AAAI,EAAA,gBAYG,SAAM,cAAY,CAKX,AAAD,CAAG;AACZ,KAAG,SAAS,EAAI,GAAC,CAAC;AAClB,KAAG,WAAW,EAAI,GAAC,CAAC;AACpB,KAAG,OAAO,EAAI,MAAI,CAAC;AACrB,AArBsC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC,uDAuB1B,CAAA,MAAK,SAAS;OAAf,UAAkB,AAAD,CAAG;AAClB,SAAO,CAAA,IAAG,SAAS,CAAE,MAAK,SAAS,CAAC,AAAC,EAAC,CAAC;EACzC;;;;;OAEA,UAAM,OAAM,CAAG;AACb,OAAG,SAAS,EAAI,QAAM,CAAC;AACvB,OAAG,OAAO,EAAI,KAAG,CAAC;EACpB;;;;;OAEA,UAAI,GAAE,CAAG;AACP,cAAU,KAAK,AAAC,CAAC,IAAG,SAAS,CAAG,IAAE,CAAC,CAAC;AACpC,OAAG,OAAO,EAAI,KAAG,CAAC;EACpB;;;;;OAGA,UAAc,AAAD;AACX,OAAI,IAAG,OAAO,CAAG;AACf,gBAAU,QAAQ,AAAC,CAAC,IAAG,WAAW,GAAG,SAAC,CAAA;aAAM,CAAA,CAAA,AAAC,EAAC;MAAA,EAAC,CAAC;AAChD,SAAG,OAAO,EAAI,MAAI,CAAC;IACrB;AAAA,EACF;;;;;OAEA,UAAS,QAAO,CAAG;AACjB,cAAU,KAAK,AAAC,CAAC,IAAG,WAAW,CAAG,SAAO,CAAC,CAAC;EAC7C;;;;;OAEA,UAAe,QAAO,CAAG;AACvB,cAAU,OAAO,AAAC,CAAC,IAAG,WAAW,CAAG,SAAO,CAAC,CAAC;EAC/C;;;;aAnDmF;AAqDrF","file":"angular2/src/core/compiler/base_query_list.js","sourcesContent":["import {List, MapWrapper, ListWrapper} from 'angular2/src/facade/collection';\nimport {Directive} from 'angular2/src/core/annotations/annotations';\n\n/**\n * Injectable Objects that contains a live list of child directives in the light Dom of a directive.\n * The directives are kept in depth-first pre-order traversal of the DOM.\n *\n * In the future this class will implement an Observable interface.\n * For now it uses a plain list of observable callbacks.\n *\n * @exportedAs angular2/view\n */\nexport class BaseQueryList {\n  _results: List<Directive>;\n  _callbacks;\n  _dirty;\n\n  constructor() {\n    this._results = [];\n    this._callbacks = [];\n    this._dirty = false;\n  }\n\n  [Symbol.iterator]() {\n    return this._results[Symbol.iterator]();\n  }\n\n  reset(newList) {\n    this._results = newList;\n    this._dirty = true;\n  }\n\n  add(obj) {\n    ListWrapper.push(this._results, obj);\n    this._dirty = true;\n  }\n\n  // TODO(rado): hook up with change detection after #995.\n  fireCallbacks() {\n    if (this._dirty) {\n      ListWrapper.forEach(this._callbacks, (c) => c());\n      this._dirty = false;\n    }\n  }\n\n  onChange(callback) {\n    ListWrapper.push(this._callbacks, callback);\n  }\n\n  removeCallback(callback) {\n    ListWrapper.remove(this._callbacks, callback);\n  }\n}\n"]}