{"version":3,"sources":["ng_element.js"],"names":[],"mappings":"AAAA;AAAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;WAArC,EAAC,GAAE,YAAqB;AAAE,sBAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;;;;;EAAlD,IAAE,EAAV,EAAC,+CAAoB,CAAA,OAAM,AAAC,gCAAkB,CACtC,CAAA,gDAAqB,yDAA2B,CAAA,gDAAqB,GAAK,EAAC,OAAM,+CAAmB,CAAC,AAD/D,CACgE;EAAtG,eAAa,EADrB,EAAC,wCAAoB,CAAA,OAAM,AAAC,4BAAkB,CACtC,CAAA,yCAAqB,kDAA2B,CAAA,yCAAqB,GAAK,EAAC,OAAM,wCAAmB,CAAC,AAD/D,CACgE;EAClG,WAAS,EAFrB,EAAC,mCAAoB,CAAA,OAAM,AAAC,oBAAkB,CACtC,CAAA,oCAAqB,6CAA2B,CAAA,oCAAqB,GAAK,EAAC,OAAM,mCAAmB,CAAC,AAD/D,CACgE;EAEtG,iBAAe,EAHvB,EAAC,oEAAoB,CAAA,OAAM,AAAC,+CAAkB,CACtC,CAAA,qEAAqB,8EAA2B,CAAA,qEAAqB,GAAK,EAAC,OAAM,oEAAmB,CAAC,AAD/D,CACgE;AAD9G,AAAI,EAAA,YAaG,SAAM,UAAQ,CAIP,IAAG,CAAG,CAAA,iBAAgB,CAAG;AACnC,KAAG,MAAM,EAAI,KAAG,CAAC;AACjB,KAAG,mBAAmB,EAAI,kBAAgB,CAAC;AAC7C,AApBsC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC;AAyB3B,IAAI,WAAS,EAAI;AACf,AAAI,MAAA,CAAA,UAAS,EAAqB,CAAA,IAAG,MAAM,OAAO,CAAC;AACnD,SAAO,CAAA,UAAS,SAAS,cAAc,CAAE,IAAG,mBAAmB,CAAC,CAAC;EACnE;AAEA,aAAW,CAAX,UAAa,IAAG,AAAO,CAAG;AACxB,SAAO,CAAA,cAAa,AAAC,CAAC,GAAE,aAAa,AAAC,CAAC,IAAG,WAAW,CAAG,KAAG,CAAC,CAAC,CAAC;EAChE;AAAA,KAhCmF;AAArF,KAAK,eAAe,AAAC,gDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,eAAc,KAAO,UAC4B;EAAC,CAAC,CAAC,CAAC;AAiCrD","file":"angular2/src/core/compiler/ng_element.js","sourcesContent":["import {DOM} from 'angular2/src/dom/dom_adapter';\nimport {normalizeBlank} from 'angular2/src/facade/lang';\nimport * as viewModule from '../compiler/view';\nimport {DirectDomViewRef} from 'angular2/src/render/dom/direct_dom_renderer';\n\n/**\n * Allows direct access to the underlying DOM element.\n *\n * Attention: NgElement will be replaced by a different concept\n * for accessing an element in a way that is compatible with the render layer.\n *\n * @exportedAs angular2/core\n */\nexport class NgElement {\n  _view:viewModule.AppView;\n  _boundElementIndex:number;\n\n  constructor(view, boundElementIndex) {\n    this._view = view;\n    this._boundElementIndex = boundElementIndex;\n  }\n\n  // TODO(tbosch): Here we expose the real DOM element.\n  // We need a more general way to read/write to the DOM element\n  // via a proper abstraction in the render layer\n  get domElement() {\n    var domViewRef:DirectDomViewRef = this._view.render;\n    return domViewRef.delegate.boundElements[this._boundElementIndex];\n  }\n\n  getAttribute(name:string) {\n    return normalizeBlank(DOM.getAttribute(this.domElement, name));\n  }\n}\n"]}