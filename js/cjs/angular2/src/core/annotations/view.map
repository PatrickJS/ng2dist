{"version":3,"sources":["view.js"],"names":[],"mappings":"AAAA;AAAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;MAArC,EAAC,GAAE,YAAqB;AAAE,iBAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;;SAA1D,EAAC,wCAAoB,CAAA,OAAM,AAAC,4BAAkB,CACtC,CAAA,yCAAqB,kDAA2B,CAAA,yCAAqB,GAAK,EAAC,OAAM,wCAAmB,CAAC,AAD/D,CACgE;AADtG,WAAO;AAAG,QAAI;AAAG,OAAG;AAA5B,AAAI,EAAA,OAkCG,SAAM,KAAG,CASF,IAgBV;;AAfE,gBAAU;AACV,aAAO;AACP,eAAS;AACT,eAAS;AACT,WAAK;AACL,WAAK;AACL,WAAK;AAWP,KAAG,YAAY,EAAI,YAAU,CAAC;AAC9B,KAAG,SAAS,EAAI,SAAO,CAAC;AACxB,KAAG,WAAW,EAAI,WAAS,CAAC;AAC5B,KAAG,WAAW,EAAI,WAAS,CAAC;AAC5B,KAAG,OAAO,EAAI,OAAK,CAAC;AACpB,KAAG,OAAO,EAAI,OAAK,CAAC;AACpB,KAAG,OAAO,EAAI,OAAK,CAAC;AAExB,AArEwC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC,cAAwD;AAArF,KAAK,eAAe,AAAC,qBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAyCvB,MAAI,AAAC,EAAC,EAzCwC;EAAC,CAAC,CAAC,CAAC;AAqErD","file":"angular2/src/core/annotations/view.js","sourcesContent":["import {ABSTRACT, CONST, Type} from 'angular2/src/facade/lang';\n\n/**\n * Declare the available HTML templates for an application.\n *\n * Each angular component requires a single `@Component` and at least one `@View` annotation. The @View\n * annotation specifies the HTML template to use, and lists the directives that are active within the template.\n *\n * When a component is instantiated, the template is loaded into the component's shadow root, and the\n * expressions and statements in the template are evaluated against the component.\n *\n * For details on the `@Component` annotation, see [Component].\n *\n * ## Example\n *\n * ```\n * @Component({\n *   selector: 'greet'\n * })\n * @View({\n *   template: 'Hello {{name}}!',\n *   directives: [GreetUser, Bold]\n * })\n * class Greet {\n *   name: string;\n *\n *   constructor() {\n *     this.name = 'World';\n *   }\n * }\n * ```\n *\n * @exportedAs angular2/annotations\n */\nexport class View {\n  templateUrl:any; //string;\n  template:any; //string;\n  directives:any; //List<Type>;\n  formatters:any; //List<Type>;\n  source:any;//List<View>;\n  locale:any; //string\n  device:any; //string\n  @CONST()\n  constructor({\n      templateUrl,\n      template,\n      directives,\n      formatters,\n      source,\n      locale,\n      device\n    }: {\n      templateUrl: string,\n      template: string,\n      directives: List<Type>,\n      formatters: List<Type>,\n      source: List<View>,\n      locale: string,\n      device: string\n    })\n  {\n    this.templateUrl = templateUrl;\n    this.template = template;\n    this.directives = directives;\n    this.formatters = formatters;\n    this.source = source;\n    this.locale = locale;\n    this.device = device;\n  }\n}\n"]}