{"version":3,"sources":["di.js"],"names":[],"mappings":"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","file":"angular2/src/core/annotations/di.js","sourcesContent":["import {CONST} from 'angular2/src/facade/lang';\nimport {DependencyAnnotation} from 'angular2/di';\n\n/**\n * Specifies that a function for emitting events should be injected.\n *\n * NOTE: This is changing pre 1.0.\n * \n * The directive can inject an emitter function that would emit events onto the directive host element.\n * \n * @exportedAs angular2/annotations\n */\nexport class EventEmitter extends DependencyAnnotation {\n  eventName: string;\n\n  @CONST()\n  constructor(eventName) {\n    super();\n    this.eventName = eventName;\n  }\n\n  get token() {\n    return Function;\n  }\n}\n\n/**\n * Specifies that a function for setting host properties should be injected.\n *\n * NOTE: This is changing pre 1.0.\n * \n * The directive can inject a property setter that would allow setting this property on the host element.\n *\n * @exportedAs angular2/annotations\n */\nexport class PropertySetter extends DependencyAnnotation {\n  propName: string;\n  @CONST()\n  constructor(propName) {\n    super();\n    this.propName = propName;\n  }\n\n  get token() {\n    return Function;\n  }\n}\n\n/**\n * Specifies that a constant attribute value should be injected.\n *\n * The directive can inject constant string literals of host element attributes.\n *\n * ## Example\n *\n * suppose we have an `<input>` element and would like to know its `type`.\n *\n * ```html\n * <input type=\"text\">\n * ```\n *\n * A decorator could inject string literal `text` like so:\n *\n * ```javascript\n * @Decorator({\n *   selector: `input'\n * })\n * class InputDecorator {\n *   constructor(@Attribute('type') type) {\n *     // type would be `text` in this example\n *   }\n * }\n * ```\n *\n * @exportedAs angular2/annotations\n */\nexport class Attribute extends DependencyAnnotation {\n  attributeName: string;\n  @CONST()\n  constructor(attributeName) {\n    super();\n    this.attributeName = attributeName;\n  }\n\n  get token() {\n    //Normally one would default a token to a type of an injected value but here\n    //the type of a variable is \"string\" and we can't use primitive type as a return value\n    //so we use instance of Attribute instead. This doesn't matter much in practice as arguments\n    //with @Attribute annotation are injected by ElementInjector that doesn't take tokens into account.\n    return this;\n  }\n}\n\n/**\n * Specifies that a [QueryList] should be injected.\n *\n * See: [QueryList] for usage.\n *\n * @exportedAs angular2/annotations\n */\nexport class Query extends DependencyAnnotation {\n  directive;\n  @CONST()\n  constructor(directive) {\n    super();\n    this.directive = directive;\n  }\n}\n"]}