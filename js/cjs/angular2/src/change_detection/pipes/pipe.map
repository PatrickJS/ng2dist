{"version":3,"sources":["pipe.js"],"names":[],"mappings":"AASA;AATA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;WAArC,EAAC,GAAE,YAAqB;AAAE,sBAAwB;IAAE,AAA9B,CAAC;MAAvB,EAAC,GAAE,YAAqB;AAAE,iBAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;AASnD,AAAI,EAAA,CAAA,SAAQ,EAAI,IAAI,OAAK,AAAC,EAAC,CAAC;AATnC,AAAI,EAAA,OAgCG,SAAM,KAAG;;AAIhB,AApCwC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC;AAiC3B,SAAO,CAAP,UAAS,GAAE,CAAW;AAAC,SAAO,MAAI,CAAC;EAAC;AACpC,UAAQ,CAAR,UAAU,AAAD,CAAG,GAAC;AACb,UAAQ,CAAR,UAAU,KAAI,AAAI,CAAO;AAAC,SAAO,KAAG,CAAC;EAAC;AAAA,KAnC6C;AAArF,KAAK,eAAe,AAAC,wCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,eAAc,KAAO,OAC4B;EAAC,CAAC,CAAC,CAAC;AAoCrD","file":"angular2/src/change_detection/pipes/pipe.js","sourcesContent":["/**\n * Indicates that the result of a [Pipe] transformation has not changed since the last time the pipe was called.\n *\n * Suppose we have a pipe that computes changes in an array by performing a simple diff operation. If\n * we call this pipe with the same array twice, it will return `NO_CHANGE` the second time.\n *\n * @exportedAs angular2/pipes\n */\n\nexport var NO_CHANGE = new Object();\n\n/**\n * An interface for extending the list of pipes known to Angular.\n *\n * If you are writing a custom [Pipe], you must extend this interface.\n *\n * #Example\n *\n * ```\n * class DoublePipe extends Pipe {\n *  supports(obj) {\n *    return true;\n *  }\n *\n *  transform(value) {\n *    return `${value}${value}`;\n *  }\n * }\n * ```\n *\n * @exportedAs angular2/pipes\n */\nexport class Pipe {\n  supports(obj):boolean {return false;}\n  onDestroy() {}\n  transform(value:any):any {return null;}\n}\n"]}