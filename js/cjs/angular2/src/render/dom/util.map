{"version":3,"sources":["util.js"],"names":[],"mappings":"AAAA;AAAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;2BAArC,EAAC,GAAE,YAAqB;AAAE,sCAAwB;IAAE,AAA9B,CAAC;kBAAvB,EAAC,GAAE,YAAqB;AAAE,6BAAwB;IAAE,AAA9B,CAAC;wBAAvB,EAAC,GAAE,YAAqB;AAAE,mCAAwB;IAAE,AAA9B,CAAC;qBAAvB,EAAC,GAAE,YAAqB;AAAE,gCAAwB;IAAE,AAA9B,CAAC;qBAAvB,EAAC,GAAE,YAAqB;AAAE,gCAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;;SAA1D,EAAC,wCAAoB,CAAA,OAAM,AAAC,4BAAkB,CACtC,CAAA,yCAAqB,kDAA2B,CAAA,yCAAqB,GAAK,EAAC,OAAM,wCAAmB,CAAC,AAD/D,CACgE;AADtG,gBAAY;AAAG,gBAAY;AAAG,YAAQ;AAEvC,AAAM,EAAA,CAAA,yBAAwB,EAAI,cAAY,CAAC;AAC/C,AAAM,EAAA,CAAA,gBAAe,EAAI,aAAW,CAAC;AAErC,AAAM,EAAA,CAAA,sBAAqB,EAAI,IAAE,CAAC;AAEzC,AAAI,EAAA,CAAA,iBAAgB,EAAI,CAAA,aAAY,OAAO,AAAC,CAAC,SAAQ,CAAC,CAAC;AACvD,AAAI,EAAA,CAAA,gBAAe,EAAI,CAAA,aAAY,OAAO,AAAC,CAAC,UAAS,CAAC,CAAC;AAEhD,OAAS,oBAAkB,CAAE,KAAI,AAAO;AAC7C,OAAO,CAAA,aAAY,iBAAiB,AAAC,CAAC,KAAI,CAAG,kBAAgB,GAAG,SAAC,CAAA,CAAM;AACrE,SAAO,CAAA,GAAE,EAAI,CAAA,CAAA,CAAE,CAAA,CAAC,YAAY,AAAC,EAAC,CAAC;EACjC,EAAC,CAAC;AACJ;AAdA,KAAK,eAAe,AAAC,mCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,eAAc,KAAO,UAC4B;EAAC,CAAC,CAAC,CAAC;AAe9C,OAAS,oBAAkB,CAAE,KAAI,AAAO;AAC7C,OAAO,CAAA,aAAY,iBAAiB,AAAC,CAAC,KAAI,CAAG,iBAAe,GAAG,SAAC,CAAA,CAAM;AACpE,SAAO,CAAA,CAAA,CAAE,CAAA,CAAC,YAAY,AAAC,EAAC,CAAC;EAC3B,EAAC,CAAC;AACJ;AApBA,KAAK,eAAe,AAAC,mCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,eAAc,KAAO,UAC4B;EAAC,CAAC,CAAC,CAAC;AAoBrD","file":"angular2/src/render/dom/util.js","sourcesContent":["import {StringWrapper, RegExpWrapper, isPresent} from 'angular2/src/facade/lang';\n\nexport const NG_BINDING_CLASS_SELECTOR = '.ng-binding';\nexport const NG_BINDING_CLASS = 'ng-binding';\n\nexport const EVENT_TARGET_SEPARATOR = ':';\n\nvar CAMEL_CASE_REGEXP = RegExpWrapper.create('([A-Z])');\nvar DASH_CASE_REGEXP = RegExpWrapper.create('-([a-z])');\n\nexport function camelCaseToDashCase(input:string) {\n  return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, (m) => {\n    return '-' + m[1].toLowerCase();\n  });\n}\n\nexport function dashCaseToCamelCase(input:string) {\n  return StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, (m) => {\n    return m[1].toUpperCase();\n  });\n}\n"]}