{"version":3,"sources":["text_interpolation_parser.js"],"names":[],"mappings":"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","file":"angular2/src/render/dom/compiler/text_interpolation_parser.js","sourcesContent":["import {RegExpWrapper, StringWrapper, isPresent} from 'angular2/src/facade/lang';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\n\nimport {Parser} from 'angular2/change_detection';\n\nimport {CompileStep} from './compile_step';\nimport {CompileElement} from './compile_element';\nimport {CompileControl} from './compile_control';\n\n/**\n * Parses interpolations in direct text child nodes of the current element.\n */\nexport class TextInterpolationParser extends CompileStep {\n  _parser:Parser;\n\n  constructor(parser:Parser) {\n    super();\n    this._parser = parser;\n  }\n\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    if (!current.compileChildren) {\n      return;\n    }\n    var element = current.element;\n    var childNodes = DOM.childNodes(DOM.templateAwareRoot(element));\n    for (var i=0; i<childNodes.length; i++) {\n      var node = childNodes[i];\n      if (DOM.isTextNode(node)) {\n        var text = DOM.nodeValue(node);\n        var expr = this._parser.parseInterpolation(text, current.elementDescription);\n        if (isPresent(expr)) {\n          DOM.setText(node, ' ');\n          current.bindElement().bindText(i, expr);\n        }\n      }\n    }\n  }\n}\n"]}