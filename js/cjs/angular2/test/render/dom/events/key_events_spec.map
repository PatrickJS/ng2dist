{"version":3,"sources":["key_events_spec.js"],"names":[],"mappings":"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","file":"angular2/test/render/dom/events/key_events_spec.js","sourcesContent":["import {describe, ddescribe, it, iit, xit, xdescribe, expect, beforeEach, el} from 'angular2/test_lib';\nimport {KeyEventsPlugin} from 'angular2/src/render/dom/events/key_events';\n\nexport function main() {\n  describe('KeyEvents', () => {\n\n    it('should ignore unrecognized events', () => {\n      expect(KeyEventsPlugin.parseEventName('keydown')).toEqual(null);\n      expect(KeyEventsPlugin.parseEventName('keyup')).toEqual(null);\n      expect(KeyEventsPlugin.parseEventName('keydown.unknownmodifier.enter')).toEqual(null);\n      expect(KeyEventsPlugin.parseEventName('keyup.unknownmodifier.enter')).toEqual(null);\n      expect(KeyEventsPlugin.parseEventName('unknownevent.control.shift.enter')).toEqual(null);\n      expect(KeyEventsPlugin.parseEventName('unknownevent.enter')).toEqual(null);\n    });\n\n    it('should correctly parse event names', () => {\n      // key with no modifier\n      expect(KeyEventsPlugin.parseEventName('keydown.enter')).toEqual({\n        'domEventName': 'keydown',\n        'fullKey': 'enter'\n      });\n      expect(KeyEventsPlugin.parseEventName('keyup.enter')).toEqual({\n        'domEventName': 'keyup',\n        'fullKey': 'enter'\n      });\n\n      // key with modifiers:\n      expect(KeyEventsPlugin.parseEventName('keydown.control.shift.enter')).toEqual({\n        'domEventName': 'keydown',\n        'fullKey': 'control.shift.enter'\n      });\n      expect(KeyEventsPlugin.parseEventName('keyup.control.shift.enter')).toEqual({\n        'domEventName': 'keyup',\n        'fullKey': 'control.shift.enter'\n      });\n\n      // key with modifiers in a different order:\n      expect(KeyEventsPlugin.parseEventName('keydown.shift.control.enter')).toEqual({\n        'domEventName': 'keydown',\n        'fullKey': 'control.shift.enter'\n      });\n      expect(KeyEventsPlugin.parseEventName('keyup.shift.control.enter')).toEqual({\n        'domEventName': 'keyup',\n        'fullKey': 'control.shift.enter'\n      });\n\n      // key that is also a modifier:\n      expect(KeyEventsPlugin.parseEventName('keydown.shift.control')).toEqual({\n        'domEventName': 'keydown',\n        'fullKey': 'shift.control'\n      });\n      expect(KeyEventsPlugin.parseEventName('keyup.shift.control')).toEqual({\n        'domEventName': 'keyup',\n        'fullKey': 'shift.control'\n      });\n\n      expect(KeyEventsPlugin.parseEventName('keydown.control.shift')).toEqual({\n        'domEventName': 'keydown',\n        'fullKey': 'control.shift'\n      });\n      expect(KeyEventsPlugin.parseEventName('keyup.control.shift')).toEqual({\n        'domEventName': 'keyup',\n        'fullKey': 'control.shift'\n      });\n\n    });\n\n  });\n}\n"]}