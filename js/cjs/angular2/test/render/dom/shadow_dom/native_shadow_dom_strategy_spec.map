{"version":3,"sources":["native_shadow_dom_strategy_spec.js"],"names":[],"mappings":"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","file":"angular2/test/render/dom/shadow_dom/native_shadow_dom_strategy_spec.js","sourcesContent":["import {\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  el,\n  expect,\n  iit,\n  inject,\n  it,\n  xit,\n  SpyObject,\n} from 'angular2/test_lib';\n\nimport {\n  NativeShadowDomStrategy\n} from 'angular2/src/render/dom/shadow_dom/native_shadow_dom_strategy';\nimport {UrlResolver} from 'angular2/src/services/url_resolver';\nimport {StyleUrlResolver} from 'angular2/src/render/dom/shadow_dom/style_url_resolver';\nimport {RenderView} from 'angular2/src/render/dom/view/view';\n\nimport {isPresent, isBlank} from 'angular2/src/facade/lang';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\n\nexport function main() {\n  var strategy;\n\n  describe('NativeShadowDomStrategy', () => {\n    beforeEach(() => {\n      var urlResolver = new UrlResolver();\n      var styleUrlResolver = new StyleUrlResolver(urlResolver);\n      strategy = new NativeShadowDomStrategy(styleUrlResolver);\n    });\n\n    it('should attach the view nodes to the shadow root', () => {\n      var host = el('<div><span>original content</span></div>');\n      var nodes = el('<div>view</div>');\n      var view = new RenderView(null, [nodes], [], [], [], [], null);\n\n      strategy.attachTemplate(host, view);\n      var shadowRoot = DOM.getShadowRoot(host);\n      expect(isPresent(shadowRoot)).toBeTruthy();\n      expect(shadowRoot).toHaveText('view');\n    });\n\n    it('should rewrite style urls', () => {\n      var styleElement = el('<style>.foo {background-image: url(\"img.jpg\");}</style>');\n      strategy.processStyleElement('someComponent', 'http://base', styleElement);\n      expect(styleElement).toHaveText(\".foo {\" +\n        \"background-image: url('http://base/img.jpg');\" +\n        \"}\");\n    });\n\n    it('should not inline import rules', () => {\n      var styleElement = el('<style>@import \"other.css\";</style>')\n      strategy.processStyleElement('someComponent', 'http://base', styleElement);\n      expect(styleElement).toHaveText(\"@import 'http://base/other.css';\");\n    });\n  });\n}\n"]}