{"version":3,"sources":["light_dom_spec.js"],"names":[],"mappings":"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","file":"angular2/test/render/dom/shadow_dom/light_dom_spec.js","sourcesContent":["import {describe, beforeEach, it, expect, ddescribe, iit, SpyObject, el, proxy} from 'angular2/test_lib';\nimport {IMPLEMENTS, isBlank, isPresent} from 'angular2/src/facade/lang';\nimport {ListWrapper, MapWrapper} from 'angular2/src/facade/collection';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\nimport {Content} from 'angular2/src/render/dom/shadow_dom/content_tag';\nimport {LightDom} from 'angular2/src/render/dom/shadow_dom/light_dom';\nimport {RenderView} from 'angular2/src/render/dom/view/view';\nimport {ViewContainer} from 'angular2/src/render/dom/view/view_container';\n\n@proxy\n@IMPLEMENTS(RenderView)\nclass FakeView {\n  contentTags;\n  viewContainers;\n\n  constructor(containers = null) {\n    this.contentTags = [];\n    this.viewContainers = [];\n    if (isPresent(containers)) {\n      ListWrapper.forEach(containers, (c) => {\n        if (c instanceof FakeContentTag) {\n          ListWrapper.push(this.contentTags, c);\n        } else {\n          ListWrapper.push(this.contentTags, null);\n        }\n        if (c instanceof FakeViewContainer) {\n          ListWrapper.push(this.viewContainers, c);\n        } else {\n          ListWrapper.push(this.viewContainers, null);\n        }\n      });\n    }\n  }\n\n  noSuchMethod(i) {\n    super.noSuchMethod(i);\n  }\n}\n\n@proxy\n@IMPLEMENTS(ViewContainer)\nclass FakeViewContainer {\n  templateElement;\n  _nodes;\n  _contentTagContainers;\n\n  constructor(templateEl, nodes = null, views = null) {\n    this.templateElement = templateEl;\n    this._nodes = nodes;\n    this._contentTagContainers = views;\n  }\n\n  nodes(){\n    return this._nodes;\n  }\n\n  contentTagContainers(){\n    return this._contentTagContainers;\n  }\n\n  noSuchMethod(i) {\n    super.noSuchMethod(i);\n  }\n}\n\n\n@proxy\n@IMPLEMENTS(Content)\nclass FakeContentTag {\n  select;\n  _nodes;\n  contentStartElement;\n\n  constructor(contentEl, select = '', nodes = null) {\n    this.contentStartElement = contentEl;\n    this.select = select;\n    this._nodes = nodes;\n  }\n\n  insert(nodes){\n    this._nodes = ListWrapper.clone(nodes);\n  }\n\n  nodes() {\n    return this._nodes;\n  }\n\n  noSuchMethod(i) {\n    super.noSuchMethod(i);\n  }\n}\n\n\nexport function main() {\n  describe('LightDom', function() {\n    var lightDomView;\n\n    beforeEach(() => {\n      lightDomView = new FakeView();\n    });\n\n    describe(\"contentTags\", () => {\n      it(\"should collect content tags from element injectors\", () => {\n        var tag = new FakeContentTag(el('<script></script>'));\n        var shadowDomView = new FakeView([tag]);\n\n        var lightDom = new LightDom(lightDomView, shadowDomView,\n            el(\"<div></div>\"));\n\n        expect(lightDom.contentTags()).toEqual([tag]);\n      });\n\n      it(\"should collect content tags from ViewContainers\", () => {\n        var tag = new FakeContentTag(el('<script></script>'));\n        var vc = new FakeViewContainer(null, null, [\n          new FakeView([tag])\n        ]);\n        var shadowDomView = new FakeView([vc]);\n        var lightDom = new LightDom(lightDomView, shadowDomView,\n            el(\"<div></div>\"));\n\n        expect(lightDom.contentTags()).toEqual([tag]);\n      });\n    });\n\n    describe(\"expandedDomNodes\", () => {\n      it(\"should contain root nodes\", () => {\n        var lightDomEl = el(\"<div><a></a></div>\")\n        var lightDom = new LightDom(lightDomView, new FakeView(), lightDomEl);\n        expect(toHtml(lightDom.expandedDomNodes())).toEqual([\"<a></a>\"]);\n      });\n\n      it(\"should include view container nodes\", () => {\n        var lightDomEl = el(\"<div><template></template></div>\");\n        var lightDom = new LightDom(\n          new FakeView([\n            new FakeViewContainer(\n              DOM.firstChild(lightDomEl),  // template element\n              [el('<a></a>')]              // light DOM nodes of view container\n            )\n          ]),\n          null,\n          lightDomEl);\n\n        expect(toHtml(lightDom.expandedDomNodes())).toEqual([\"<a></a>\"]);\n      });\n\n      it(\"should include content nodes\", () => {\n        var lightDomEl = el(\"<div><content></content></div>\");\n        var lightDom = new LightDom(\n          new FakeView([\n            new FakeContentTag(\n              DOM.firstChild(lightDomEl),  // content element\n              '',                          // selector\n              [el('<a></a>')]              // light DOM nodes of content tag\n            )\n          ]),\n          null,\n          lightDomEl);\n\n        expect(toHtml(lightDom.expandedDomNodes())).toEqual([\"<a></a>\"]);\n      });\n\n      it(\"should work when the element injector array contains nulls\", () => {\n        var lightDomEl = el(\"<div><a></a></div>\")\n\n        var lightDomView = new FakeView();\n\n        var lightDom = new LightDom(\n          lightDomView,\n          new FakeView(),\n          lightDomEl);\n\n        expect(toHtml(lightDom.expandedDomNodes())).toEqual([\"<a></a>\"]);\n      });\n    });\n\n    describe(\"redistribute\", () => {\n      it(\"should redistribute nodes between content tags with select property set\", () => {\n        var contentA = new FakeContentTag(null, \"a\");\n        var contentB = new FakeContentTag(null, \"b\");\n\n        var lightDomEl = el(\"<div><a>1</a><b>2</b><a>3</a></div>\")\n\n        var lightDom = new LightDom(lightDomView, new FakeView([\n          contentA,\n          contentB\n        ]), lightDomEl);\n\n        lightDom.redistribute();\n\n        expect(toHtml(contentA.nodes())).toEqual([\"<a>1</a>\", \"<a>3</a>\"]);\n        expect(toHtml(contentB.nodes())).toEqual([\"<b>2</b>\"]);\n      });\n\n      it(\"should support wildcard content tags\", () => {\n        var wildcard = new FakeContentTag(null, '');\n        var contentB = new FakeContentTag(null, \"b\");\n\n        var lightDomEl = el(\"<div><a>1</a><b>2</b><a>3</a></div>\")\n\n        var lightDom = new LightDom(lightDomView, new FakeView([\n          wildcard,\n          contentB\n        ]), lightDomEl);\n\n        lightDom.redistribute();\n\n        expect(toHtml(wildcard.nodes())).toEqual([\"<a>1</a>\", \"<b>2</b>\", \"<a>3</a>\"]);\n        expect(toHtml(contentB.nodes())).toEqual([]);\n      });\n    });\n  });\n}\n\nfunction toHtml(nodes) {\n  if (isBlank(nodes)) return [];\n  return ListWrapper.map(nodes, DOM.getOuterHTML);\n}\n"]}