{"version":3,"sources":["view_spec.js"],"names":[],"mappings":"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","file":"angular2/test/render/dom/view/view_spec.js","sourcesContent":["import {describe, ddescribe, it, iit, xit, xdescribe, expect, beforeEach, el} from 'angular2/test_lib';\n\nimport {ListWrapper} from 'angular2/src/facade/collection';\n\nimport {RenderProtoView} from 'angular2/src/render/dom/view/proto_view';\nimport {RenderView} from 'angular2/src/render/dom/view/view';\nimport {ShadowDomStrategy} from 'angular2/src/render/dom/shadow_dom/shadow_dom_strategy';\nimport {LightDom} from 'angular2/src/render/dom/shadow_dom/light_dom';\n\nexport function main() {\n\n  function createView() {\n    var proto = new RenderProtoView({element: el('<div></div>'), isRootView: false, elementBinders: []});\n    var rootNodes = [el('<div></div>')];\n    var boundTextNodes = [];\n    var boundElements = [el('<div></div>')];\n    var viewContainers = [];\n    var contentTags = [];\n    var eventManager = null;\n    return new RenderView(proto, rootNodes,\n      boundTextNodes, boundElements, viewContainers, contentTags, eventManager);\n  }\n\n  function createShadowDomStrategy(log) {\n    return new FakeShadowDomStrategy(log);\n  }\n\n  describe('RenderView', () => {\n    var log, strategy;\n\n    beforeEach( () => {\n      log = [];\n      strategy = createShadowDomStrategy(log);\n    });\n\n    describe('setComponentView', () => {\n\n      it('should redistribute when a component is added to a hydrated view', () => {\n        var hostView = createView();\n        var childView = createView();\n        hostView.hydrate(null);\n        hostView.setComponentView(strategy, 0, childView);\n        expect(log[0]).toEqual(['redistribute']);\n      });\n\n      it('should not redistribute when a component is added to a dehydrated view', () => {\n        var hostView = createView();\n        var childView = createView();\n        hostView.setComponentView(strategy, 0, childView);\n        expect(log).toEqual([]);\n      });\n\n    });\n\n  });\n}\n\nclass FakeShadowDomStrategy extends ShadowDomStrategy {\n  log;\n  constructor(log) {\n    super();\n    this.log = log;\n  }\n  constructLightDom(lightDomView:RenderView, shadowDomView:RenderView, element): LightDom {\n    return new FakeLightDom(this.log, lightDomView, shadowDomView, element);\n  }\n}\n\nclass FakeLightDom extends LightDom {\n  log;\n  constructor(log, lightDomView:RenderView, shadowDomView:RenderView, element) {\n    super(lightDomView, shadowDomView, element);\n    this.log = log;\n  }\n  redistribute() {\n    ListWrapper.push(this.log, ['redistribute']);\n  }\n}"]}