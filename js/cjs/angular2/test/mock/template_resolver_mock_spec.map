{"version":3,"sources":["template_resolver_mock_spec.js"],"names":[],"mappings":"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","file":"angular2/test/mock/template_resolver_mock_spec.js","sourcesContent":["import {\n  beforeEach,\n  ddescribe,\n  describe,\n  el,\n  expect,\n  iit,\n  it,\n} from 'angular2/test_lib';\n\nimport {MockTemplateResolver} from 'angular2/src/mock/template_resolver_mock';\n\nimport {Component} from 'angular2/src/core/annotations/annotations';\nimport {View} from 'angular2/src/core/annotations/view';\n\nimport {isBlank} from 'angular2/src/facade/lang';\n\nexport function main() {\n  describe('MockTemplateResolver', () => {\n    var resolver;\n\n    beforeEach(() => {\n      resolver = new MockTemplateResolver();\n    });\n\n    describe('View overriding', () => {\n      it('should fallback to the default TemplateResolver when templates are not overridden', () => {\n        var template = resolver.resolve(SomeComponent);\n        expect(template.template).toEqual('template');\n        expect(template.directives).toEqual([SomeDirective]);\n      });\n\n      it('should allow overriding the @View', () => {\n        resolver.setView(SomeComponent, new View({template: 'overridden template'}));\n        var template = resolver.resolve(SomeComponent);\n        expect(template.template).toEqual('overridden template');\n        expect(isBlank(template.directives)).toBe(true);\n\n      });\n\n      it('should not allow overriding a template after it has been resolved', () => {\n        resolver.resolve(SomeComponent);\n        expect(() => {\n          resolver.setView(SomeComponent, new View({template: 'overridden template'}));\n        }).toThrowError('The component SomeComponent has already been compiled, its configuration can not be changed');\n      });\n    });\n\n    describe('inline template definition overriding', () => {\n      it('should allow overriding the default template', () => {\n        resolver.setInlineTemplate(SomeComponent, 'overridden template');\n        var template = resolver.resolve(SomeComponent);\n        expect(template.template).toEqual('overridden template');\n        expect(template.directives).toEqual([SomeDirective]);\n      });\n\n      it('should allow overriding an overriden @View', () => {\n        resolver.setView(SomeComponent, new View({template: 'overridden template'}));\n        resolver.setInlineTemplate(SomeComponent, 'overridden template x 2');\n        var template = resolver.resolve(SomeComponent);\n        expect(template.template).toEqual('overridden template x 2');\n      });\n\n      it('should not allow overriding a template after it has been resolved', () => {\n        resolver.resolve(SomeComponent);\n        expect(() => {\n          resolver.setInlineTemplate(SomeComponent, 'overridden template');\n        }).toThrowError('The component SomeComponent has already been compiled, its configuration can not be changed');\n      });\n    });\n\n\n    describe('Directive overriding', () => {\n      it('should allow overriding a directive from the default template', () => {\n        resolver.overrideTemplateDirective(SomeComponent, SomeDirective, SomeOtherDirective);\n        var template = resolver.resolve(SomeComponent);\n        expect(template.directives.length).toEqual(1);\n        expect(template.directives[0]).toBe(SomeOtherDirective);\n      });\n\n      it('should allow overriding a directive from an overriden @View', () => {\n        resolver.setView(SomeComponent, new View({directives: [SomeOtherDirective]}));\n        resolver.overrideTemplateDirective(SomeComponent, SomeOtherDirective, SomeComponent);\n        var template = resolver.resolve(SomeComponent);\n        expect(template.directives.length).toEqual(1);\n        expect(template.directives[0]).toBe(SomeComponent);\n      });\n\n      it('should throw when the overridden directive is not present', () => {\n        resolver.overrideTemplateDirective(SomeComponent, SomeOtherDirective, SomeDirective);\n        expect(() => { resolver.resolve(SomeComponent); })\n            .toThrowError('Overriden directive SomeOtherDirective not found in the template of SomeComponent');\n      });\n\n      it('should not allow overriding a directive after its template has been resolved', () => {\n        resolver.resolve(SomeComponent);\n        expect(() => {\n          resolver.overrideTemplateDirective(SomeComponent, SomeDirective, SomeOtherDirective);\n        }).toThrowError('The component SomeComponent has already been compiled, its configuration can not be changed');\n      });\n    });\n  });\n}\n\n@Component({selector: 'cmp'})\n@View({\n  template: 'template',\n  directives: [SomeDirective],\n})\nclass SomeComponent {\n}\n\nclass SomeDirective {\n}\n\nclass SomeOtherDirective {\n}\n"]}