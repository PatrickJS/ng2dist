{"version":3,"sources":["xhr_mock_spec.js"],"names":[],"mappings":"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","file":"angular2/test/mock/xhr_mock_spec.js","sourcesContent":["import {\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  el,\n  expect,\n  iit,\n  inject,\n  IS_DARTIUM,\n  it,\n} from 'angular2/test_lib';\nimport {MockXHR} from 'angular2/src/mock/xhr_mock';\nimport {PromiseWrapper, Promise} from 'angular2/src/facade/async';\nimport {isPresent} from 'angular2/src/facade/lang';\n\nexport function main() {\n  describe('MockXHR', () => {\n    var xhr;\n\n    beforeEach(() => {\n      xhr = new MockXHR();\n    });\n\n    function expectResponse(request: Promise, url: string, response: string, done = null) {\n      function onResponse(text: string) {\n        if (response === null) {\n          throw `Unexpected response ${url} -> ${text}`;\n        } else {\n          expect(text).toEqual(response);\n          if (isPresent(done)) done();\n        }\n      }\n\n      function onError(error: string) {\n        if (response !== null) {\n          throw `Unexpected error ${url}`;\n        } else {\n          expect(error).toEqual(`Failed to load ${url}`);\n          if (isPresent(done)) done();\n        }\n      }\n\n      PromiseWrapper.then(request, onResponse, onError);\n    }\n\n    it('should return a response from the definitions', inject([AsyncTestCompleter], (async) => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.when(url, response);\n      expectResponse(xhr.get(url), url, response, () => async.done());\n      xhr.flush();\n    }));\n\n    it('should return an error from the definitions', inject([AsyncTestCompleter], (async) => {\n      var url = '/foo';\n      var response = null;\n      xhr.when(url, response);\n      expectResponse(xhr.get(url), url, response, () => async.done());\n      xhr.flush();\n    }));\n\n    it('should return a response from the expectations', inject([AsyncTestCompleter], (async) => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.expect(url, response);\n      expectResponse(xhr.get(url), url, response, () => async.done());\n      xhr.flush();\n    }));\n\n    it('should return an error from the expectations', inject([AsyncTestCompleter], (async) => {\n      var url = '/foo';\n      var response = null;\n      xhr.expect(url, response);\n      expectResponse(xhr.get(url), url, response, () => async.done());\n      xhr.flush();\n    }));\n\n    it('should not reuse expectations', () => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.expect(url, response);\n      xhr.get(url);\n      xhr.get(url);\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unexpected request /foo');\n    });\n\n    it('should return expectations before definitions', inject([AsyncTestCompleter], (async) => {\n      var url = '/foo';\n      xhr.when(url, 'when');\n      xhr.expect(url, 'expect');\n      expectResponse(xhr.get(url), url, 'expect');\n      expectResponse(xhr.get(url), url, 'when', () => async.done());\n      xhr.flush();\n    }));\n\n    it('should throw when there is no definitions or expectations', () => {\n      xhr.get('/foo');\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unexpected request /foo');\n    });\n\n    it('should throw when flush is called without any pending requests', () => {\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('No pending requests to flush');\n    });\n\n    it('should throw on unstatisfied expectations', () => {\n      xhr.expect('/foo', 'bar');\n      xhr.when('/bar', 'foo');\n      xhr.get('/bar');\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unsatisfied requests: /foo');\n    });\n  });\n}\n"]}