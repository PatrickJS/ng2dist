{"version":3,"sources":["parser_spec.js"],"names":[],"mappings":"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","file":"angular2/test/change_detection/parser/parser_spec.js","sourcesContent":["import {ddescribe, describe, it, xit, iit, expect, beforeEach} from 'angular2/test_lib';\nimport {BaseException, isBlank, isPresent} from 'angular2/src/facade/lang';\nimport {reflector} from 'angular2/src/reflection/reflection';\nimport {MapWrapper, ListWrapper} from 'angular2/src/facade/collection';\nimport {Parser} from 'angular2/src/change_detection/parser/parser';\nimport {Lexer} from 'angular2/src/change_detection/parser/lexer';\nimport {Locals} from 'angular2/src/change_detection/parser/locals';\nimport {Pipe, LiteralPrimitive} from 'angular2/src/change_detection/parser/ast';\n\nclass TestData {\n  a;\n  b;\n  fnReturnValue;\n  constructor(a, b, fnReturnValue) {\n    this.a = a;\n    this.b = b;\n    this.fnReturnValue = fnReturnValue;\n  }\n\n  fn() {\n    return this.fnReturnValue;\n  }\n\n  add(a, b) {\n    return a + b;\n  }\n}\n\nexport function main() {\n  function td(a = 0, b = 0, fnReturnValue = \"constant\") {\n    return new TestData(a, b, fnReturnValue);\n  }\n\n  function createParser() {\n    return new Parser(new Lexer(), reflector);\n  }\n\n  function parseAction(text, location = null) {\n    return createParser().parseAction(text, location);\n  }\n\n  function parseBinding(text, location = null) {\n    return createParser().parseBinding(text, location);\n  }\n\n  function parseTemplateBindings(text, location = null) {\n    return createParser().parseTemplateBindings(text, location);\n  }\n\n  function parseInterpolation(text, location = null) {\n    return createParser().parseInterpolation(text, location);\n  }\n\n  function addPipes(ast, pipes) {\n    return createParser().addPipes(ast, pipes);\n  }\n\n  function emptyLocals() {\n    return new Locals(null, MapWrapper.create());\n  }\n\n  function expectEval(text, passedInContext = null, passedInLocals = null) {\n    var c = isBlank(passedInContext) ? td() : passedInContext;\n    var l = isBlank(passedInLocals) ? emptyLocals() : passedInLocals;\n    return expect(parseAction(text).eval(c, l));\n  }\n\n  function expectEvalError(text, passedInContext = null, passedInLocals = null) {\n    var c = isBlank(passedInContext) ? td() : passedInContext;\n    var l = isBlank(passedInLocals) ? emptyLocals() : passedInLocals;\n    return expect(() => parseAction(text).eval(c, l));\n  }\n\n  function evalAsts(asts, passedInContext = null) {\n    var c = isBlank(passedInContext) ? td() : passedInContext;\n    var res = [];\n    for (var i=0; i<asts.length; i++) {\n      ListWrapper.push(res, asts[i].eval(c, emptyLocals()));\n    }\n    return res;\n  }\n\n  describe(\"parser\", () => {\n    describe(\"parseAction\", () => {\n      describe(\"basic expressions\", () => {\n        it('should parse numerical expressions', () => {\n          expectEval(\"1\").toEqual(1);\n        });\n\n        it('should parse strings', () => {\n          expectEval(\"'1'\").toEqual('1');\n          expectEval('\"1\"').toEqual('1');\n        });\n\n        it('should parse null', () => {\n          expectEval(\"null\").toBe(null);\n        });\n\n        it('should parse unary - expressions', () => {\n          expectEval(\"-1\").toEqual(-1);\n          expectEval(\"+1\").toEqual(1);\n        });\n\n        it('should parse unary ! expressions', () => {\n          expectEval(\"!true\").toEqual(!true);\n          expectEval(\"!!true\").toEqual(!!true);\n        });\n\n        it('should parse multiplicative expressions', () => {\n          expectEval(\"3*4/2%5\").toEqual(3 * 4 / 2 % 5);\n        });\n\n        it('should parse additive expressions', () => {\n          expectEval(\"3+6-2\").toEqual(3 + 6 - 2);\n        });\n\n        it('should parse relational expressions', () => {\n          expectEval(\"2<3\").toEqual(2 < 3);\n          expectEval(\"2>3\").toEqual(2 > 3);\n          expectEval(\"2<=2\").toEqual(2 <= 2);\n          expectEval(\"2>=2\").toEqual(2 >= 2);\n        });\n\n        it('should parse equality expressions', () => {\n          expectEval(\"2==3\").toEqual(2 == 3);\n          expectEval(\"2!=3\").toEqual(2 != 3);\n        });\n\n        it('should parse logicalAND expressions', () => {\n          expectEval(\"true&&true\").toEqual(true && true);\n          expectEval(\"true&&false\").toEqual(true && false);\n        });\n\n        it('should parse logicalOR expressions', () => {\n          expectEval(\"false||true\").toEqual(false || true);\n          expectEval(\"false||false\").toEqual(false || false);\n        });\n\n        it('should short-circuit AND operator', () => {\n          expectEval('false && a()', td(() => {throw \"BOOM\"})).toBe(false);\n        });\n\n        it('should short-circuit OR operator', () => {\n          expectEval('true || a()', td(() => {throw \"BOOM\"})).toBe(true);\n        });\n\n        it('should evaluate grouped expressions', () => {\n          expectEval(\"(1+2)*3\").toEqual((1+2)*3);\n        });\n\n        it('should parse an empty string', () => {\n          expectEval('').toBeNull();\n        });\n      });\n\n      describe(\"literals\", () => {\n        it('should evaluate array', () => {\n          expectEval(\"[1][0]\").toEqual(1);\n          expectEval(\"[[1]][0][0]\").toEqual(1);\n          expectEval(\"[]\").toEqual([]);\n          expectEval(\"[].length\").toEqual(0);\n          expectEval(\"[1, 2].length\").toEqual(2);\n        });\n\n        it('should evaluate map', () => {\n          expectEval(\"{}\").toEqual({});\n          expectEval(\"{a:'b'}['a']\").toEqual('b');\n          expectEval(\"{'a':'b'}['a']\").toEqual('b');\n          expectEval(\"{\\\"a\\\":'b'}['a']\").toEqual('b');\n          expectEval(\"{\\\"a\\\":'b'}['a']\").toEqual(\"b\");\n          expectEval(\"{}['a']\").not.toBeDefined();\n          expectEval(\"{\\\"a\\\":'b'}['invalid']\").not.toBeDefined();\n        });\n\n        it('should only allow identifier, string, or keyword as map key', () => {\n          expectEvalError('{(:0}').toThrowError(new RegExp('expected identifier, keyword, or string'));\n          expectEvalError('{1234:0}').toThrowError(new RegExp('expected identifier, keyword, or string'));\n        });\n      });\n\n      describe(\"member access\", () => {\n        it(\"should parse field access\", () => {\n          expectEval(\"a\", td(999)).toEqual(999);\n          expectEval(\"a.a\", td(td(999))).toEqual(999);\n        });\n\n        it('should throw when accessing a field on null', () => {\n          expectEvalError(\"a.a.a\").toThrowError();\n        });\n\n        it('should only allow identifier or keyword as member names', () => {\n          expectEvalError('x.(').toThrowError(new RegExp('identifier or keyword'));\n          expectEvalError('x. 1234').toThrowError(new RegExp('identifier or keyword'));\n          expectEvalError('x.\"foo\"').toThrowError(new RegExp('identifier or keyword'));\n        });\n\n        it(\"should read a field from Locals\", () => {\n          var locals = new Locals(null,\n            MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n          expectEval(\"key\", null, locals).toEqual(\"value\");\n        });\n\n        it(\"should handle nested Locals\", () => {\n          var nested = new Locals(null,\n            MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n          var locals = new Locals(nested, MapWrapper.create());\n          expectEval(\"key\", null, locals).toEqual(\"value\");\n        });\n\n        it(\"should fall back to a regular field read when Locals \"+\n        \"does not have the requested field\", () => {\n          var locals = new Locals(null, MapWrapper.create());\n          expectEval(\"a\", td(999), locals).toEqual(999);\n        });\n      });\n\n      describe(\"method calls\", () => {\n        it(\"should evaluate method calls\", () => {\n          expectEval(\"fn()\", td(0, 0, \"constant\")).toEqual(\"constant\");\n          expectEval(\"add(1,2)\").toEqual(3);\n          expectEval(\"a.add(1,2)\", td(td())).toEqual(3);\n          expectEval(\"fn().add(1,2)\", td(0, 0, td())).toEqual(3);\n        });\n\n        it('should throw when more than 10 arguments', () => {\n          expectEvalError(\"fn(1,2,3,4,5,6,7,8,9,10,11)\").toThrowError(new RegExp('more than'));\n        });\n\n        it('should throw when no method', () => {\n          expectEvalError(\"blah()\").toThrowError();\n        });\n\n        it('should evaluate a method from Locals', () => {\n          var locals = new Locals(\n            null,\n            MapWrapper.createFromPairs([['fn', () => 'child']])\n          );\n          expectEval(\"fn()\", td(0, 0, 'parent'), locals).toEqual('child');\n        });\n\n        it('should fall back to the parent context when Locals does not ' +\n        'have the requested method', () => {\n          var locals = new Locals(null, MapWrapper.create());\n          expectEval(\"fn()\", td(0, 0, 'parent'), locals).toEqual('parent');\n        });\n      });\n\n      describe(\"functional calls\", () => {\n        it(\"should evaluate function calls\", () => {\n          expectEval(\"fn()(1,2)\", td(0, 0, (a, b) => a + b)).toEqual(3);\n        });\n\n        it('should throw on non-function function calls', () => {\n          expectEvalError(\"4()\").toThrowError(new RegExp('4 is not a function'));\n        });\n\n        it('should parse functions for object indices', () => {\n          expectEval('a[b()]()', td([()=>6], () => 0)).toEqual(6);\n        });\n      });\n\n      describe(\"conditional\", () => {\n        it('should parse ternary/conditional expressions', () => {\n          expectEval(\"7==3+4?10:20\").toEqual(10);\n          expectEval(\"false?10:20\").toEqual(20);\n        });\n\n        it('should throw on incorrect ternary operator syntax', () => {\n          expectEvalError(\"true?1\").\n            toThrowError(new RegExp('Parser Error: Conditional expression true\\\\?1 requires all 3 expressions'));\n        });\n      });\n\n      describe(\"assignment\", () => {\n        it(\"should support field assignments\", () => {\n          var context = td();\n          expectEval(\"a=12\", context).toEqual(12);\n          expect(context.a).toEqual(12);\n        });\n\n        it(\"should support nested field assignments\", () => {\n          var context = td(td(td()));\n          expectEval(\"a.a.a=123;\", context).toEqual(123);\n          expect(context.a.a.a).toEqual(123);\n        });\n\n        it(\"should support multiple assignments\", () => {\n          var context = td();\n          expectEval(\"a=123; b=234\", context).toEqual(234);\n          expect(context.a).toEqual(123);\n          expect(context.b).toEqual(234);\n        });\n\n        it(\"should support array updates\", () => {\n          var context = td([100]);\n          expectEval('a[0] = 200', context).toEqual(200);\n          expect(context.a[0]).toEqual(200);\n        });\n\n        it(\"should support map updates\", () => {\n          var context = td({\"key\" : 100});\n          expectEval('a[\"key\"] = 200', context).toEqual(200);\n          expect(context.a[\"key\"]).toEqual(200);\n        });\n\n        it(\"should support array/map updates\", () => {\n          var context = td([{\"key\" : 100}]);\n          expectEval('a[0][\"key\"] = 200', context).toEqual(200);\n          expect(context.a[0][\"key\"]).toEqual(200);\n        });\n\n        it('should allow assignment after array dereference', () => {\n          var context = td([td()]);\n          expectEval('a[0].a = 200', context).toEqual(200);\n          expect(context.a[0].a).toEqual(200);\n        });\n\n        it('should throw on bad assignment', () => {\n          expectEvalError(\"5=4\").toThrowError(new RegExp(\"Expression 5 is not assignable\"));\n        });\n\n        it('should reassign when no variable binding with the given name', () => {\n          var context = td();\n          var locals = new Locals(null, MapWrapper.create());\n          expectEval('a = 200', context, locals).toEqual(200);\n          expect(context.a).toEqual(200);\n        });\n\n        it('should throw when reassigning a variable binding', () => {\n          var locals = new Locals(null, MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n          expectEvalError('key = 200', null, locals).toThrowError(new RegExp(\"Cannot reassign a variable binding\"));\n        });\n      });\n\n      describe(\"general error handling\", () => {\n        it(\"should throw on an unexpected token\", () => {\n          expectEvalError(\"[1,2] trac\")\n            .toThrowError(new RegExp('Unexpected token \\'trac\\''));\n        });\n\n        it('should throw a reasonable error for unconsumed tokens', () => {\n          expectEvalError(\")\").toThrowError(new RegExp(\"Unexpected token \\\\) at column 1 in \\\\[\\\\)\\\\]\"));\n        });\n\n        it('should throw on missing expected token', () => {\n          expectEvalError(\"a(b\").toThrowError(new RegExp(\"Missing expected \\\\) at the end of the expression \\\\[a\\\\(b\\\\]\"));\n        });\n      });\n\n      it(\"should error when using pipes\", () => {\n        expectEvalError('x|blah').toThrowError(new RegExp('Cannot have a pipe'));\n      });\n\n      it('should pass exceptions', () => {\n        expect(() => {\n          parseAction('a()').eval(td(() => {throw new BaseException(\"boo to you\")}), emptyLocals());\n        }).toThrowError('boo to you');\n      });\n\n      describe(\"multiple statements\", () => {\n        it(\"should return the last non-blank value\", () => {\n          expectEval(\"a=1;b=3;a+b\").toEqual(4);\n          expectEval(\"1;;\").toEqual(1);\n        });\n      });\n\n      it('should store the source in the result', () => {\n        expect(parseAction('someExpr').source).toBe('someExpr');\n      });\n\n      it('should store the passed-in location', () => {\n        expect(parseAction('someExpr', 'location').location).toBe('location');\n      });\n    });\n\n    describe(\"parseBinding\", () => {\n      describe(\"pipes\", () => {\n        it(\"should parse pipes\", () => {\n          var exp = parseBinding(\"'Foo'|uppercase\").ast;\n          expect(exp).toBeAnInstanceOf(Pipe);\n          expect(exp.name).toEqual(\"uppercase\");\n        });\n\n        it(\"should parse pipes with args\", () => {\n          var exp = parseBinding(\"1|increment:2\").ast;\n          expect(exp).toBeAnInstanceOf(Pipe);\n          expect(exp.name).toEqual(\"increment\");\n          expect(exp.args[0]).toBeAnInstanceOf(LiteralPrimitive);\n        });\n\n        it('should only allow identifier or keyword as formatter names', () => {\n          expect(() => parseBinding('\"Foo\"|(')).toThrowError(new RegExp('identifier or keyword'));\n          expect(() => parseBinding('\"Foo\"|1234')).toThrowError(new RegExp('identifier or keyword'));\n          expect(() => parseBinding('\"Foo\"|\"uppercase\"')).toThrowError(new RegExp('identifier or keyword'));\n        });\n\n      });\n\n      it('should store the source in the result', () => {\n        expect(parseBinding('someExpr').source).toBe('someExpr');\n      });\n\n      it('should store the passed-in location', () => {\n        expect(parseBinding('someExpr', 'location').location).toBe('location');\n      });\n\n      it('should throw on chain expressions', () => {\n        expect(() => parseBinding(\"1;2\")).toThrowError(new RegExp(\"contain chained expression\"));\n      });\n\n      it('should throw on assignmnt', () => {\n        expect(() => parseBinding(\"1;2\")).toThrowError(new RegExp(\"contain chained expression\"));\n      });\n    });\n\n    describe('parseTemplateBindings', () => {\n\n      function keys(templateBindings) {\n        return ListWrapper.map(templateBindings, (binding) => binding.key );\n      }\n\n      function keyValues(templateBindings) {\n        return ListWrapper.map(templateBindings, (binding) => {\n          if (binding.keyIsVar) {\n            return '#' + binding.key + (isBlank(binding.name) ? '' : '=' + binding.name);\n          } else {\n            return binding.key +  (isBlank(binding.expression) ? '' : `=${binding.expression}`)\n          }\n        });\n      }\n\n      function exprSources(templateBindings) {\n        return ListWrapper.map(templateBindings,\n          (binding) => isPresent(binding.expression) ? binding.expression.source : null );\n      }\n\n      function exprAsts(templateBindings) {\n        return ListWrapper.map(templateBindings,\n          (binding) => isPresent(binding.expression) ? binding.expression : null );\n      }\n\n      it('should parse an empty string', () => {\n        var bindings = parseTemplateBindings('');\n        expect(bindings).toEqual([]);\n      });\n\n      it('should parse a string without a value', () => {\n        var bindings = parseTemplateBindings('a');\n        expect(keys(bindings)).toEqual(['a']);\n      });\n\n      it('should only allow identifier, string, or keyword including dashes as keys', () => {\n        var bindings = parseTemplateBindings(\"a:'b'\");\n        expect(keys(bindings)).toEqual(['a']);\n\n        bindings = parseTemplateBindings(\"'a':'b'\");\n        expect(keys(bindings)).toEqual(['a']);\n\n        bindings = parseTemplateBindings(\"\\\"a\\\":'b'\");\n        expect(keys(bindings)).toEqual(['a']);\n\n        bindings = parseTemplateBindings(\"a-b:'c'\");\n        expect(keys(bindings)).toEqual(['a-b']);\n\n        expect( () => {\n          parseTemplateBindings('(:0');\n        }).toThrowError(new RegExp('expected identifier, keyword, or string'));\n\n        expect( () => {\n          parseTemplateBindings('1234:0');\n        }).toThrowError(new RegExp('expected identifier, keyword, or string'));\n      });\n\n      it('should detect expressions as value', () => {\n        var bindings = parseTemplateBindings(\"a:b\");\n        expect(exprSources(bindings)).toEqual(['b']);\n        expect(evalAsts(exprAsts(bindings), td(0, 23))).toEqual([23]);\n\n        bindings = parseTemplateBindings(\"a:1+1\");\n        expect(exprSources(bindings)).toEqual(['1+1']);\n        expect(evalAsts(exprAsts(bindings))).toEqual([2]);\n      });\n\n      it('should detect names as value', () => {\n        var bindings = parseTemplateBindings(\"a:#b\");\n        expect(keyValues(bindings)).toEqual(['a', '#b']);\n      });\n\n      it('should allow space and colon as separators', () => {\n        var bindings = parseTemplateBindings(\"a:b\");\n        expect(keys(bindings)).toEqual(['a']);\n        expect(exprSources(bindings)).toEqual(['b']);\n\n        bindings = parseTemplateBindings(\"a b\");\n        expect(keys(bindings)).toEqual(['a']);\n        expect(exprSources(bindings)).toEqual(['b']);\n      });\n\n      it('should allow multiple pairs', () => {\n        var bindings = parseTemplateBindings(\"a 1 b 2\");\n        expect(keys(bindings)).toEqual(['a', 'b']);\n        expect(exprSources(bindings)).toEqual(['1 ', '2']);\n      });\n\n      it('should store the sources in the result', () => {\n        var bindings = parseTemplateBindings(\"a 1,b 2\");\n        expect(bindings[0].expression.source).toEqual('1');\n        expect(bindings[1].expression.source).toEqual('2');\n      });\n\n      it('should store the passed-in location', () => {\n        var bindings = parseTemplateBindings(\"a 1,b 2\", 'location');\n        expect(bindings[0].expression.location).toEqual('location');\n      });\n\n      it('should support var/# notation', () => {\n        var bindings = parseTemplateBindings(\"var i\");\n        expect(keyValues(bindings)).toEqual(['#i']);\n\n        bindings = parseTemplateBindings(\"#i\");\n        expect(keyValues(bindings)).toEqual(['#i']);\n\n        bindings = parseTemplateBindings(\"var i-a = k-a\");\n        expect(keyValues(bindings)).toEqual(['#i-a=k-a']);\n\n        bindings = parseTemplateBindings(\"keyword var item; var i = k\");\n        expect(keyValues(bindings)).toEqual(['keyword', '#item=\\$implicit', '#i=k']);\n\n        bindings = parseTemplateBindings(\"keyword: #item; #i = k\");\n        expect(keyValues(bindings)).toEqual(['keyword', '#item=\\$implicit', '#i=k']);\n\n        bindings = parseTemplateBindings(\"directive: var item in expr; var a = b\", 'location');\n        expect(keyValues(bindings)).toEqual(['directive', '#item=\\$implicit', 'in=expr in location', '#a=b']);\n      });\n\n      it('should parse pipes', () => {\n        var bindings = parseTemplateBindings('key value|pipe');\n        var ast = bindings[0].expression.ast\n        expect(ast).toBeAnInstanceOf(Pipe);\n      });\n    });\n\n    describe('parseInterpolation', () => {\n      it('should return null if no interpolation', () => {\n        expect(parseInterpolation('nothing')).toBe(null);\n      });\n\n      it('should parse no prefix/suffix interpolation', () => {\n        var ast = parseInterpolation('{{a}}').ast;\n        expect(ast.strings).toEqual(['', '']);\n        expect(ast.expressions.length).toEqual(1);\n        expect(ast.expressions[0].name).toEqual('a');\n      });\n\n      it('should parse prefix/suffix with multiple interpolation', () => {\n        var ast = parseInterpolation('before{{a}}middle{{b}}after').ast;\n        expect(ast.strings).toEqual(['before', 'middle', 'after']);\n        expect(ast.expressions.length).toEqual(2);\n        expect(ast.expressions[0].name).toEqual('a');\n        expect(ast.expressions[1].name).toEqual('b');\n      });\n    });\n\n    describe('addPipes', () => {\n      it('should return the given ast whe the list of pipes is empty', () => {\n        var ast = parseBinding(\"1 + 1\", \"Location\");\n        var transformedAst = addPipes(ast, []);\n        expect(transformedAst).toBe(ast);\n      });\n\n      it('should append pipe ast nodes', () => {\n        var ast = parseBinding(\"1 + 1\", \"Location\");\n        var transformedAst = addPipes(ast, ['one', 'two']);\n        expect(transformedAst.ast.name).toEqual(\"two\");\n        expect(transformedAst.ast.exp.name).toEqual(\"one\");\n        expect(transformedAst.ast.exp.exp.operation).toEqual(\"+\");\n      });\n\n      it('should preserve location and source', () => {\n        var ast = parseBinding(\"1 + 1\", \"Location\");\n        var transformedAst = addPipes(ast, ['one', 'two']);\n        expect(transformedAst.source).toEqual(\"1 + 1\");\n        expect(transformedAst.location).toEqual(\"Location\");\n      });\n    });\n\n    describe('wrapLiteralPrimitive', () => {\n      it('should wrap a literal primitive', () => {\n        expect(createParser().wrapLiteralPrimitive(\"foo\", null).eval(null, emptyLocals())).toEqual(\"foo\");\n      });\n    });\n  });\n}"]}