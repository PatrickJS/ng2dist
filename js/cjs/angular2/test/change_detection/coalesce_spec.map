{"version":3,"sources":["coalesce_spec.js"],"names":[],"mappings":"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","file":"angular2/test/change_detection/coalesce_spec.js","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\n\nimport {coalesce} from 'angular2/src/change_detection/coalesce';\nimport {RECORD_TYPE_SELF, ProtoRecord} from 'angular2/src/change_detection/proto_record';\n\nexport function main() {\n  function r(funcOrValue, args, contextIndex, selfIndex, lastInBinding = false) {\n    return new ProtoRecord(99,  \"name\", funcOrValue, args, null, contextIndex, selfIndex,\n      null, null, lastInBinding, false);\n  }\n\n  describe(\"change detection - coalesce\", () => {\n    it(\"should work with an empty list\", () => {\n      expect(coalesce([])).toEqual([]);\n    });\n\n    it(\"should remove non-terminal duplicate records\" +\n      \" and update the context indices referencing them\", () => {\n      var rs = coalesce([\n        r(\"user\",   [], 0, 1),\n        r(\"first\",  [], 1, 2),\n        r(\"user\",   [], 0, 3),\n        r(\"last\",   [], 3, 4)\n      ]);\n\n      expect(rs).toEqual([\n        r(\"user\",   [], 0, 1),\n        r(\"first\",  [], 1, 2),\n        r(\"last\",   [], 1, 3)\n      ]);\n    });\n\n    it(\"should update indices of other records\", () => {\n      var rs = coalesce([\n        r(\"dup\",   [],  0, 1),\n        r(\"dup\",   [],  0, 2),\n        r(\"user\",  [],  0, 3),\n        r(\"first\", [3], 3, 4)\n      ]);\n\n      expect(rs).toEqual([\n        r(\"dup\",   [],  0, 1),\n        r(\"user\",  [],  0, 2),\n        r(\"first\", [2], 2, 3)\n      ]);\n    });\n\n    it(\"should remove non-terminal duplicate records\" +\n      \" and update the args indices referencing them\", () => {\n      var rs = coalesce([\n        r(\"user1\",  [],  0, 1),\n        r(\"user2\",  [],  0, 2),\n        r(\"hi\",     [1], 0, 3),\n        r(\"hi\",     [1], 0, 4),\n        r(\"hi\",     [2], 0, 5)\n      ]);\n\n      expect(rs).toEqual([\n        r(\"user1\",  [],  0, 1),\n        r(\"user2\",  [],  0, 2),\n        r(\"hi\",     [1], 0, 3),\n        r(\"hi\",     [2], 0, 4)\n      ]);\n    });\n\n    it(\"should replace duplicate terminal records with\" +\n      \" self records\", () => {\n\n      var rs = coalesce([\n        r(\"user\",  [],  0, 1, true),\n        r(\"user\",  [],  0, 2, true)\n      ]);\n\n      expect(rs[1]).toEqual(new ProtoRecord(\n        RECORD_TYPE_SELF, \"self\", null,\n        [], null, 1, 2,\n        null, null,\n        true, false)\n      );\n    });\n  });\n}\n"]}