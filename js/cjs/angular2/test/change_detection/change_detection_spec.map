{"version":3,"sources":["change_detection_spec.js"],"names":[],"mappings":"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","file":"angular2/test/change_detection/change_detection_spec.js","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, IS_DARTIUM} from 'angular2/test_lib';\n\nimport {isPresent, isBlank, isJsObject, BaseException, FunctionWrapper} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {Parser} from 'angular2/src/change_detection/parser/parser';\nimport {Lexer} from 'angular2/src/change_detection/parser/lexer';\nimport {Locals} from 'angular2/src/change_detection/parser/locals';\n\nimport {ChangeDispatcher, DynamicChangeDetector, ChangeDetectionError, BindingRecord, DirectiveRecord,\n  PipeRegistry, Pipe, NO_CHANGE, CHECK_ALWAYS, CHECK_ONCE, CHECKED, DETACHED, ON_PUSH, DEFAULT} from 'angular2/change_detection';\n\nimport {JitProtoChangeDetector, DynamicProtoChangeDetector} from 'angular2/src/change_detection/proto_change_detector';\n\n\nexport function main() {\n  describe(\"change detection\", () => {\n    StringMapWrapper.forEach(\n      { \"dynamic\": (registry = null, strategy = null) => new DynamicProtoChangeDetector(registry, strategy),\n        \"JIT\": (registry = null, strategy = null) => new JitProtoChangeDetector(registry, strategy)\n      }, (createProtoChangeDetector, name) => {\n\n        if (name == \"JIT\" && IS_DARTIUM) return;\n\n        function ast(exp:string, location:string = 'location') {\n          var parser = new Parser(new Lexer());\n          return parser.parseBinding(exp, location);\n        }\n\n        function dirs(directives:List) {\n          return new FakeDirectives(directives);\n        }\n\n        function convertLocalsToVariableBindings(locals) {\n          var variableBindings = [];\n          var loc = locals;\n          while(isPresent(loc)) {\n            MapWrapper.forEach(loc.current, (v, k) => ListWrapper.push(variableBindings, k));\n            loc = loc.parent;\n          }\n          return variableBindings;\n        }\n\n        function createChangeDetector(propName:string, exp:string, context = null, locals = null, registry = null) {\n          var pcd = createProtoChangeDetector(registry);\n          var dispatcher = new TestDispatcher();\n\n          var variableBindings = convertLocalsToVariableBindings(locals);\n\n          var records = [BindingRecord.createForElement(ast(exp), 0, propName)];\n          var cd = pcd.instantiate(dispatcher, records, variableBindings, []);\n          cd.hydrate(context, locals, null);\n\n          return {\"changeDetector\" : cd, \"dispatcher\" : dispatcher};\n        }\n\n        function executeWatch(memo:string, exp:string, context = null, locals = null) {\n          var res = createChangeDetector(memo, exp, context, locals);\n          res[\"changeDetector\"].detectChanges();\n          return res[\"dispatcher\"].log;\n        }\n\n        function instantiate(protoChangeDetector, dispatcher, bindings, directiveRecords = null) {\n          if (isBlank(directiveRecords)) directiveRecords = [];\n          return protoChangeDetector.instantiate(dispatcher, bindings, null, directiveRecords);\n        }\n\n        describe(`${name} change detection`, () => {\n          var dispatcher;\n\n          beforeEach(() => {\n            dispatcher = new TestDispatcher();\n          });\n\n          it('should do simple watching', () => {\n            var person = new Person(\"misko\");\n\n            var c = createChangeDetector('name', 'name', person);\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual(['name=misko']);\n            dispatcher.clear();\n\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual([]);\n            dispatcher.clear();\n\n            person.name = \"Misko\";\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual(['name=Misko']);\n          });\n\n          it('should report all changes on the first run including uninitialized values', () => {\n            expect(executeWatch('value', 'value', new Uninitialized())).toEqual(['value=null']);\n          });\n\n          it('should report all changes on the first run including null values', () => {\n            var td = new TestData(null);\n            expect(executeWatch('a', 'a', td)).toEqual(['a=null']);\n          });\n\n          it(\"should support literals\", () => {\n            expect(executeWatch('const', '10')).toEqual(['const=10']);\n            expect(executeWatch('const', '\"str\"')).toEqual(['const=str']);\n            expect(executeWatch('const', '\"a\\n\\nb\"')).toEqual(['const=a\\n\\nb']);\n          });\n\n          it('simple chained property access', () => {\n            var address = new Address('Grenoble');\n            var person = new Person('Victor', address);\n\n            expect(executeWatch('address.city', 'address.city', person))\n              .toEqual(['address.city=Grenoble']);\n          });\n\n          it(\"should support method calls\", () => {\n            var person = new Person('Victor');\n            expect(executeWatch('m', 'sayHi(\"Jim\")', person)).toEqual(['m=Hi, Jim']);\n          });\n\n          it(\"should support function calls\", () => {\n            var td = new TestData(() => (a) => a);\n            expect(executeWatch('value', 'a()(99)', td)).toEqual(['value=99']);\n          });\n\n          it(\"should support chained method calls\", () => {\n            var person = new Person('Victor');\n            var td = new TestData(person);\n            expect(executeWatch('m', 'a.sayHi(\"Jim\")', td)).toEqual(['m=Hi, Jim']);\n          });\n\n          it(\"should support literal array\", () => {\n            var c = createChangeDetector('array', '[1,2]');\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues).toEqual([[1, 2]]);\n\n            c = createChangeDetector('array', '[1,a]', new TestData(2));\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues).toEqual([[1, 2]]);\n          });\n\n          it(\"should support literal maps\", () => {\n            var c = createChangeDetector('map', '{z:1}');\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues[0]['z']).toEqual(1);\n\n            c = createChangeDetector('map', '{z:a}', new TestData(1));\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues[0]['z']).toEqual(1);\n          });\n\n          it(\"should support binary operations\", () => {\n            expect(executeWatch('exp', '10 + 2')).toEqual(['exp=12']);\n            expect(executeWatch('exp', '10 - 2')).toEqual(['exp=8']);\n\n            expect(executeWatch('exp', '10 * 2')).toEqual(['exp=20']);\n            expect(executeWatch('exp', '10 / 2')).toEqual([`exp=${5.0}`]); //dart exp=5.0, js exp=5\n            expect(executeWatch('exp', '11 % 2')).toEqual(['exp=1']);\n\n            expect(executeWatch('exp', '1 == 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '1 != 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '1 < 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 < 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '2 > 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 < 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '1 <= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 <= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 <= 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '2 >= 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 >= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '1 >= 2')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', 'true && true')).toEqual(['exp=true']);\n            expect(executeWatch('exp', 'true && false')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', 'true || false')).toEqual(['exp=true']);\n            expect(executeWatch('exp', 'false || false')).toEqual(['exp=false']);\n          });\n\n          it(\"should support negate\", () => {\n            expect(executeWatch('exp', '!true')).toEqual(['exp=false']);\n            expect(executeWatch('exp', '!!true')).toEqual(['exp=true']);\n          });\n\n          it(\"should support conditionals\", () => {\n            expect(executeWatch('m', '1 < 2 ? 1 : 2')).toEqual(['m=1']);\n            expect(executeWatch('m', '1 > 2 ? 1 : 2')).toEqual(['m=2']);\n          });\n\n          describe(\"keyed access\", () => {\n            it(\"should support accessing a list item\", () => {\n              expect(executeWatch('array[0]', '[\"foo\", \"bar\"][0]')).toEqual(['array[0]=foo']);\n            });\n\n            it(\"should support accessing a map item\", () => {\n              expect(executeWatch('map[foo]', '{\"foo\": \"bar\"}[\"foo\"]')).toEqual(['map[foo]=bar']);\n            });\n          });\n\n          it(\"should support interpolation\", () => {\n            var parser = new Parser(new Lexer());\n            var pcd = createProtoChangeDetector();\n            var ast = parser.parseInterpolation(\"B{{a}}A\", \"location\");\n\n            var cd = instantiate(pcd, dispatcher, [BindingRecord.createForElement(ast, 0, \"memo\")]);\n            cd.hydrate(new TestData(\"value\"), null, null);\n\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([\"memo=BvalueA\"]);\n          });\n\n          describe(\"change notification\", () => {\n            describe(\"simple checks\", () => {\n              it(\"should pass a change record to the dispatcher\", () => {\n                var person = new Person('bob');\n                var c = createChangeDetector('name', 'name', person);\n                var cd = c[\"changeDetector\"];\n                var dispatcher = c[\"dispatcher\"];\n\n                cd.detectChanges();\n\n                expect(dispatcher.loggedValues).toEqual(['bob']);\n              });\n            });\n\n            describe(\"pipes\", () => {\n              it(\"should pass a change record to the dispatcher\", () => {\n                var registry = new FakePipeRegistry('pipe', () => new CountingPipe());\n\n                var person = new Person('bob');\n                var c = createChangeDetector('name', 'name | pipe', person, null, registry);\n                var cd = c[\"changeDetector\"];\n                var dispatcher = c[\"dispatcher\"];\n\n                cd.detectChanges();\n\n                expect(dispatcher.loggedValues).toEqual(['bob state:0']);\n              });\n            });\n\n            describe(\"updating directives\", () => {\n              var dirRecord1 = new DirectiveRecord(0, 0, true, true);\n              var dirRecord2 = new DirectiveRecord(0, 1, true, true);\n              var dirRecordNoCallbacks = new DirectiveRecord(0, 0, false, false);\n\n              function updateA(exp:string, dirRecord) {\n                return BindingRecord.createForDirective(ast(exp), \"a\", (o,v) => o.a = v, dirRecord);\n              }\n\n              function updateB(exp:string, dirRecord) {\n                return BindingRecord.createForDirective(ast(exp), \"b\", (o,v) => o.b = v, dirRecord);\n              }\n\n              var directive1;\n              var directive2;\n\n              beforeEach(() => {\n                directive1 = new TestDirective();\n                directive2 = new TestDirective();\n              });\n\n              it(\"should happen directly, without invoking the dispatcher\", () => {\n                var pcd = createProtoChangeDetector();\n\n                var cd = instantiate(pcd, dispatcher, [updateA(\"42\", dirRecord1)],\n                  [dirRecord1]);\n\n                cd.hydrate(null, null, dirs([directive1]));\n\n                cd.detectChanges();\n\n                expect(dispatcher.loggedValues).toEqual([]);\n                expect(directive1.a).toEqual(42);\n              });\n\n              describe(\"onChange\", () => {\n                it(\"should notify the directive when a group of records changes\", () => {\n                  var pcd = createProtoChangeDetector();\n\n                  var cd = instantiate(pcd, dispatcher, [\n                    updateA(\"1\", dirRecord1),\n                    updateB(\"2\", dirRecord1),\n                    updateA(\"3\", dirRecord2)\n                  ], [dirRecord1, dirRecord2]);\n\n                  cd.hydrate(null, null, dirs([directive1, directive2]));\n\n                  cd.detectChanges();\n\n                  expect(directive1.changes).toEqual({'a': 1, 'b': 2});\n                  expect(directive2.changes).toEqual({'a': 3});\n                });\n\n                it(\"should not call onChange when callOnChange is false\", () => {\n                  var pcd = createProtoChangeDetector();\n\n                  var cd = instantiate(pcd, dispatcher, [\n                    updateA(\"1\", dirRecordNoCallbacks)\n                  ], [dirRecordNoCallbacks]);\n\n                  cd.hydrate(null, null, dirs([directive1]));\n\n                  cd.detectChanges();\n\n                  expect(directive1.changes).toEqual(null);\n                });\n              });\n\n              describe(\"onAllChangesDone\", () => {\n                it(\"should be called after processing all the children\", () => {\n                  var pcd = createProtoChangeDetector();\n\n                  var cd = instantiate(pcd, dispatcher, [], [dirRecord1, dirRecord2]);\n                  cd.hydrate(null, null, dirs([directive1, directive2]));\n\n                  cd.detectChanges();\n\n                  expect(directive1.onChangesDoneCalled).toBe(true);\n                  expect(directive2.onChangesDoneCalled).toBe(true);\n                });\n\n\n                it(\"should not be called when onAllChangesDone is false\", () => {\n                  var pcd = createProtoChangeDetector();\n\n                  var cd = instantiate(pcd, dispatcher, [\n                    updateA(\"1\", dirRecordNoCallbacks)\n                  ], [dirRecordNoCallbacks]);\n\n                  cd.hydrate(null, null, dirs([directive1]));\n\n                  cd.detectChanges();\n\n                  expect(directive1.onChangesDoneCalled).toEqual(false);\n                });\n\n                it(\"should be called in reverse order so the child is always notified before the parent\", () => {\n                  var pcd = createProtoChangeDetector();\n                  var cd = instantiate(pcd, dispatcher, [], [dirRecord1, dirRecord2]);\n\n                  var onChangesDoneCalls = [];\n                  var td1;\n                  td1 = new TestDirective(() => ListWrapper.push(onChangesDoneCalls, td1));\n                  var td2;\n                  td2 = new TestDirective(() => ListWrapper.push(onChangesDoneCalls, td2));\n                  cd.hydrate(null, null, dirs([td1, td2]));\n\n                  cd.detectChanges();\n\n                  expect(onChangesDoneCalls).toEqual([td2, td1]);\n                });\n\n                it(\"should be called before processing shadow dom children\", () => {\n                  var pcd = createProtoChangeDetector();\n                  var shadowDomChildPCD = createProtoChangeDetector();\n\n                  var parent = pcd.instantiate(dispatcher, [], null, [dirRecord1]);\n\n                  var child = shadowDomChildPCD.instantiate(dispatcher,\n                    [updateA(\"1\", dirRecord1)], null, [dirRecord1]);\n                  parent.addShadowDomChild(child);\n\n                  var directiveInShadowDom = new TestDirective();\n                  var parentDirective = new TestDirective(() => {\n                    expect(directiveInShadowDom.a).toBe(null);\n                  });\n\n                  parent.hydrate(null, null, dirs([parentDirective]));\n                  child.hydrate(null, null, dirs([directiveInShadowDom]));\n\n                  parent.detectChanges();\n                });\n              });\n            });\n          });\n\n          describe(\"enforce no new changes\", () => {\n            it(\"should throw when a record gets changed after it has been checked\", () => {\n              var pcd = createProtoChangeDetector();\n\n              var dispatcher = new TestDispatcher();\n              var cd = instantiate(pcd, dispatcher, [\n                BindingRecord.createForElement(ast(\"a\"), 0, \"a\")\n              ]);\n              cd.hydrate(new TestData('value'), null, null);\n\n              expect(() => {\n                cd.checkNoChanges();\n              }).toThrowError(new RegExp(\"Expression 'a in location' has changed after it was checked\"));\n            });\n          });\n\n          //TODO vsavkin: implement it\n          describe(\"error handling\", () => {\n            xit(\"should wrap exceptions into ChangeDetectionError\", () => {\n              var pcd = createProtoChangeDetector();\n              var cd = pcd.instantiate(new TestDispatcher(), [\n                BindingRecord.createForElement(ast(\"invalidProp\"), 0, \"a\")\n              ], null, []);\n              cd.hydrate(null, null);\n\n              try {\n                cd.detectChanges();\n\n                throw new BaseException(\"fail\");\n              } catch (e) {\n                expect(e).toBeAnInstanceOf(ChangeDetectionError);\n                expect(e.location).toEqual(\"invalidProp in someComponent\");\n              }\n            });\n          });\n\n          describe(\"Locals\", () => {\n            it('should read a value from locals', () => {\n              var locals = new Locals(null,\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n\n              expect(executeWatch('key', 'key', null, locals))\n                .toEqual(['key=value']);\n            });\n\n            it('should invoke a function from local', () => {\n              var locals = new Locals(null,\n                MapWrapper.createFromPairs([[\"key\", () => \"value\"]]));\n\n              expect(executeWatch('key', 'key()', null, locals))\n                .toEqual(['key=value']);\n            });\n\n            it('should handle nested locals', () => {\n              var nested = new Locals(null,\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n              var locals = new Locals(nested, MapWrapper.create());\n\n              expect(executeWatch('key', 'key', null, locals))\n                .toEqual(['key=value']);\n            });\n\n            it(\"should fall back to a regular field read when the locals map\" +\n              \"does not have the requested field\", () => {\n              var locals = new Locals(null,\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n\n              expect(executeWatch('name', 'name', new Person(\"Jim\"), locals))\n                .toEqual(['name=Jim']);\n            });\n          });\n\n          describe(\"handle children\", () => {\n            var parent, child;\n\n            beforeEach(() => {\n              var protoParent = createProtoChangeDetector();\n              parent = instantiate(protoParent, null, []);\n\n              var protoChild = createProtoChangeDetector();\n              child = instantiate(protoChild, null, []);\n            });\n\n            it(\"should add light dom children\", () => {\n              parent.addChild(child);\n\n              expect(parent.lightDomChildren.length).toEqual(1);\n              expect(parent.lightDomChildren[0]).toBe(child);\n            });\n\n            it(\"should add shadow dom children\", () => {\n              parent.addShadowDomChild(child);\n\n              expect(parent.shadowDomChildren.length).toEqual(1);\n              expect(parent.shadowDomChildren[0]).toBe(child);\n            });\n\n            it(\"should remove light dom children\", () => {\n              parent.addChild(child);\n              parent.removeChild(child);\n\n              expect(parent.lightDomChildren).toEqual([]);\n            });\n          });\n        });\n\n        describe(\"mode\", () => {\n          it(\"should set the mode to CHECK_ALWAYS when the default change detection is used\", () => {\n            var proto = createProtoChangeDetector(null, DEFAULT);\n            var cd = proto.instantiate(null, [], [], []);\n\n            expect(cd.mode).toEqual(null);\n\n            cd.hydrate(null, null, null);\n\n            expect(cd.mode).toEqual(CHECK_ALWAYS);\n          });\n\n          it(\"should set the mode to CHECK_ONCE when the push change detection is used\", () => {\n            var proto = createProtoChangeDetector(null, ON_PUSH);\n            var cd = proto.instantiate(null, [], [], []);\n            cd.hydrate(null, null, null);\n\n            expect(cd.mode).toEqual(CHECK_ONCE);\n          });\n\n          it(\"should not check a detached change detector\", () => {\n            var c = createChangeDetector('name', 'a', new TestData(\"value\"));\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.mode = DETACHED;\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([]);\n          });\n\n          it(\"should not check a checked change detector\", () => {\n            var c = createChangeDetector('name', 'a', new TestData(\"value\"));\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.mode = CHECKED;\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([]);\n          });\n\n          it(\"should change CHECK_ONCE to CHECKED\", () => {\n            var cd = instantiate(createProtoChangeDetector(), null, []);\n            cd.mode = CHECK_ONCE;\n\n            cd.detectChanges();\n\n            expect(cd.mode).toEqual(CHECKED);\n          });\n\n          it(\"should not change the CHECK_ALWAYS\", () => {\n            var cd = instantiate(createProtoChangeDetector(), null, []);\n            cd.mode = CHECK_ALWAYS;\n\n            cd.detectChanges();\n\n            expect(cd.mode).toEqual(CHECK_ALWAYS);\n          });\n        });\n\n        describe(\"markPathToRootAsCheckOnce\", () => {\n          function changeDetector(mode, parent) {\n            var cd = instantiate(createProtoChangeDetector(), null, []);\n            cd.mode = mode;\n            if (isPresent(parent)) parent.addChild(cd);\n            return cd;\n          }\n\n          it(\"should mark all checked detectors as CHECK_ONCE \" +\n            \"until reaching a detached one\", () => {\n\n            var root = changeDetector(CHECK_ALWAYS, null);\n            var disabled = changeDetector(DETACHED, root);\n            var parent = changeDetector(CHECKED, disabled);\n            var checkAlwaysChild = changeDetector(CHECK_ALWAYS, parent);\n            var checkOnceChild = changeDetector(CHECK_ONCE, checkAlwaysChild);\n            var checkedChild = changeDetector(CHECKED, checkOnceChild);\n\n            checkedChild.markPathToRootAsCheckOnce();\n\n            expect(root.mode).toEqual(CHECK_ALWAYS);\n            expect(disabled.mode).toEqual(DETACHED);\n            expect(parent.mode).toEqual(CHECK_ONCE);\n            expect(checkAlwaysChild.mode).toEqual(CHECK_ALWAYS);\n            expect(checkOnceChild.mode).toEqual(CHECK_ONCE);\n            expect(checkedChild.mode).toEqual(CHECK_ONCE);\n          });\n        });\n\n        describe(\"hydration\", () => {\n          it(\"should be able to rehydrate a change detector\", () => {\n            var c  = createChangeDetector(\"memo\", \"name\");\n            var cd = c[\"changeDetector\"];\n\n            cd.hydrate(\"some context\", null, null);\n            expect(cd.hydrated()).toBe(true);\n\n            cd.dehydrate();\n            expect(cd.hydrated()).toBe(false);\n\n            cd.hydrate(\"other context\", null, null);\n            expect(cd.hydrated()).toBe(true);\n          });\n\n          it(\"should destroy all active pipes during dehyration\", () => {\n            var pipe = new OncePipe();\n            var registry = new FakePipeRegistry('pipe', () => pipe);\n            var c  = createChangeDetector(\"memo\", \"name | pipe\", new Person('bob'), null, registry);\n            var cd = c[\"changeDetector\"];\n\n            cd.detectChanges();\n\n            cd.dehydrate();\n\n            expect(pipe.destroyCalled).toBe(true);\n          });\n        });\n\n        describe(\"pipes\", () => {\n          it(\"should support pipes\", () => {\n            var registry = new FakePipeRegistry('pipe', () => new CountingPipe());\n            var ctx = new Person(\"Megatron\");\n\n            var c  = createChangeDetector(\"memo\", \"name | pipe\", ctx, null, registry);\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual(['memo=Megatron state:0']);\n\n            dispatcher.clear();\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual(['memo=Megatron state:1']);\n          });\n\n          it(\"should lookup pipes in the registry when the context is not supported\", () => {\n            var registry = new FakePipeRegistry('pipe', () => new OncePipe());\n            var ctx = new Person(\"Megatron\");\n\n            var c  = createChangeDetector(\"memo\", \"name | pipe\", ctx, null, registry);\n            var cd = c[\"changeDetector\"];\n\n            cd.detectChanges();\n\n            expect(registry.numberOfLookups).toEqual(1);\n\n            ctx.name = \"Optimus Prime\";\n            cd.detectChanges();\n\n            expect(registry.numberOfLookups).toEqual(2);\n          });\n\n          it(\"should invoke onDestroy on a pipe before switching to another one\", () => {\n            var pipe = new OncePipe();\n            var registry = new FakePipeRegistry('pipe', () => pipe);\n            var ctx = new Person(\"Megatron\");\n\n            var c  = createChangeDetector(\"memo\", \"name | pipe\", ctx, null, registry);\n            var cd = c[\"changeDetector\"];\n\n            cd.detectChanges();\n            ctx.name = \"Optimus Prime\";\n            cd.detectChanges();\n\n            expect(pipe.destroyCalled).toEqual(true);\n          });\n\n          it(\"should inject the binding propagation configuration \" +\n            \"of the encompassing component into a pipe\", () => {\n\n            var registry = new FakePipeRegistry('pipe', () => new IdentityPipe());\n            var c = createChangeDetector(\"memo\", \"name | pipe\", new Person('bob'), null, registry);\n            var cd = c[\"changeDetector\"];\n\n            cd.detectChanges();\n\n            expect(registry.bpc).toBe(cd.bindingPropagationConfig);\n          });\n        });\n\n        it(\"should do nothing when returns NO_CHANGE\", () => {\n          var registry = new FakePipeRegistry('pipe', () => new IdentityPipe())\n          var ctx = new Person(\"Megatron\");\n\n          var c  = createChangeDetector(\"memo\", \"name | pipe\", ctx, null, registry);\n          var cd = c[\"changeDetector\"];\n          var dispatcher = c[\"dispatcher\"];\n\n          cd.detectChanges();\n          cd.detectChanges();\n\n          expect(dispatcher.log).toEqual(['memo=Megatron']);\n\n          ctx.name = \"Optimus Prime\";\n          dispatcher.clear();\n          cd.detectChanges();\n\n          expect(dispatcher.log).toEqual(['memo=Optimus Prime']);\n        });\n      });\n  });\n}\n\nclass CountingPipe extends Pipe {\n  state:number;\n\n  constructor() {\n    super();\n    this.state = 0;\n  }\n\n  supports(newValue) {\n    return true;\n  }\n\n  transform(value) {\n    return `${value} state:${this.state ++}`;\n  }\n}\n\nclass OncePipe extends Pipe {\n  called:boolean;\n  destroyCalled:boolean;\n\n  constructor() {\n    super();\n    this.called = false;\n    this.destroyCalled = false;\n  }\n\n  supports(newValue) {\n    return !this.called;\n  }\n\n  onDestroy() {\n    this.destroyCalled = true;\n  }\n\n  transform(value) {\n    this.called = true;\n    return value;\n  }\n}\n\nclass IdentityPipe extends Pipe {\n  state:any;\n\n  supports(newValue) {\n    return true;\n  }\n\n  transform(value) {\n    if (this.state === value) {\n      return NO_CHANGE;\n    } else {\n      this.state = value;\n      return value;\n    }\n  }\n}\n\nclass FakePipeRegistry extends PipeRegistry {\n  numberOfLookups:number;\n  pipeType:string;\n  factory:Function;\n  bpc:any;\n\n  constructor(pipeType, factory) {\n    super({});\n    this.pipeType = pipeType;\n    this.factory = factory;\n    this.numberOfLookups = 0;\n  }\n\n  get(type:string, obj, bpc) {\n    if (type != this.pipeType) return null;\n    this.numberOfLookups ++;\n    this.bpc = bpc;\n    return this.factory();\n  }\n}\n\nclass TestDirective {\n  a;\n  b;\n  changes;\n  onChangesDoneCalled;\n  onChangesDoneSpy;\n\n  constructor(onChangesDoneSpy = null) {\n    this.onChangesDoneCalled = false;\n    this.onChangesDoneSpy = onChangesDoneSpy;\n    this.a = null;\n    this.b = null;\n    this.changes = null;\n  }\n\n  onChange(changes) {\n    var r = {};\n    StringMapWrapper.forEach(changes, (c, key) => r[key] = c.currentValue);\n    this.changes = r;\n  }\n\n  onAllChangesDone() {\n    this.onChangesDoneCalled = true;\n    if(isPresent(this.onChangesDoneSpy)) {\n      this.onChangesDoneSpy();\n    }\n  }\n}\n\nclass Person {\n  name:string;\n  age:number;\n  address:Address;\n  constructor(name:string, address:Address = null) {\n    this.name = name;\n    this.address = address;\n  }\n\n  sayHi(m) {\n    return `Hi, ${m}`;\n  }\n\n  toString():string {\n    var address = this.address == null ? '' : ' address=' + this.address.toString();\n\n    return 'name=' + this.name + address;\n  }\n}\n\nclass Address {\n  city:string;\n  constructor(city:string) {\n    this.city = city;\n  }\n\n  toString():string {\n    return this.city;\n  }\n}\n\nclass Uninitialized {\n  value:any;\n}\n\nclass TestData {\n  a;\n\n  constructor(a) {\n    this.a = a;\n  }\n}\n\nclass FakeDirectives {\n  directives:List;\n\n  constructor(directives:List) {\n    this.directives = directives;\n  }\n\n  directive(directiveRecord:DirectiveRecord) {\n    return this.directives[directiveRecord.directiveIndex];\n  }\n}\n\nclass TestDispatcher extends ChangeDispatcher {\n  log:List;\n  loggedValues:List;\n\n  constructor() {\n    super();\n    this.clear();\n  }\n\n  clear() {\n    this.log = ListWrapper.create();\n    this.loggedValues = ListWrapper.create();\n  }\n\n  notifyOnBinding(binding, value) {\n    ListWrapper.push(this.log, `${binding.propertyName}=${this._asString(value)}`);\n    ListWrapper.push(this.loggedValues, value);\n  }\n\n  _asString(value) {\n    return (isBlank(value) ? 'null' : value.toString());\n  }\n}"]}