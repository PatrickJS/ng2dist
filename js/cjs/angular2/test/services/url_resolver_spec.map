{"version":3,"sources":["url_resolver_spec.js"],"names":[],"mappings":"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","file":"angular2/test/services/url_resolver_spec.js","sourcesContent":["import {describe, it, expect, beforeEach, ddescribe, iit, xit, el} from 'angular2/test_lib';\nimport {UrlResolver} from 'angular2/src/services/url_resolver';\n\nexport function main() {\n  describe('UrlResolver', () => {\n    var resolver = new UrlResolver();\n\n    it('should add a relative path to the base url', () => {\n      expect(resolver.resolve('http://www.foo.com', 'bar')).toEqual('http://www.foo.com/bar');\n      expect(resolver.resolve('http://www.foo.com/', 'bar')).toEqual('http://www.foo.com/bar');\n      expect(resolver.resolve('http://www.foo.com', './bar')).toEqual('http://www.foo.com/bar');\n      expect(resolver.resolve('http://www.foo.com/', './bar')).toEqual('http://www.foo.com/bar');\n    });\n\n    it('should replace the base path', () => {\n      expect(resolver.resolve('http://www.foo.com/baz', 'bar')).toEqual('http://www.foo.com/bar');\n      expect(resolver.resolve('http://www.foo.com/baz', './bar')).toEqual('http://www.foo.com/bar');\n    });\n\n    it('should append to the base path', () => {\n      expect(resolver.resolve('http://www.foo.com/baz/', 'bar')).toEqual('http://www.foo.com/baz/bar');\n      expect(resolver.resolve('http://www.foo.com/baz/', './bar')).toEqual('http://www.foo.com/baz/bar');\n    });\n\n    it('should support \"..\" in the path', () => {\n      expect(resolver.resolve('http://www.foo.com/baz/', '../bar')).toEqual('http://www.foo.com/bar');\n      expect(resolver.resolve('http://www.foo.com/1/2/3/', '../../bar')).toEqual('http://www.foo.com/1/bar');\n      expect(resolver.resolve('http://www.foo.com/1/2/3/', '../biz/bar')).toEqual('http://www.foo.com/1/2/biz/bar');\n      expect(resolver.resolve('http://www.foo.com/1/2/baz', '../../bar')).toEqual('http://www.foo.com/bar');\n    });\n\n    it('should ignore the base path when the url has a scheme', () => {\n      expect(resolver.resolve('http://www.foo.com', 'http://www.bar.com')).toEqual('http://www.bar.com');\n    })\n\n    it('should throw when the url start with \"/\"', () => {\n      expect(() => {\n        resolver.resolve('http://www.foo.com/1/2', '/test');\n      }).toThrowError();\n    });\n  });\n}\n"]}