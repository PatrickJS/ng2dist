{"version":3,"sources":["test_lib_spec.js"],"names":[],"mappings":"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","file":"angular2/test/test_lib/test_lib_spec.js","sourcesContent":["import {describe, it, iit, ddescribe, expect, tick, async, SpyObject, beforeEach, proxy} from 'angular2/test_lib';\nimport {MapWrapper} from 'angular2/src/facade/collection';\nimport {IMPLEMENTS} from 'angular2/src/facade/lang';\n\nclass TestObj {\n  prop;\n  constructor(prop) {\n    this.prop = prop;\n  }\n}\n\n@proxy\n@IMPLEMENTS(TestObj)\nclass SpyTestObj extends SpyObject {noSuchMethod(m){return super.noSuchMethod(m)}}\n\nexport function main() {\n  describe('test_lib', () => {\n    describe('equality', () => {\n      it('should structurally compare objects', () => {\n        var expected = new TestObj(new TestObj({'one' : [1,2]}));\n        var actual = new TestObj(new TestObj({'one' : [1,2]}));\n        var falseActual = new TestObj(new TestObj({'one' : [1,3]}));\n\n        expect(actual).toEqual(expected);\n        expect(falseActual).not.toEqual(expected);\n      });\n    });\n\n    describe('toEqual for Maps', () => {\n      it('should detect equality for same reference', () => {\n        var m1 = MapWrapper.createFromStringMap({'a': 1});\n        expect(m1).toEqual(m1);\n      });\n\n      it('should detect equality for same content', () => {\n        expect(MapWrapper.createFromStringMap({'a': 1})).toEqual(MapWrapper.createFromStringMap({'a': 1}));\n      });\n\n      it('should detect missing entries', () => {\n        expect(MapWrapper.createFromStringMap({'a': 1})).not.toEqual(MapWrapper.createFromStringMap({}));\n      });\n\n      it('should detect different values', () => {\n        expect(MapWrapper.createFromStringMap({'a': 1})).not.toEqual(MapWrapper.createFromStringMap({'a': 2}));\n      });\n\n      it('should detect additional entries', () => {\n        expect(MapWrapper.createFromStringMap({'a': 1})).not.toEqual(MapWrapper.createFromStringMap({'a': 1, 'b': 1}));\n      });\n    });\n\n    describe(\"spy objects\", () => {\n      var spyObj;\n\n      beforeEach(() => {\n        spyObj = new SpyTestObj();\n      });\n\n      it(\"should pass the runtime check\", () => {\n        var t:TestObj = spyObj;\n        expect(t).toBeDefined();\n      });\n\n      it(\"should return a new spy func with no calls\", () => {\n        expect(spyObj.spy(\"someFunc\")).not.toHaveBeenCalled();\n      });\n\n      it(\"should record function calls\", () => {\n        spyObj.spy(\"someFunc\").andCallFake((a,b) => a + b);\n\n        expect(spyObj.someFunc(1,2)).toEqual(3);\n        expect(spyObj.spy(\"someFunc\")).toHaveBeenCalledWith(1,2);\n      });\n    });\n  });\n}\n"]}