{"version":3,"sources":["validators_spec.js"],"names":[],"mappings":"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","file":"angular2/test/forms/validators_spec.js","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, el} from 'angular2/test_lib';\nimport {ControlGroup, Control, Validators} from 'angular2/forms';\n\nexport function main() {\n  function validator(key:string, error:any){\n    return function(c:Control) {\n      var r = {};\n      r[key] = error;\n      return r;\n    }\n  }\n\n  describe(\"Validators\", () => {\n    describe(\"required\", () => {\n      it(\"should error on an empty string\", () => {\n        expect(Validators.required(new Control(\"\"))).toEqual({\"required\" : true});\n      });\n\n      it(\"should error on null\", () => {\n        expect(Validators.required(new Control(null))).toEqual({\"required\" : true});\n      });\n\n      it(\"should not error on a non-empty string\", () => {\n        expect(Validators.required(new Control(\"not empty\"))).toEqual(null);\n      });\n    });\n\n    describe(\"compose\", () => {\n      it(\"should collect errors from all the validators\", () => {\n        var c = Validators.compose([validator(\"a\", true), validator(\"b\", true)]);\n        expect(c(new Control(\"\"))).toEqual({\"a\" : true, \"b\" : true});\n      });\n\n      it(\"should run validators left to right\", () => {\n        var c = Validators.compose([validator(\"a\", 1), validator(\"a\", 2)]);\n        expect(c(new Control(\"\"))).toEqual({\"a\" : 2});\n      });\n\n      it(\"should return null when no errors\", () => {\n        var c = Validators.compose([Validators.nullValidator, Validators.nullValidator]);\n        expect(c(new Control(\"\"))).toEqual(null);\n      });\n    });\n\n    describe(\"controlGroupValidator\", () => {\n      it(\"should collect errors from the child controls\", () => {\n        var one = new Control(\"one\", validator(\"a\", true));\n        var two = new Control(\"one\", validator(\"b\", true));\n        var g = new ControlGroup({\"one\" : one, \"two\" : two});\n\n        expect(Validators.group(g)).toEqual({\n          \"a\" : [one],\n          \"b\" : [two]\n        });\n      });\n\n      it(\"should not include controls that have no errors\", () => {\n        var one = new Control(\"one\", validator(\"a\", true));\n        var two = new Control(\"two\");\n        var g = new ControlGroup({\"one\" : one, \"two\" : two});\n\n        expect(Validators.group(g)).toEqual({\n          \"a\": [one]\n        });\n      });\n\n      it(\"should return null when no errors\", () => {\n        var g = new ControlGroup({\n          \"one\" : new Control(\"one\")\n        });\n\n        expect(Validators.group(g)).toEqual(null);\n      });\n    });\n  });\n}"]}