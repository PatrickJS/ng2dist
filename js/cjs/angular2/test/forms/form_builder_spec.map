{"version":3,"sources":["form_builder_spec.js"],"names":[],"mappings":"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","file":"angular2/test/forms/form_builder_spec.js","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, el} from 'angular2/test_lib';\nimport {Control, FormBuilder, Validators} from 'angular2/forms';\n\nexport function main() {\n  describe(\"Form Builder\", () => {\n    var b;\n\n    beforeEach(() => {\n      b = new FormBuilder();\n    });\n\n    it(\"should create controls from a value\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n    });\n\n    it(\"should create controls from an array\", () => {\n      var g = b.group({\n        \"login\": [\"some value\"],\n        \"password\": [\"some value\", Validators.required]\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n      expect(g.controls[\"password\"].value).toEqual(\"some value\");\n      expect(g.controls[\"password\"].validator).toEqual(Validators.required);\n    });\n\n    it(\"should use controls\", () => {\n      var g = b.group({\n        \"login\": b.control(\"some value\", Validators.required)\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n      expect(g.controls[\"login\"].validator).toBe(Validators.required);\n    });\n\n    it(\"should create groups with optional controls\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      }, {\"optionals\": {\"login\" : false}});\n\n      expect(g.contains(\"login\")).toEqual(false);\n    });\n\n    it(\"should create groups with a custom validator\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      }, {\"validator\": Validators.nullValidator});\n\n      expect(g.validator).toBe(Validators.nullValidator);\n    });\n\n    it(\"should use default validators when no validators are provided\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      });\n      expect(g.controls[\"login\"].validator).toBe(Validators.nullValidator);\n      expect(g.validator).toBe(Validators.group);\n    });\n\n    it(\"should create control arrays\", () => {\n      var c = b.control(\"three\");\n      var a = b.array([\n        \"one\",\n        [\"two\", Validators.required],\n        c,\n        b.array(['four'])\n      ]);\n\n      expect(a.value).toEqual(['one', 'two', 'three', ['four']]);\n    });\n  });\n}\n\n"]}