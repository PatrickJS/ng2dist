{"version":3,"sources":["directive_metadata_reader_spec.js"],"names":[],"mappings":"AAAA;AAAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;MAArC,EAAC,GAAE,YAAqB;AAAE,iBAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;;;;;;;;EAAlD,UAAQ,EAAhB,EAAC,wCAAoB,CAAA,OAAM,AAAC,4BAAkB,CACtC,CAAA,yCAAqB,kDAA2B,CAAA,yCAAqB,GAAK,EAAC,OAAM,wCAAmB,CAAC,AAD/D,CACgE;EAAtG,YAAU,EADlB,EAAC,8CAAoB,CAAA,OAAM,AAAC,kCAAkB,CACtC,CAAA,+CAAqB,wDAA2B,CAAA,+CAAqB,GAAK,EAAC,OAAM,8CAAmB,CAAC,AAD/D,CACgE;SAD9G,EAAC,8BAAoB,CAAA,OAAM,AAAC,qBAAkB,CACtC,CAAA,+BAAqB,wCAA2B,CAAA,+BAAqB,GAAK,EAAC,OAAM,8BAAmB,CAAC,AAD/D,CACgE;AACtG,YAAQ;AAAG,WAAO;AAAG,KAAC;AAAG,MAAE;AAAG,SAAK;AAAG,aAAS;EAC/C,wBAAsB,EAH9B,EAAC,6EAAoB,CAAA,OAAM,AAAC,wDAAkB,CACtC,CAAA,8EAAqB,uFAA2B,CAAA,8EAAqB,GAAK,EAAC,OAAM,6EAAmB,CAAC,AAD/D,CACgE;SAD9G,EAAC,4DAAoB,CAAA,OAAM,AAAC,6CAAkB,CACtC,CAAA,6DAAqB,sEAA2B,CAAA,6DAAqB,GAAK,EAAC,OAAM,4DAAmB,CAAC,AAD/D,CACgE;AAGtG,YAAQ;AAAG,YAAQ;AAAG,WAAO;EAC7B,kBAAgB,EALxB,EAAC,mEAAoB,CAAA,OAAM,AAAC,iDAAkB,CACtC,CAAA,oEAAqB,6EAA2B,CAAA,oEAAqB,GAAK,EAAC,OAAM,mEAAmB,CAAC,AAD/D,CACgE;SAD9G,EAAC,qBAAoB,CAAA,OAAM,AAAC,eAAkB,CACtC,CAAA,sBAAqB,+BAA2B,CAAA,sBAAqB,GAAK,EAAC,OAAM,qBAAmB,CAAC,AAD/D,CACgE;AAKtG,aAAS;AAAG,WAAO;AAN3B,AAAI,EAAA,iBASJ,SAAM,eAAa;;AAAG,AATkB,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC,wBAAwD;AAArF,KAAK,eAAe,AAAC,+BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAOzB,WAAS,AAAC,EAAC,EAPqC;EAAC,CAAC,CAAC,CAAC;AADrD,AAAI,EAAA,gBAYJ,SAAM,cAAY;;AAAG,AAZmB,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC,uBAAwD;AAArF,KAAK,eAAe,AAAC,8BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAUzB,UAAQ,AAAC,CAAC,CAAC,QAAO,CAAG,gBAAc,CAAC,CAAC,EAVW;EAAC,CAAC,CAAC,CAAC;AADrD,AAAI,EAAA,gBAeJ,SAAM,cAAY;;AAAG,AAfmB,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC,uBAAwD;AAArF,KAAK,eAAe,AAAC,8BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAazB,UAAQ,AAAC,CAAC;AAAC,aAAO,CAAG,gBAAc;AAAG,gBAAU,CAAG,EAAC,cAAa,CAAC;AAAA,IAAC,CAAC,EAbpB;EAAC,CAAC,CAAC,CAAC;AADrD,AAAI,EAAA,eAkBJ,SAAM,aAAW;;AAAG,AAlBoB,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC,sBAAwD;AAArF,KAAK,eAAe,AAAC,6BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAgBzB,SAAO,AAAC,CAAC,CAAC,QAAO,CAAG,eAAa,CAAC,CAAC,EAhBa;EAAC,CAAC,CAAC,CAAC;AADrD,AAAI,EAAA,iCAoBJ,SAAM,+BAA6B;;AACnC,AArBwC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC,wCAAwD;AAuB9E,OAAS,KAAG,CAAE,AAAD;AAClB,SAAO,AAAC,CAAC,yBAAwB,GAAG,SAAC,AAAD;AAClC,AAAI,MAAA,CAAA,MAAK,CAAC;AAEV,aAAS,AAAC,EAAC,SAAC,AAAD,CAAM;AACf,WAAK,EAAI,IAAI,wBAAsB,AAAC,EAAC,CAAC;IACxC,EAAC,CAAC;AAEF,KAAC,AAAC,CAAC,0CAAyC,GAAG,SAAC,AAAD,CAAM;AACnD,AAAI,QAAA,CAAA,iBAAgB,EAAI,CAAA,MAAK,KAAK,AAAC,CAAC,aAAY,CAAC,CAAC;AAClD,WAAK,AAAC,CAAC,iBAAgB,CAAC,QAAQ,AAAC,CAC/B,GAAI,kBAAgB,AAAC,CAAC,aAAY,CAAG,IAAI,UAAQ,AAAC,CAAC,CAAC,QAAO,CAAG,gBAAc,CAAC,CAAC,CAAG,KAAG,CAAC,CAAC,CAAC;IAC3F,EAAC,CAAC;AAEF,KAAC,AAAC,CAAC,yCAAwC,GAAG,SAAC,AAAD,CAAM;AAClD,AAAI,QAAA,CAAA,iBAAgB,EAAI,CAAA,MAAK,KAAK,AAAC,CAAC,YAAW,CAAC,CAAC;AACjD,WAAK,AAAC,CAAC,iBAAgB,CAAC,QAAQ,AAAC,CAC/B,GAAI,kBAAgB,AAAC,CAAC,YAAW,CAAG,IAAI,SAAO,AAAC,CAAC,CAAC,QAAO,CAAG,eAAa,CAAC,CAAC,CAAG,KAAG,CAAC,CAAC,CAAC;IACxF,EAAC,CAAC;AAEF,KAAC,AAAC,CAAC,0CAAyC,GAAG,SAAC,AAAD,CAAM;AACnD,AAAI,QAAA,CAAA,CAAA,EAAI,CAAA,MAAK,KAAK,AAAC,CAAC,aAAY,CAAC,CAAC;AAGlC,WAAK,AAAC,CAAC,CAAA,KAAK,CAAC,QAAQ,AAAC,CAAC,aAAY,CAAC,CAAC;AACrC,WAAK,AAAC,CAAC,CAAA,WAAW,CAAC,QACR,AAAC,CAAC,GAAI,UAAQ,AAAC,CAAC;AAAC,eAAO,CAAG,gBAAc;AAAG,kBAAU,CAAG,EAAC,cAAa,CAAC;AAAA,MAAC,CAAC,CAAC,CAAC;AACvF,AAAI,QAAA,CAAA,YAAW,EAAI,CAAA,WAAU,OAAO,AAAC,CAAC,CAAA,oBAAoB,CAAG,UAAS,IAAG,CAAG,CAAA,IAAG,CAAG;AAChF,WAAI,SAAQ,AAAC,CAAC,IAAG,CAAC,CAAG;AACnB,oBAAU,KAAK,AAAC,CAAC,IAAG,CAAG,KAAG,CAAC,CAAC;QAC9B;AAAA,AACA,aAAO,KAAG,CAAC;MACb,CAAG,GAAC,CAAC,CAAC;AACN,WAAK,AAAC,CAAC,YAAW,OAAO,CAAC,KAAK,AAAC,CAAC,CAAA,CAAC,CAAC;AACnC,WAAK,AAAC,CAAC,YAAW,CAAE,CAAA,CAAC,IAAI,MAAM,CAAC,KAAK,AAAC,CAAC,cAAa,CAAC,CAAC;IACxD,EAAC,CAAC;AAEF,KAAC,AAAC,CAAC,kDAAiD,GAAG,SAAC,AAAD;AACrD,WAAK,AAAC,EAAC,SAAC,AAAD,CAAM;AACX,aAAK,KAAK,AAAC,CAAC,8BAA6B,CAAC,CAAC;MAC7C,EAAC,aAAa,AAAC,CAAC,iEAAgE,CAAC,CAAC;IACpF,EAAC,CAAC;EACJ,EAAC,CAAC;AACJ;AACA","file":"angular2/test/core/compiler/directive_metadata_reader_spec.js","sourcesContent":["import {isPresent} from 'angular2/src/facade/lang';\nimport {ListWrapper} from 'angular2/src/facade/collection';\nimport {ddescribe, describe, it, iit, expect, beforeEach} from 'angular2/test_lib';\nimport {DirectiveMetadataReader} from 'angular2/src/core/compiler/directive_metadata_reader';\nimport {Decorator, Component, Viewport} from 'angular2/src/core/annotations/annotations';\nimport {DirectiveMetadata} from 'angular2/src/core/compiler/directive_metadata';\nimport {Injectable, Injector} from 'angular2/di';\n\n@Injectable()\nclass SomeInjectable {}\n\n@Decorator({selector: 'someDecorator'})\nclass SomeDecorator {}\n\n@Component({selector: 'someComponent', injectables: [SomeInjectable]})\nclass SomeComponent {}\n\n@Viewport({selector: 'someViewport'})\nclass SomeViewport {}\n\nclass SomeDirectiveWithoutAnnotation {\n}\n\nexport function main() {\n  describe(\"DirectiveMetadataReader\", () => {\n    var reader;\n\n    beforeEach(() => {\n      reader = new DirectiveMetadataReader();\n    });\n\n    it('should read out the Decorator annotation', () => {\n      var directiveMetadata = reader.read(SomeDecorator);\n      expect(directiveMetadata).toEqual(\n        new DirectiveMetadata(SomeDecorator, new Decorator({selector: 'someDecorator'}), null));\n    });\n\n    it('should read out the Viewport annotation', () => {\n      var directiveMetadata = reader.read(SomeViewport);\n      expect(directiveMetadata).toEqual(\n        new DirectiveMetadata(SomeViewport, new Viewport({selector: 'someViewport'}), null));\n    });\n\n    it('should read out the Component annotation', () => {\n      var m = reader.read(SomeComponent);\n      // For some reason `toEqual` fails to compare ResolvedBinding objects.\n      // Have to decompose and compare.\n      expect(m.type).toEqual(SomeComponent);\n      expect(m.annotation)\n          .toEqual(new Component({selector: 'someComponent', injectables: [SomeInjectable]}));\n      var resolvedList = ListWrapper.reduce(m.resolvedInjectables, function(prev, elem) {\n        if (isPresent(elem)) {\n          ListWrapper.push(prev, elem);\n        }\n        return prev;\n      }, []);\n      expect(resolvedList.length).toBe(1);\n      expect(resolvedList[0].key.token).toBe(SomeInjectable);\n    });\n\n    it('should throw if not matching annotation is found', () => {\n      expect(() => {\n        reader.read(SomeDirectiveWithoutAnnotation);\n      }).toThrowError('No Directive annotation found on SomeDirectiveWithoutAnnotation');\n    });\n  });\n}\n"]}