{"version":3,"sources":["query_integration_spec.js"],"names":[],"mappings":"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","file":"angular2/test/core/compiler/query_integration_spec.js","sourcesContent":["import {\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  el,\n  expect,\n  iit,\n  inject,\n  IS_NODEJS,\n  it,\n  xit,\n  } from 'angular2/test_lib';\n\nimport {TestBed} from 'angular2/src/test_lib/test_bed';\n\nimport {QueryList} from 'angular2/src/core/compiler/query_list';\nimport {Query} from 'angular2/src/core/annotations/di';\n\nimport {Decorator, Component, View, If, For} from 'angular2/angular2';\n\nimport {BrowserDomAdapter} from 'angular2/src/dom/browser_adapter';\n\nexport function main() {\n  BrowserDomAdapter.makeCurrent();\n  describe('Query API', () => {\n\n    it('should contain all directives in the light dom', inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var template =\n        '<div text=\"1\"></div>' +\n        '<needs-query text=\"2\"><div text=\"3\"></div></needs-query>' +\n        '<div text=\"4\"></div>';\n\n      tb.createView(MyComp, {html: template}).then((view) => {\n        view.detectChanges();\n        expect(view.rootNodes).toHaveText('2|3|');\n\n        async.done();\n      });\n    }));\n\n    it('should reflect dynamically inserted directives', inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var template =\n        '<div text=\"1\"></div>' +\n        '<needs-query text=\"2\"><div *if=\"shouldShow\" [text]=\"\\'3\\'\"></div></needs-query>' +\n        '<div text=\"4\"></div>';\n\n      tb.createView(MyComp, {html: template}).then((view) => {\n\n        view.detectChanges();\n        expect(view.rootNodes).toHaveText('2|');\n\n        view.context.shouldShow = true;\n        view.detectChanges();\n        // TODO(rado): figure out why the second tick is necessary.\n        view.detectChanges();\n        expect(view.rootNodes).toHaveText('2|3|');\n\n        async.done();\n      });\n    }));\n\n    it('should reflect moved directives', inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var template =\n        '<div text=\"1\"></div>' +\n        '<needs-query text=\"2\"><div *for=\"var i of list\" [text]=\"i\"></div></needs-query>' +\n        '<div text=\"4\"></div>';\n\n      tb.createView(MyComp, {html: template}).then((view) => {\n        view.detectChanges();\n        view.detectChanges();\n\n        expect(view.rootNodes).toHaveText('2|1d|2d|3d|');\n\n        view.context.list = ['3d', '2d'];\n        view.detectChanges();\n        view.detectChanges();\n        expect(view.rootNodes).toHaveText('2|3d|2d|');\n\n        async.done();\n      });\n    }));\n  });\n}\n\n@Component({selector: 'needs-query'})\n@View({\n  directives: [For],\n  template: '<div *for=\"var dir of query\">{{dir.text}}|</div>'\n})\nclass NeedsQuery {\n  query: QueryList;\n  constructor(@Query(TextDirective) query: QueryList) {\n    this.query = query;\n  }\n}\n\nvar _constructiontext = 0;\n\n@Decorator({\n  selector: '[text]',\n  properties: {\n    'text': 'text'\n  }\n})\nclass TextDirective {\n  text: string;\n  constructor() {}\n}\n\n@Component({selector: 'my-comp'})\n@View({\n  directives: [NeedsQuery, TextDirective,  If, For]\n})\nclass MyComp {\n  shouldShow: boolean;\n  list;\n  constructor() {\n    this.shouldShow = false;\n    this.list = ['1d', '2d', '3d'];\n  }\n}\n"]}