{"version":3,"sources":["multi_metric_spec.js"],"names":[],"mappings":"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","file":"benchpress/test/metric/multi_metric_spec.js","sourcesContent":["import {\n  afterEach,\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  expect,\n  iit,\n  inject,\n  it,\n  xit,\n} from 'angular2/test_lib';\n\nimport { List, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { PromiseWrapper, Promise } from 'angular2/src/facade/async';\n\nimport { Metric, MultiMetric, bind, Injector } from 'benchpress/common';\n\nexport function main() {\n  function createMetric(ids) {\n    return Injector.resolveAndCreate([\n      ListWrapper.map(ids, (id) => bind(id).toValue(new MockMetric(id)) ),\n      MultiMetric.createBindings(ids)\n    ]).asyncGet(MultiMetric);\n  }\n\n  describe('multi metric', () => {\n\n    it('should merge descriptions', inject([AsyncTestCompleter], (async) => {\n      createMetric(['m1', 'm2']).then( (m) => {\n        expect(m.describe()).toEqual({\n          'm1': 'describe', 'm2': 'describe'\n        });\n        async.done();\n      });\n    }));\n\n    it('should merge all beginMeasure calls', inject([AsyncTestCompleter], (async) => {\n      createMetric(['m1', 'm2'])\n        .then( (m) => m.beginMeasure() )\n        .then( (values) => {\n          expect(values).toEqual([\n            'm1_beginMeasure', 'm2_beginMeasure'\n          ]);\n          async.done();\n        });\n    }));\n\n    [false, true].forEach( (restartFlag) => {\n      it(`should merge all endMeasure calls for restart=${restartFlag}`, inject([AsyncTestCompleter], (async) => {\n        createMetric(['m1', 'm2'])\n          .then( (m) => m.endMeasure(restartFlag) )\n          .then( (values) => {\n            expect(values).toEqual({\n              'm1': { 'restart': restartFlag },\n              'm2': { 'restart': restartFlag }\n            });\n            async.done();\n          });\n      }));\n    });\n\n  });\n}\n\nclass MockMetric extends Metric {\n  _id:string;\n\n  constructor(id) {\n    super();\n    this._id = id;\n  }\n\n  beginMeasure():Promise {\n    return PromiseWrapper.resolve(`${this._id}_beginMeasure`);\n  }\n\n  endMeasure(restart:boolean):Promise<StringMap> {\n    var result = {};\n    result[this._id] = {\n      'restart': restart\n    };\n    return PromiseWrapper.resolve(result);\n  }\n\n  describe():StringMap {\n    var result = {};\n    result[this._id] = 'describe';\n    return result;\n  }\n}\n"]}