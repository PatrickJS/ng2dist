{"version":3,"sources":["validator.js"],"names":[],"mappings":"AAAA;AAAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;WAArC,EAAC,GAAE,YAAqB;AAAE,sBAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;;;;;EAAjD,KAAG,EAAZ,EAAC,qBAAoB,CAAA,OAAM,AAAC,eAAkB,CACtC,CAAA,sBAAqB,+BAA2B,CAAA,sBAAqB,GAAK,EAAC,OAAM,qBAAmB,CAAC,AAD/D,CACgE;SAD9G,EAAC,8CAAoB,CAAA,OAAM,AAAC,kCAAkB,CACtC,CAAA,+CAAqB,wDAA2B,CAAA,+CAAqB,GAAK,EAAC,OAAM,8CAAmB,CAAC,AAD/D,CACgE;AAArG,OAAG;AAAG,YAAQ;SADvB,EAAC,wCAAoB,CAAA,OAAM,AAAC,4BAAkB,CACtC,CAAA,yCAAqB,kDAA2B,CAAA,yCAAqB,GAAK,EAAC,OAAM,wCAAmB,CAAC,AAD/D,CACgE;AAE5G,WAAO;AAAG,gBAAY;EAGf,cAAY,EANrB,EAAC,wBAAoB,CAAA,OAAM,AAAC,oBAAkB,CACtC,CAAA,yBAAqB,kCAA2B,CAAA,yBAAqB,GAAK,EAAC,OAAM,wBAAmB,CAAC,AAD/D,CACgE;AAD9G,AAAI,EAAA,YAcG,SAAM,UAAQ;;AAuBrB,AArCwC,CAAA;AAAxC,AAAI,EAAA,uBAAoC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC;AA0B3B,SAAO,CAAP,UAAS,cAAa,AAAoB,CAAuB;AAC/D,QAAM,IAAI,cAAY,AAAC,CAAC,KAAI,CAAC,CAAC;EAChC;AAMA,SAAO,CAAP,UAAS,AAAD,CAAa;AACnB,QAAM,IAAI,cAAY,AAAC,CAAC,KAAI,CAAC,CAAC;EAChC;AAAA,GArBO,MAAK,CAAZ,UAAc,aAAY;AACxB,SAAO,EACL,IAAG,AAAC,YAAU,UAAU,AAAC,EACvB,SAAC,QAAO;WAAM,SAAO;IAAA,EAAG,EAAC,aAAY,CAAC,CACxC,CACF,CAAC;EACH,EArBmF;AAArF,KAAK,eAAe,AAAC,0BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAYzB,SAAO,AAAC,EAAC,EAZuC;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,4CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,eAAc,YAAc,AA0BF,CAAA,IAAG,CAAE,cAAY,CAAC,AA1BG,GACE;EAAC,CAAC,CAAC,CAAC;AAoCrD","file":"benchpress/src/validator.js","sourcesContent":["import { bind } from 'angular2/di';\nimport { List, StringMap } from 'angular2/src/facade/collection';\nimport {\n  ABSTRACT, BaseException\n} from 'angular2/src/facade/lang';\n\nimport { MeasureValues } from './measure_values';\n\n/**\n * A Validator calculates a valid sample out of the complete sample.\n * A valid sample is a sample that represents the population that should be observed\n * in the correct way.\n */\n@ABSTRACT()\nexport class Validator {\n  static bindTo(delegateToken) {\n    return [\n      bind(Validator).toFactory(\n        (delegate) => delegate, [delegateToken]\n      )\n    ];\n  }\n\n  /**\n   * Calculates a valid sample out of the complete sample\n   */\n  validate(completeSample:List<MeasureValues>):List<MeasureValues> {\n    throw new BaseException('NYI');\n  }\n\n  /**\n   * Returns a Map that describes the properties of the validator\n   * (e.g. sample size, ...)\n   */\n  describe():StringMap {\n    throw new BaseException('NYI');\n  }\n}"]}