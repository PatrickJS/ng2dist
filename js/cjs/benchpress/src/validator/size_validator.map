{"version":3,"sources":["size_validator.js"],"names":[],"mappings":"AAAA;AAAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;eAArC,EAAC,GAAE,YAAqB;AAAE,0BAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;;;;;SAA1D,EAAC,8CAAoB,CAAA,OAAM,AAAC,kCAAkB,CACtC,CAAA,+CAAqB,wDAA2B,CAAA,+CAAqB,GAAK,EAAC,OAAM,8CAAmB,CAAC,AAD/D,CACgE;AADrG,OAAG;AAAG,cAAU;AAAG,YAAQ;SAApC,EAAC,qBAAoB,CAAA,OAAM,AAAC,eAAkB,CACtC,CAAA,sBAAqB,+BAA2B,CAAA,sBAAqB,GAAK,EAAC,OAAM,qBAAmB,CAAC,AAD/D,CACgE;AAArG,OAAG;AAAG,cAAU;EAEhB,UAAQ,EAHjB,EAAC,4BAAoB,CAAA,OAAM,AAAC,gBAAkB,CACtC,CAAA,6BAAqB,sCAA2B,CAAA,6BAAqB,GAAK,EAAC,OAAM,4BAAmB,CAAC,AAD/D,CACgE;EAGrG,cAAY,EAJrB,EAAC,oCAAoB,CAAA,OAAM,AAAC,qBAAkB,CACtC,CAAA,qCAAqB,8CAA2B,CAAA,qCAAqB,GAAK,EAAC,OAAM,oCAAmB,CAAC,AAD/D,CACgE;AAD9G,AAAI,EAAA,gBASG,SAAM,cAAY,CAQX,IAAG,CAAG;AAChB,AAlBJ,gBAAc,iBAAiB,AAAC,gBAAkB,KAAK,MAAmB,CAkB/D;AACP,KAAG,YAAY,EAAI,KAAG,CAAC;AACzB,AApBsC,CAAA;AAAxC,AAAI,EAAA,+BAAoC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC;AAsB3B,SAAO,CAAP,UAAS,AAAD,CAAa;AACnB,SAAO,EACL,YAAW,CAAG,CAAA,IAAG,YAAY,CAC/B,CAAC;EACH;AAEA,SAAO,CAAP,UAAS,cAAa,AAAoB,CAAuB;AAC/D,OAAI,cAAa,OAAO,GAAK,CAAA,IAAG,YAAY,CAAG;AAC7C,WAAO,CAAA,WAAU,MAAM,AAAC,CAAC,cAAa,CAAG,CAAA,cAAa,OAAO,EAAI,CAAA,IAAG,YAAY,CAAG,CAAA,cAAa,OAAO,CAAC,CAAC;IAC3G,KAAO;AACL,WAAO,KAAG,CAAC;IACb;AAAA,EACF;AAAA;AAvBA,IAAW,SAAO,EAAI;AAAE,SAAO,UAAQ,CAAC;EAAE;AAE1C,IAAW,YAAU,EAAI;AAAE,SAAO,aAAW,CAAC;EAAE;AAAA,CAJf,UAAQ,CARa;AADxD,KAAK,eAAe,AAAC,gDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,eAAc,YAAc,AA4BF,CAAA,IAAG,CAAE,cAAY,CAAC,AA5BG,GACE;EAAC,CAAC,CAAC,CAAC;AAqCrD,AAAI,EAAA,CAAA,YAAW,EAAI,IAAI,YAAU,AAAC,CAAC,0BAAyB,CAAC,CAAC;AAC9D,AAAI,EAAA,CAAA,SAAQ,EAAI,EACd,IAAG,AAAC,CAAC,aAAY,CAAC,UAAU,AAAC,EAC3B,SAAC,IAAG;OAAM,IAAI,cAAY,AAAC,CAAC,IAAG,CAAC;AAAA,EAChC,EAAC,YAAW,CAAC,CACf,CACA,CAAA,IAAG,AAAC,CAAC,YAAW,CAAC,QAAQ,AAAC,CAAC,EAAC,CAAC,CAC/B,CAAC;AAAA","file":"benchpress/src/validator/size_validator.js","sourcesContent":["import { List, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { bind, OpaqueToken } from 'angular2/di';\n\nimport { Validator } from '../validator';\nimport { MeasureValues } from '../measure_values';\n\n/**\n * A validator that waits for the sample to have a certain size.\n */\nexport class SizeValidator extends Validator {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get BINDINGS() { return _BINDINGS; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get SAMPLE_SIZE() { return _SAMPLE_SIZE; }\n\n  _sampleSize:number;\n\n  constructor(size) {\n    super();\n    this._sampleSize = size;\n  }\n\n  describe():StringMap {\n    return {\n      'sampleSize': this._sampleSize\n    };\n  }\n\n  validate(completeSample:List<MeasureValues>):List<MeasureValues> {\n    if (completeSample.length >= this._sampleSize) {\n      return ListWrapper.slice(completeSample, completeSample.length - this._sampleSize, completeSample.length);\n    } else {\n      return null;\n    }\n  }\n\n}\n\nvar _SAMPLE_SIZE = new OpaqueToken('SizeValidator.sampleSize');\nvar _BINDINGS = [\n  bind(SizeValidator).toFactory(\n    (size) => new SizeValidator(size),\n    [_SAMPLE_SIZE]\n  ),\n  bind(_SAMPLE_SIZE).toValue(10)\n];"]}