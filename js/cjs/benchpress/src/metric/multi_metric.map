{"version":3,"sources":["multi_metric.js"],"names":[],"mappings":"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","file":"benchpress/src/metric/multi_metric.js","sourcesContent":["import { bind, Injector, OpaqueToken } from 'angular2/di';\nimport { List, ListWrapper, StringMapWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { Promise, PromiseWrapper } from 'angular2/src/facade/async';\n\nimport { Metric } from '../metric';\n\nexport class MultiMetric extends Metric {\n  static createBindings(childTokens) {\n    return [\n      bind(_CHILDREN).toAsyncFactory(\n        (injector) => PromiseWrapper.all(ListWrapper.map(childTokens, (token) => injector.asyncGet(token) )),\n        [Injector]\n      ),\n      bind(MultiMetric).toFactory(\n        (children) => new MultiMetric(children),\n        [_CHILDREN]\n      )\n    ];\n  }\n\n  _metrics:List;\n\n  constructor(metrics) {\n    super();\n    this._metrics = metrics;\n  }\n\n  /**\n   * Starts measuring\n   */\n  beginMeasure():Promise {\n    return PromiseWrapper.all(ListWrapper.map(\n      this._metrics, (metric) => metric.beginMeasure()\n    ));\n  }\n\n  /**\n   * Ends measuring and reports the data\n   * since the begin call.\n   * @param restart: Whether to restart right after this.\n   */\n  endMeasure(restart:boolean):Promise<StringMap> {\n    return PromiseWrapper.all(ListWrapper.map(\n      this._metrics, (metric) => metric.endMeasure(restart)\n    )).then( (values) => {\n      return mergeStringMaps(values);\n    });\n  }\n\n  /**\n   * Describes the metrics provided by this metric implementation.\n   * (e.g. units, ...)\n   */\n  describe():StringMap {\n    return mergeStringMaps(this._metrics.map( (metric) => metric.describe() ));\n  }\n}\n\nfunction mergeStringMaps(maps) {\n  var result = {};\n  ListWrapper.forEach(maps, (map) => {\n    StringMapWrapper.forEach(map, (value, prop) => {\n      result[prop] = value;\n    });\n  });\n  return result;\n}\n\nvar _CHILDREN = new OpaqueToken('MultiMetric.children');\n"]}