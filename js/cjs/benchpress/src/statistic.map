{"version":3,"sources":["statistic.js"],"names":[],"mappings":"AAAA;AAAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;WAArC,EAAC,GAAE,YAAqB;AAAE,sBAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;;;EAAjD,KAAG,EAAZ,EAAC,wCAAoB,CAAA,OAAM,AAAC,4BAAkB,CACtC,CAAA,yCAAqB,kDAA2B,CAAA,yCAAqB,GAAK,EAAC,OAAM,wCAAmB,CAAC,AAD/D,CACgE;EAArG,YAAU,EADnB,EAAC,8CAAoB,CAAA,OAAM,AAAC,kCAAkB,CACtC,CAAA,+CAAqB,wDAA2B,CAAA,+CAAqB,GAAK,EAAC,OAAM,8CAAmB,CAAC,AAD/D,CACgE;AAD9G,AAAI,EAAA,YAGG,SAAM,UAAQ;;AA+BrB,AAlCwC,CAAA;AAAxC,AAAI,EAAA,uBAAoC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC;AAIpB,gCAA8B,CAArC,UAAuC,MAAK,CAAG,CAAA,IAAG,CAAG;AACnD,SAAO,CAAA,qCAAmC,AAAC,CAAC,MAAK,CAAG,KAAG,CAAC,CAAA,CAAI,KAAG,CAAA,CAAI,IAAE,CAAC;EACxE;AAEO,cAAY,CAAnB,UAAqB,MAAK;AACxB,AAAI,MAAA,CAAA,KAAI,EAAI,EAAA,CAAC;AACb,cAAU,QAAQ,AAAC,CAAC,MAAK,GAAG,SAAC,CAAA,CAAM;AAAE,UAAI,GAAK,EAAA,CAAA;IAAE,EAAE,CAAC;AACnD,SAAO,CAAA,KAAI,EAAI,CAAA,MAAK,OAAO,CAAC;EAC9B;AAEO,2BAAyB,CAAhC,UAAkC,MAAK,CAAG,CAAA,IAAG;AAC3C,AAAI,MAAA,CAAA,SAAQ,EAAI,EAAA,CAAC;AACjB,cAAU,QAAQ,AAAC,CAAC,MAAK,GAAG,SAAC,CAAA,CAAM;AACjC,cAAQ,GAAK,CAAA,IAAG,IAAI,AAAC,CAAC,CAAA,EAAI,KAAG,CAAG,EAAA,CAAC,CAAC;IACpC,EAAC,CAAC;AACF,YAAQ,EAAI,CAAA,SAAQ,EAAI,EAAC,MAAK,OAAO,CAAC,CAAC;AACvC,YAAQ,EAAI,CAAA,IAAG,KAAK,AAAC,CAAC,SAAQ,CAAC,CAAC;AAChC,SAAO,UAAQ,CAAC;EAClB;AAEO,yBAAuB,CAA9B,UAAgC,OAAM,CAAG,CAAA,KAAI,CAAG,CAAA,OAAM,CAAG,CAAA,KAAI,CAAG;AAE9D,AAAI,MAAA,CAAA,WAAU,EAAI,EAAA,CAAC;AACnB,AAAI,MAAA,CAAA,UAAS,EAAI,EAAA,CAAC;AAClB,QAAS,GAAA,CAAA,CAAA,EAAE,EAAA,CAAG,CAAA,CAAA,EAAE,CAAA,OAAM,OAAO,CAAG,CAAA,CAAA,EAAE,CAAG;AACnC,gBAAU,GAAK,CAAA,CAAC,OAAM,CAAE,CAAA,CAAC,EAAI,MAAI,CAAC,EAAI,EAAC,OAAM,CAAE,CAAA,CAAC,EAAI,MAAI,CAAC,CAAC;AAC1D,eAAS,GAAK,CAAA,IAAG,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,EAAI,MAAI,CAAG,EAAA,CAAC,CAAC;IAC/C;AAAA,AACA,SAAO,CAAA,WAAU,EAAI,WAAS,CAAC;EACjC;AAAA,CAjCmF;AAqCrF","file":"benchpress/src/statistic.js","sourcesContent":["import { Math } from 'angular2/src/facade/math';\nimport { ListWrapper } from 'angular2/src/facade/collection';\n\nexport class Statistic {\n  static calculateCoefficientOfVariation(sample, mean) {\n    return Statistic.calculateStandardDeviation(sample, mean) / mean * 100;\n  }\n\n  static calculateMean(sample) {\n    var total = 0;\n    ListWrapper.forEach(sample, (x) => { total += x } );\n    return total / sample.length;\n  }\n\n  static calculateStandardDeviation(sample, mean) {\n    var deviation = 0;\n    ListWrapper.forEach(sample, (x) => {\n      deviation += Math.pow(x - mean, 2);\n    });\n    deviation = deviation / (sample.length);\n    deviation = Math.sqrt(deviation);\n    return deviation;\n  }\n\n  static calculateRegressionSlope(xValues, xMean, yValues, yMean) {\n    // See http://en.wikipedia.org/wiki/Simple_linear_regression\n    var dividendSum = 0;\n    var divisorSum = 0;\n    for (var i=0; i<xValues.length; i++) {\n      dividendSum += (xValues[i] - xMean) * (yValues[i] - yMean);\n      divisorSum += Math.pow(xValues[i] - xMean, 2);\n    }\n    return dividendSum / divisorSum;\n  }\n}\n\n\n"]}