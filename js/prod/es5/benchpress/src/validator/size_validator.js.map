{"version":3,"sources":["size_validator.es6"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,wFAAoB,UAAS,SAAQ;;;;;;;;;;;;AAApD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG;AAAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,gBAAoB,KAAG,UAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,oBAAoB,KAAG,cAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;oBAFY,CAAA,SAAQ,AAAC,mBAAjC,SAAS,QAAO;AACN,AAAI,UAAA,gBAMP,SAAM,cAAY,CAOX,IAAG,CAAG;AAChB,AAfJ,wBAAc,iBAAiB,AAAC,eAAkB,KAAK,MAAmB,CAe/D;AACP,aAAG,YAAY,EAAI,KAAG,CAAC;QACzB,AAhBgD,CAAC;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AAgB5C,iBAAO,CAAP,UAAS,AAAD,CAAG;AACT,iBAAO,EAAC,YAAW,CAAG,CAAA,IAAG,YAAY,CAAC,CAAC;UACzC;AACA,iBAAO,CAAP,UAAS,cAAa,CAAG;AACvB,eAAI,cAAa,OAAO,GAAK,CAAA,IAAG,YAAY,CAAG;AAC7C,mBAAO,CAAA,WAAU,MAAM,AAAC,CAAC,cAAa,CAAG,CAAA,cAAa,OAAO,EAAI,CAAA,IAAG,YAAY,CAAG,CAAA,cAAa,OAAO,CAAC,CAAC;YAC3G,KAAO;AACL,mBAAO,KAAG,CAAC;YACb;AAAA,UACF;AAAA;AAnBA,YAAW,SAAO,EAAI;AACpB,iBAAO,UAAQ,CAAC;UAClB;AACA,YAAW,YAAU,EAAI;AACvB,iBAAO,aAAW,CAAC;UACrB;AAAA,SAVgE,SAAO,CAAC,CAAC;MACnE,AAAC,CAG0B,SAAQ,CAHhB,EAJ2C;AA6BtE,WAAK,eAAe,AAAC,CAAC,aAAY,UAAU,SAAS,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AACnF,eAAO,EAAC,CAAC,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,cAAY,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;mBACc,IAAI,YAAU,AAAC,CAAC,0BAAyB,CAAC;gBAC7C,EAAC,IAAG,AAAC,CAAC,aAAY,CAAC,UAAU,AAAC,EAAC,SAAC,IAAG;aAAM,IAAI,cAAY,AAAC,CAAC,IAAG,CAAC;MAAA,EAAG,EAAC,YAAW,CAAC,CAAC,CAAG,CAAA,IAAG,AAAC,CAAC,YAAW,CAAC,QAAQ,AAAC,CAAC,EAAC,CAAC,CAAC;IA/BlG;EAC3B,CAAA;AADI,CAAC,CAAC;AAkC8B","file":"benchpress/src/validator/size_validator.js","sourcesContent":["import {List,\n  ListWrapper,\n  StringMap} from 'angular2/src/facade/collection';\nimport {bind,\n  OpaqueToken} from 'angular2/di';\nimport {Validator} from '../validator';\nimport {MeasureValues} from '../measure_values';\nexport class SizeValidator extends Validator {\n  static get BINDINGS() {\n    return _BINDINGS;\n  }\n  static get SAMPLE_SIZE() {\n    return _SAMPLE_SIZE;\n  }\n  constructor(size) {\n    super();\n    this._sampleSize = size;\n  }\n  describe() {\n    return {'sampleSize': this._sampleSize};\n  }\n  validate(completeSample) {\n    if (completeSample.length >= this._sampleSize) {\n      return ListWrapper.slice(completeSample, completeSample.length - this._sampleSize, completeSample.length);\n    } else {\n      return null;\n    }\n  }\n}\nObject.defineProperty(SizeValidator.prototype.validate, \"parameters\", {get: function() {\n    return [[assert.genericType(List, MeasureValues)]];\n  }});\nvar _SAMPLE_SIZE = new OpaqueToken('SizeValidator.sampleSize');\nvar _BINDINGS = [bind(SizeValidator).toFactory((size) => new SizeValidator(size), [_SAMPLE_SIZE]), bind(_SAMPLE_SIZE).toValue(10)];\n//# sourceMappingURL=size_validator.js.map\n\n//# sourceMappingURL=./size_validator.map"]}