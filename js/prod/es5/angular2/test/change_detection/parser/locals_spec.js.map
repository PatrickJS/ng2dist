{"version":3,"sources":["locals_spec.es6"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,wGAAoB,UAAS,SAAQ;;;;;;;;;;;AAS7C,SAAS,KAAG,CAAE,AAAD;AAClB,WAAO,AAAC,CAAC,QAAO,GAAG,SAAC,AAAD;AACjB,AAAI,QAAA,CAAA,MAAK,CAAC;AACV,eAAS,AAAC,EAAC,SAAC,AAAD,CAAM;AACf,aAAK,EAAI,IAAI,OAAK,AAAC,CAAC,IAAG,CAAG,CAAA,UAAS,gBAAgB,AAAC,CAAC,CAAC,CAAC,KAAI,CAAG,QAAM,CAAC,CAAG,EAAC,SAAQ,CAAG,KAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9F,EAAC,CAAC;AACF,OAAC,AAAC,CAAC,+BAA8B,GAAG,SAAC,AAAD;AAClC,aAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,OAAM,CAAC,CAAC;AACvC,aAAK,AAAC,EAAC,SAAC,AAAD;eAAM,CAAA,MAAK,IAAI,AAAC,CAAC,YAAW,CAAC;QAAA,EAAC,aAAa,AAAC,CAAC,GAAI,OAAK,AAAC,CAAC,aAAY,CAAC,CAAC,CAAC;MAChF,EAAC,CAAC;AACF,OAAC,AAAC,CAAC,2CAA0C,GAAG,SAAC,AAAD,CAAM;AACpD,aAAK,AAAC,CAAC,MAAK,SAAS,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;AACzC,aAAK,AAAC,CAAC,MAAK,SAAS,AAAC,CAAC,SAAQ,CAAC,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;AAC7C,aAAK,AAAC,CAAC,MAAK,SAAS,AAAC,CAAC,YAAW,CAAC,CAAC,KAAK,AAAC,CAAC,KAAI,CAAC,CAAC;MACnD,EAAC,CAAC;AACF,OAAC,AAAC,CAAC,6BAA4B,GAAG,SAAC,AAAD,CAAM;AACtC,aAAK,IAAI,AAAC,CAAC,KAAI,CAAG,MAAI,CAAC,CAAC;AACxB,aAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,KAAI,CAAC,CAAC;MACvC,EAAC,CAAC;AACF,OAAC,AAAC,CAAC,8DAA6D,GAAG,SAAC,AAAD;AACjE,aAAK,AAAC,EAAC,SAAC,AAAD;eAAM,CAAA,MAAK,IAAI,AAAC,CAAC,YAAW,CAAG,MAAI,CAAC;QAAA,EAAC,aAAa,AAAC,EAAC,CAAC;MAC9D,EAAC,CAAC;AACF,OAAC,AAAC,CAAC,oBAAmB,GAAG,SAAC,AAAD,CAAM;AAC7B,aAAK,YAAY,AAAC,EAAC,CAAC;AACpB,aAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;MACtC,EAAC,CAAC;IACJ,EAAC,CAAC;EACJ;AAnCQ,UAAQ,AAAC,cAAqC,CAAA;AADtD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG;AAAZ,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,eAAoB,KAAG,SAAkB,CAAC;AAA1C,SAAoB,KAAG,GAAkB,CAAC;AAA1C,UAAoB,KAAG,IAAkB,CAAC;AAA1C,UAAoB,KAAG,IAAkB,CAAC;AAA1C,aAAoB,KAAG,OAAkB,CAAC;AAA1C,iBAAoB,KAAG,WAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,aAAoB,KAAG,OAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,iBAAoB,KAAG,WAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;IAAmB;EAC3B,CAAA;AADI,CAAC,CAAC;AAqC2B","file":"angular2/test/change_detection/parser/locals_spec.js","sourcesContent":["import {ddescribe,\n  describe,\n  it,\n  xit,\n  iit,\n  expect,\n  beforeEach} from 'angular2/test_lib';\nimport {Locals} from 'angular2/src/change_detection/parser/locals';\nimport {MapWrapper} from 'angular2/src/facade/collection';\nexport function main() {\n  describe('Locals', () => {\n    var locals;\n    beforeEach(() => {\n      locals = new Locals(null, MapWrapper.createFromPairs([['key', 'value'], ['nullKey', null]]));\n    });\n    it('should support getting values', () => {\n      expect(locals.get('key')).toBe('value');\n      expect(() => locals.get('notPresent')).toThrowError(new RegExp(\"Cannot find\"));\n    });\n    it('should support checking if key is present', () => {\n      expect(locals.contains('key')).toBe(true);\n      expect(locals.contains('nullKey')).toBe(true);\n      expect(locals.contains('notPresent')).toBe(false);\n    });\n    it('should support setting keys', () => {\n      locals.set('key', 'bar');\n      expect(locals.get('key')).toBe('bar');\n    });\n    it('should not support setting keys that are not present already', () => {\n      expect(() => locals.set('notPresent', 'bar')).toThrowError();\n    });\n    it('should clearValues', () => {\n      locals.clearValues();\n      expect(locals.get('key')).toBe(null);\n    });\n  });\n}\n//# sourceMappingURL=locals_spec.js.map\n\n//# sourceMappingURL=./locals_spec.map"]}