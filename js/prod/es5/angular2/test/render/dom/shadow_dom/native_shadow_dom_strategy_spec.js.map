{"version":3,"sources":["native_shadow_dom_strategy_spec.es6"],"names":[],"mappings":"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","file":"angular2/test/render/dom/shadow_dom/native_shadow_dom_strategy_spec.js","sourcesContent":["import {AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  el,\n  expect,\n  iit,\n  inject,\n  it,\n  xit,\n  SpyObject} from 'angular2/test_lib';\nimport {NativeShadowDomStrategy} from 'angular2/src/render/dom/shadow_dom/native_shadow_dom_strategy';\nimport {UrlResolver} from 'angular2/src/services/url_resolver';\nimport {StyleUrlResolver} from 'angular2/src/render/dom/shadow_dom/style_url_resolver';\nimport {RenderView} from 'angular2/src/render/dom/view/view';\nimport {isPresent,\n  isBlank} from 'angular2/src/facade/lang';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\nexport function main() {\n  var strategy;\n  describe('NativeShadowDomStrategy', () => {\n    beforeEach(() => {\n      var urlResolver = new UrlResolver();\n      var styleUrlResolver = new StyleUrlResolver(urlResolver);\n      strategy = new NativeShadowDomStrategy(styleUrlResolver);\n    });\n    it('should attach the view nodes to the shadow root', () => {\n      var host = el('<div><span>original content</span></div>');\n      var nodes = el('<div>view</div>');\n      var view = new RenderView(null, [nodes], [], [], [], [], null);\n      strategy.attachTemplate(host, view);\n      var shadowRoot = DOM.getShadowRoot(host);\n      expect(isPresent(shadowRoot)).toBeTruthy();\n      expect(shadowRoot).toHaveText('view');\n    });\n    it('should rewrite style urls', () => {\n      var styleElement = el('<style>.foo {background-image: url(\"img.jpg\");}</style>');\n      strategy.processStyleElement('someComponent', 'http://base', styleElement);\n      expect(styleElement).toHaveText(\".foo {\" + \"background-image: url('http://base/img.jpg');\" + \"}\");\n    });\n    it('should not inline import rules', () => {\n      var styleElement = el('<style>@import \"other.css\";</style>');\n      strategy.processStyleElement('someComponent', 'http://base', styleElement);\n      expect(styleElement).toHaveText(\"@import 'http://base/other.css';\");\n    });\n  });\n}\n//# sourceMappingURL=native_shadow_dom_strategy_spec.js.map\n\n//# sourceMappingURL=./native_shadow_dom_strategy_spec.map"]}