{"version":3,"sources":["util.es6"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,8BAAoB,UAAS,SAAQ;;;;;;;;;;AAQ7C,SAAS,oBAAkB,CAAE,KAAI;AACtC,SAAO,CAAA,aAAY,iBAAiB,AAAC,CAAC,KAAI,CAAG,kBAAgB,GAAG,SAAC,CAAA,CAAM;AACrE,WAAO,CAAA,GAAE,EAAI,CAAA,CAAA,CAAE,CAAA,CAAC,YAAY,AAAC,EAAC,CAAC;IACjC,EAAC,CAAC;EACJ;AAIO,SAAS,oBAAkB,CAAE,KAAI;AACtC,SAAO,CAAA,aAAY,iBAAiB,AAAC,CAAC,KAAI,CAAG,iBAAe,GAAG,SAAC,CAAA,CAAM;AACpE,WAAO,CAAA,CAAA,CAAE,CAAA,CAAC,YAAY,AAAC,EAAC,CAAC;IAC3B,EAAC,CAAC;EACJ;AAnBQ,UAAQ,AAAC,4CAAqC,CAAA;AAA9C,UAAQ,AAAC,4CAAqC,CAAA;AADtD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG;AAAZ,oBAAoB,KAAG,cAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;gCAFZ,CAAA,SAAQ,AAAC,6BAGgC,cAAY,CAHP;uBAA9C,CAAA,SAAQ,AAAC,oBAIuB,aAAW,CAJG;6BAA9C,CAAA,SAAQ,AAAC,0BAK6B,IAAE,CALM;wBAMtB,CAAA,aAAY,OAAO,AAAC,CAAC,SAAQ,CAAC;uBAC/B,CAAA,aAAY,OAAO,AAAC,CAAC,UAAS,CAAC;AAMtD,WAAK,eAAe,AAAC,CAAC,mBAAkB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AACtE,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;AAML,WAAK,eAAe,AAAC,CAAC,mBAAkB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AACtE,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IArB0B;EAC3B,CAAA;AADI,CAAC,CAAC;AAwBoB","file":"angular2/src/render/dom/util.js","sourcesContent":["import {StringWrapper,\n  RegExpWrapper,\n  isPresent} from 'angular2/src/facade/lang';\nexport const NG_BINDING_CLASS_SELECTOR = '.ng-binding';\nexport const NG_BINDING_CLASS = 'ng-binding';\nexport const EVENT_TARGET_SEPARATOR = ':';\nvar CAMEL_CASE_REGEXP = RegExpWrapper.create('([A-Z])');\nvar DASH_CASE_REGEXP = RegExpWrapper.create('-([a-z])');\nexport function camelCaseToDashCase(input) {\n  return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, (m) => {\n    return '-' + m[1].toLowerCase();\n  });\n}\nObject.defineProperty(camelCaseToDashCase, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nexport function dashCaseToCamelCase(input) {\n  return StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, (m) => {\n    return m[1].toUpperCase();\n  });\n}\nObject.defineProperty(dashCaseToCamelCase, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\n//# sourceMappingURL=util.js.map\n\n//# sourceMappingURL=./util.map"]}