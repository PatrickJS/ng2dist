{"version":3,"sources":["radio_button.js"],"names":[],"mappings":"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","file":"angular2_material/src/components/radio/radio_button.es6","sourcesContent":["import {Component, View, Parent, Ancestor, Attribute, PropertySetter,\n    EventEmitter} from 'angular2/angular2';\nimport {Optional} from 'angular2/src/di/annotations';\nimport {MdRadioDispatcher} from 'angular2_material/src/components/radio/radio_dispatcher'\nimport {MdTheme} from 'angular2_material/src/core/theme'\nimport {onChange} from 'angular2/src/core/annotations/annotations';\nimport {isPresent, StringWrapper} from 'angular2/src/facade/lang';\n// import {KeyCodes} from 'angular2_material/src/core/constants'\nimport {Math} from 'angular2/src/facade/math';\nimport {ListWrapper} from 'angular2/src/facade/collection';\n\n// TODO(jelbourn): Behaviors to test\n// Disabled radio don't select\n// Disabled radios don't propagate click event\n// Radios are disabled by parent group\n// Radios set default tab index iff not in parent group\n// Radios are unique-select\n// Radio updates parent group's value\n// Change to parent group's value updates the selected child radio\n// Radio name is pulled on parent group\n// Radio group changes on arrow keys\n// Radio group skips disabled radios on arrow keys\n\nvar _uniqueIdCounter:number = 0;\n\n@Component({\n  selector: 'md-radio-button',\n  lifecycle: [onChange],\n  properties: {\n    'id': 'id',\n    'name': 'name',\n    'value': 'value',\n    'checked': 'checked',\n    'disabled': 'disabled'\n  },\n  hostListeners: {\n    'keydown': 'onKeydown($event)'\n  }\n})\n@View({\n  templateUrl: 'angular2_material/src/components/radio/radio_button.html',\n  directives: []\n})\nexport class MdRadioButton {\n  /** Whether this radio is checked. */\n  checked_: boolean;\n\n  /** Whether the radio is disabled. */\n  disabled_: boolean;\n\n  /** The unique ID for the radio button. */\n  id: string;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  name: string;\n\n  /** Value assigned to this radio. Used to assign the value to the parent MdRadioGroup. */\n  value: any;\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MdRadioGroup;\n\n  /** Dispatcher for coordinating radio unique-selection by name. */\n  radioDispatcher: MdRadioDispatcher;\n\n  /** Setter for `aria-checked` attribute. */\n  ariaCheckedSetter: Function;\n\n  /** Setter for `aria-disabled` attribute. */\n  ariaDisabledSetter: Function;\n\n  constructor(\n      @Optional() @Parent() radioGroup: MdRadioGroup,\n      @Attribute('id') id: string,\n      @Attribute('tabindex') tabindex: string,\n      @PropertySetter('id') idSetter: Function,\n      @PropertySetter('tabindex') tabindexSetter: Function,\n      @PropertySetter('attr.role') roleSetter: Function,\n      @PropertySetter('attr.aria-checked') ariaCheckedSetter: Function,\n      @PropertySetter('attr.aria-disabled') ariaDisabledSetter: Function,\n      radioDispatcher: MdRadioDispatcher) {\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n    this.radioGroup = radioGroup;\n    this.radioDispatcher = radioDispatcher;\n    this.ariaCheckedSetter = ariaCheckedSetter;\n    this.ariaDisabledSetter = ariaDisabledSetter;\n    this.value = null;\n\n    roleSetter('radio');\n    this.checked = false;\n\n    this.id = isPresent(id) ? id : `md-radio-${_uniqueIdCounter++}`;\n    idSetter(this.id);\n\n    // Whenever a radio button with the same name is checked, uncheck this radio button.\n    radioDispatcher.listen((name) => {\n      if (name == this.name) {\n        this.checked = false;\n      }\n    });\n\n    // When this radio-button is inside of a radio-group, the group determines the name.\n    if (isPresent(radioGroup)) {\n      this.name = radioGroup.getName();\n      this.radioGroup.register(this);\n    }\n\n    // If the user has not set a tabindex, default to zero (in the normal document flow).\n    if (!isPresent(radioGroup)) {\n      tabindexSetter(isPresent(tabindex) ? tabindex : '0');\n    }\n  }\n\n  /** Change handler invoked when bindings are resolved or when bindings have changed. */\n  onChange(_) {\n    if (isPresent(this.radioGroup)) {\n      this.name = this.radioGroup.getName();\n    }\n  }\n\n  /** Whether this radio button is disabled, taking the parent group into account. */\n  isDisabled(): boolean {\n    // Here, this.disabled may be true/false as the result of a binding, may be the empty string\n    // if the user just adds a `disabled` attribute with no value, or may be absent completely.\n    // TODO(jelbourn): If someone sets `disabled=\"disabled\"`, will this work in dart?\n    return this.disabled ||\n        (isPresent(this.disabled) && StringWrapper.equals(this.disabled, '')) ||\n        (isPresent(this.radioGroup) && this.radioGroup.disabled);\n  }\n\n  get checked() {\n    return this.checked_;\n  }\n\n  set checked(value) {\n    this.checked_ = value;\n    this.ariaCheckedSetter(value);\n  }\n\n  get disabled() {\n    return this.disabled_;\n  }\n\n  set disabled(value) {\n    this.disabled_ = isPresent(value) && value !== false;\n    this.ariaDisabledSetter(this.disabled_);\n  }\n\n  /** Select this radio button. */\n  select(event: Event) {\n    if (this.isDisabled()) {\n      event.stopPropagation();\n      return;\n    }\n\n    // Notifiy all radio buttons with the same name to un-check.\n    this.radioDispatcher.notify(this.name);\n\n    this.checked = true;\n\n    if (this.radioGroup) {\n      this.radioGroup.updateValue(this.value, this.id);\n    }\n  }\n\n  /** Handles pressing the space key to select this focused radio button. */\n  onKeydown(event: KeyboardEvent) {\n    if (event.keyCode == KeyCodes.SPACE) {\n      event.preventDefault();\n      this.select(event);\n    }\n  }\n}\n\n@Component({\n  selector: 'md-radio-group',\n  lifecycle: [onChange],\n  properties: {\n    'disabled': 'disabled',\n    'value': 'value'\n  },\n  hostListeners: {\n    'keydown': 'onKeydown($event)'\n  }\n})\n@View({\n  templateUrl: 'angular2_material/src/components/radio/radio_group.html'\n})\nexport class MdRadioGroup {\n  /** The selected value for the radio group. The value comes from the options. */\n  value: any;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  name_: string;\n\n  /** Dispatcher for coordinating radio unique-selection by name. */\n  radioDispatcher: MdRadioDispatcher;\n\n  /** List of child radio buttons. */\n  radios_: List<MdRadioButton>;\n\n  changeEmitter: Function;\n\n  ariaActiveDescendantSetter: Function;\n\n  ariaDisabledSetter: Function;\n\n  disabled_: boolean;\n\n  /** The ID of the selected radio button. */\n  selectedRadioId: string;\n\n  constructor(\n      @Attribute('tabindex') tabindex: string,\n      @Attribute('disabled') disabled: string,\n      @PropertySetter('tabindex') tabindexSetter: Function,\n      @PropertySetter('attr.role') roleSetter: Function,\n      @PropertySetter('attr.aria-disabled') ariaDisabledSetter: Function,\n      @PropertySetter('attr.aria-activedescendant') ariaActiveDescendantSetter: Function,\n      @EventEmitter('change') changeEmitter: Function,\n      radioDispatcher: MdRadioDispatcher) {\n    this.name_ = `md-radio-group-${_uniqueIdCounter++}`;\n    this.radios_ = [];\n    this.changeEmitter = changeEmitter;\n    this.ariaActiveDescendantSetter = ariaActiveDescendantSetter;\n    this.ariaDisabledSetter = ariaDisabledSetter;\n    this.radioDispatcher = radioDispatcher;\n    this.selectedRadioId = '';\n    this.disabled_ = false;\n\n    roleSetter('radiogroup');\n\n    // The simple presence of the `disabled` attribute dictates disabled state.\n    this.disabled = isPresent(disabled);\n\n    // If the user has not set a tabindex, default to zero (in the normal document flow).\n    tabindexSetter(isPresent(tabindex) ? tabindex : '0');\n  }\n\n  /** Gets the name of this group, as to be applied in the HTML 'name' attribute. */\n  getName(): string {\n    return this.name_;\n  }\n\n  get disabled() {\n    return this.disabled_;\n  }\n\n  set disabled(value) {\n    this.disabled_ = isPresent(value) && value !== false;\n    this.ariaDisabledSetter(this.disabled_);\n  }\n\n  /** Change handler invoked when bindings are resolved or when bindings have changed. */\n  onChange(_) {\n    // If the component has a disabled attribute with no value, it will set disabled = ''.\n    this.disabled = isPresent(this.disabled) && this.disabled !== false;\n\n    // If the value of this radio-group has been set or changed, we have to look through the\n    // child radio buttons and select the one that has a corresponding value (if any).\n    if (isPresent(this.value) && this.value != '') {\n      this.radioDispatcher.notify(this.name_);\n      ListWrapper.forEach(this.radios_, (radio) => {\n        if (radio.value == this.value) {\n          radio.checked = true;\n          this.selectedRadioId = radio.id;\n          this.ariaActiveDescendantSetter(radio.id);\n        }\n      });\n    }\n  }\n\n  /** Update the value of this radio group from a child md-radio being selected. */\n  updateValue(value: any, id: string) {\n    this.value = value;\n    this.selectedRadioId = id;\n    this.ariaActiveDescendantSetter(id);\n    this.changeEmitter();\n  }\n\n  /** Registers a child radio button with this group. */\n  register(radio: MdRadioButton) {\n    ListWrapper.push(this.radios_, radio);\n  }\n\n  /** Handles up and down arrow key presses to change the selected child radio. */\n  onKeydown(event: KeyboardEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      //case KeyCodes.UP:\n      case 38:\n        this.stepSelectedRadio(-1);\n        event.preventDefault();\n        break;\n      //case KeyCodes.DOWN:\n      case 40:\n        this.stepSelectedRadio(1);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  // TODO(jelbourn): Replace this with a findIndex method in the collections facade.\n  getSelectedRadioIndex(): number {\n    for (var i = 0; i < this.radios_.length; i++) {\n      if (this.radios_[i].id == this.selectedRadioId) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** Steps the selected radio based on the given step value (usually either +1 or -1). */\n  stepSelectedRadio(step) {\n    var index = this.getSelectedRadioIndex() + step;\n    if (index < 0 || index >= this.radios_.length) {\n      return;\n    }\n\n    var radio = this.radios_[index];\n\n    // If the next radio is line is disabled, skip it (maintaining direction).\n    if (radio.disabled) {\n      this.stepSelectedRadio(step + (step < 0 ? -1 : 1));\n      return;\n    }\n\n    this.radioDispatcher.notify(this.name_);\n    radio.checked = true;\n\n    this.value = radio.value;\n    this.selectedRadioId = radio.id;\n    this.ariaActiveDescendantSetter(radio.id);\n  }\n}\n"]}