{"version":3,"sources":["grid_list.js"],"names":[],"mappings":"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","file":"angular2_material/src/components/grid_list/grid_list.es6","sourcesContent":["import {Component, View, onAllChangesDone, Parent} from 'angular2/angular2';\nimport {onDestroy, onChange} from 'angular2/src/core/annotations/annotations';\nimport {ListWrapper} from 'angular2/src/facade/collection';\nimport {CONST} from 'angular2/src/facade/lang';\nimport {isPresent, isString, NumberWrapper} from 'angular2/src/facade/lang';\nimport {PropertySetter} from 'angular2/src/core/annotations/di';\n\n// TODO(jelbourn): Set appropriate aria attributes for grid list elements.\n\n@Component({\n  selector: 'md-grid-list',\n  properties: {\n    'cols': 'cols',\n    'gutterSize': 'gutter-size'\n  },\n  lifecycle: [onChange]\n})\n@View({\n  templateUrl: 'angular2_material/src/components/grid_list/grid_list.html'\n})\nexport class MdGridList {\n  /** List of tiles that are being rendered. */\n  tiles: Array<MdGridTile>;\n\n  /** Number of columns being rendered. Can be either string or number */\n  cols;\n\n  /** Mode used to determine row heights. See RowHeightMode. */\n  rowHeightMode: string;\n\n  /** Fixed row height, as given by the user. Only used for 'fixed' mode. */\n  fixedRowHeight: number;\n\n  /** Ratio width:height given by user to determine row height. Only used for 'ratio' mode.*/\n  rowHeightRatio: number;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  gutterSize: string;\n\n  /** Array used to track the amount of space available. */\n  spaceTracker: Array<number>;\n\n  constructor() {\n    this.tiles = [];\n  }\n\n  onAllChangesDone() {\n  }\n\n  onChange(_) {\n    if (!isPresent(this.spaceTracker)) {\n      if (isString(this.cols)) {\n        this.cols = NumberWrapper.parseIntAutoRadix(this.cols);\n      }\n      this.spaceTracker = ListWrapper.createFixedSize(this.cols);\n      ListWrapper.fill(this.spaceTracker, 0);\n    }\n  }\n\n  /**\n   * Adds a tile to the grid-list.\n   * @param tile\n   */\n  addTile(tile: MdGridTile) {\n    ListWrapper.push(this.tiles, tile);\n  }\n\n  /**\n   * Removes a tile from the grid-list.\n   * @param tile\n   */\n  removeTile(tile: MdGridTile) {\n    ListWrapper.remove(this.tiles, tile);\n  }\n\n  /**\n   * Change handler invoked when bindings are resolved or when bindings have changed.\n   * Performs a layout.\n   */\n  performLayout() {\n    //console.log('laying out!');\n  }\n\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fration (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `${sizePercent}% - ( ${this.gutterSize} * ${gutterFraction} )`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return `calc( (${baseSize} + ${this.gutterSize}) * ${offset} )`;\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `calc( (${baseSize} * ${span}) + (${span - 1} * ${this.gutterSize}) )`;\n  }\n\n\n  getTileStyle(tile: MdGridTile, rowIndex: number, colIndex: number): TileStyle {\n    // Percent of the available horizontal space that one column takes up.\n    var percentWidthPerTile = this.cols / 100;\n\n    // Fraction of the gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    var gutterWidthFractionPerTile = (this.cols - 1) / this.cols;\n\n    // Base horizontal size of a column.\n    var baseTileWidth = getBaseTileSize(percentWidthPerTile, gutterWidthFractionPerTile);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    var tileStyle = new TileStyle();\n    tileStyle.left = getTilePosition(baseTileWidth, colIndex);\n    tileStyle.width = getTileSize(baseTileWidth, tile.colspan);\n\n    // TODO: make cases enums when we support enums\n    switch (this.rowHeightMode) {\n      case 'fixed':\n        // In fixed mode, simply use the given row height.\n        tileStyle.top = getTilePosition(this.fixedRowHeight, rowIndex);\n        tileStyle.height = getTileSize(this.fixedRowHeight, tile.rowspan);\n        break;\n\n      case 'ratio':\n        var percentHeightPerTile = percentWidthPerTile / this.rowHeightRatio;\n        let baseTileHeight = getBaseTileSize(percentHeightPerTile, gutterWidthFractionPerTile);\n\n        // Use paddingTop and marginTop to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied to the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tileStyle.marginTop = getTilePosition(baseTileHeight, rowIndex);\n        tileStyle.paddingTop = getTileSize(baseTileHeight, tile.rowspan);\n        break;\n\n      case 'fit':\n        var percentHeightPerTile;\n\n        break;\n    }\n\n    return tileStyle;\n  }\n}\n\n@Component({\n  selector: 'md-grid-tile',\n  properties: {\n    'rowspan': 'rowspan',\n    'colspan': 'colspan'\n  },\n  lifecycle: [onDestroy, onChange]\n})\n@View({\n  template: `<figure><content></content></figure>`\n})\nexport class MdGridTile {\n  gridList: MdGridList;\n  rowspan: number;\n  colspan: number;\n  heightSetter;\n  widthSetter;\n  topSetter;\n  leftSetter;\n  marginTopSetter;\n  paddingTopSetter;\n\n  isRegisteredWithGridList: boolean;\n\n  constructor(\n      @Parent() gridList: MdGridList,\n      @PropertySetter('style.height') heightSetter: Function,\n      @PropertySetter('style.width') widthSetter: Function,\n      @PropertySetter('style.top') topSetter: Function,\n      @PropertySetter('style.left') leftSetter: Function,\n      @PropertySetter('style.marginTop') marginTopSetter: Function,\n      @PropertySetter('style.paddingTop') paddingTopSetter: Function,\n      @PropertySetter('role') roleSetter: Function\n      ) {\n    this.gridList = gridList;\n    this.heightSetter = heightSetter;\n    this.widthSetter = widthSetter;\n    this.topSetter = topSetter;\n    this.leftSetter = leftSetter;\n    this.marginTopSetter = marginTopSetter;\n    this.paddingTopSetter = paddingTopSetter;\n    roleSetter('listitem');\n\n    // Tiles default to 1x1, but rowspan and colspan can be changed via binding.\n    this.rowspan = 1;\n    this.colspan = 1;\n\n    // DEBUG\n    heightSetter(`${gridList.tiles.length * 100}px`);\n  }\n\n  /**\n   * Change handler invoked when bindings are resolved or when bindings have changed.\n   * Notifies grid-list that a re-layout is required.\n   */\n  onChange(_) {\n    //console.log(`grid-tile on-change ${this.gridList.tiles.indexOf(this)}`);\n    if (!this.isRegisteredWithGridList) {\n      this.gridList.addTile(this);\n      this.isRegisteredWithGridList = true;\n    } else {\n      this.gridList.performLayout();\n    }\n  }\n\n  /**\n   * Destructor function. Deregisters this tile from the containing grid-list.\n   */\n  onDestroy() {\n    this.gridList.removeTile(this);\n  }\n}\n\n/** Simple data structure for style values to be applied to a tile. */\nclass TileStyle {\n  height: string;\n  width: string;\n  top: string;\n  left: string;\n  marginTop: string;\n  paddingTop: string;\n}\n"]}