{"version":3,"sources":["locals_spec.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,SAAQ;AAAG,SAAO;AAAG,GAAC;AAAG,IAAE;AAAG,IAAE;AAAG,OAAK;AAAG,WAAS,CAAC,KAAO,oBAAkB,CAAC;AAEvF,KAAO,EAAC,MAAK,CAAC,KAAO,8CAA4C,CAAC;AAElE,KAAO,EAAC,UAAS,CAAC,KAAO,iCAA+B,CAAC;AAEzD,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAO,AAAC,CAAC,QAAO,CAAG,EAAC,AAAD,IAAM;AACvB,AAAI,MAAA,CAAA,MAAK,CAAC;AACV,aAAS,AAAC,CAAC,CAAC,AAAD,IAAM;AACf,WAAK,EAAI,IAAI,OAAK,AAAC,CAAC,IAAG,CACrB,CAAA,UAAS,gBAAgB,AAAC,CAAC,CAAC,CAAC,KAAI,CAAG,QAAM,CAAC,CAAG,EAAC,SAAQ,CAAG,KAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,+BAA8B,CAAG,EAAC,AAAD,IAAM;AACxC,WAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,OAAM,CAAC,CAAC;AACvC,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM,CAAA,MAAK,IAAI,AAAC,CAAC,YAAW,CAAC,CAAC,aAAa,AAAC,CAAC,GAAI,OAAK,AAAC,CAAC,aAAY,CAAC,CAAC,CAAC;IAChF,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,2CAA0C,CAAG,EAAC,AAAD,IAAM;AACpD,WAAK,AAAC,CAAC,MAAK,SAAS,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;AACzC,WAAK,AAAC,CAAC,MAAK,SAAS,AAAC,CAAC,SAAQ,CAAC,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;AAC7C,WAAK,AAAC,CAAC,MAAK,SAAS,AAAC,CAAC,YAAW,CAAC,CAAC,KAAK,AAAC,CAAC,KAAI,CAAC,CAAC;IACnD,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,6BAA4B,CAAG,EAAC,AAAD,IAAM;AACtC,WAAK,IAAI,AAAC,CAAC,KAAI,CAAG,MAAI,CAAC,CAAC;AACxB,WAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,KAAI,CAAC,CAAC;IACvC,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,8DAA6D,CAAG,EAAC,AAAD,IAAM;AACvE,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM,CAAA,MAAK,IAAI,AAAC,CAAC,YAAW,CAAG,MAAI,CAAC,CAAC,aAAa,AAAC,EAAC,CAAC;IAC9D,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,oBAAmB,CAAG,EAAC,AAAD,IAAM;AAC7B,WAAK,YAAY,AAAC,EAAC,CAAC;AACpB,WAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;IACtC,CAAC,CAAC;EACJ,CAAC,CAAA;AACH;AAAA","file":"angular2/test/change_detection/parser/locals_spec.es6","sourcesContent":["import {ddescribe, describe, it, xit, iit, expect, beforeEach} from 'angular2/test_lib';\n\nimport {Locals} from 'angular2/src/change_detection/parser/locals';\n\nimport {MapWrapper} from 'angular2/src/facade/collection';\n\nexport function main() {\n  describe('Locals', () => {\n    var locals;\n    beforeEach(() => {\n      locals = new Locals(null,\n        MapWrapper.createFromPairs([['key', 'value'], ['nullKey', null]]));\n    });\n\n    it('should support getting values', () => {\n      expect(locals.get('key')).toBe('value');\n      expect(() => locals.get('notPresent')).toThrowError(new RegExp(\"Cannot find\"));\n    });\n\n    it('should support checking if key is present', () => {\n      expect(locals.contains('key')).toBe(true);\n      expect(locals.contains('nullKey')).toBe(true);\n      expect(locals.contains('notPresent')).toBe(false);\n    });\n\n    it('should support setting keys', () => {\n      locals.set('key', 'bar');\n      expect(locals.get('key')).toBe('bar');\n    });\n\n    it('should not support setting keys that are not present already', () => {\n      expect(() => locals.set('notPresent', 'bar')).toThrowError();\n    });\n\n    it('should clearValues', () => {\n      locals.clearValues();\n      expect(locals.get('key')).toBe(null);\n    });\n  })\n}\n"]}