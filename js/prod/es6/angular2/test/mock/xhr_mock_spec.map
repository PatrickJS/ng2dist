{"version":3,"sources":["xhr_mock_spec.js"],"names":[],"mappings":"AAAA,KAAO,EACL,kBAAiB;AACjB,WAAS;AACT,UAAQ;AACR,SAAO;AACP,GAAC;AACD,OAAK;AACL,IAAE;AACF,OAAK;AACL,WAAS;AACT,GAAC,CACH,KAAO,oBAAkB,CAAC;AAC1B,KAAO,EAAC,OAAM,CAAC,KAAO,6BAA2B,CAAC;AAClD,KAAO,EAAC,cAAa;AAAG,QAAM,CAAC,KAAO,4BAA0B,CAAC;AACjE,KAAO,EAAC,SAAQ,CAAC,KAAO,2BAAyB,CAAC;AAElD,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAO,AAAC,CAAC,SAAQ,CAAG,EAAC,AAAD,IAAM;AACxB,AAAI,MAAA,CAAA,GAAE,CAAC;AAEP,aAAS,AAAC,CAAC,CAAC,AAAD,IAAM;AACf,QAAE,EAAI,IAAI,QAAM,AAAC,EAAC,CAAC;IACrB,CAAC,CAAC;AAEF,WAAS,eAAa,CAAE,OAAM,AAAS,CAAG,CAAA,GAAE,AAAQ,CAAG,CAAA,QAAO,AAAQ,CAAG,CAAA,IAAG,EAAI,KAAG,CAAG;AACpF,aAAS,WAAS,CAAE,IAAG,AAAQ,CAAG;AAChC,WAAI,QAAO,IAAM,KAAG,CAAG;AACrB,cAAM,wBAAuB,GAAE,OAAQ,IAAG,EAAE,CAAC;QAC/C,KAAO;AACL,eAAK,AAAC,CAAC,IAAG,CAAC,QAAQ,AAAC,CAAC,QAAO,CAAC,CAAC;AAC9B,aAAI,SAAQ,AAAC,CAAC,IAAG,CAAC;AAAG,eAAG,AAAC,EAAC,CAAC;AAAA,QAC7B;AAAA,MACF;AAAA,AAhCN,WAAK,eAAe,AAAC,0BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,kBAD1B,MAAK,KAAgB,UAC4B;QAAC,CAAC,CAAC,CAAC;AAiC/C,aAAS,QAAM,CAAE,KAAI,AAAQ,CAAG;AAC9B,WAAI,QAAO,IAAM,KAAG,CAAG;AACrB,cAAM,qBAAoB,GAAE,EAAE,CAAC;QACjC,KAAO;AACL,eAAK,AAAC,CAAC,KAAI,CAAC,QAAQ,AAAC,CAAC,kBAAkB,GAAE,EAAE,CAAC,CAAC;AAC9C,aAAI,SAAQ,AAAC,CAAC,IAAG,CAAC;AAAG,eAAG,AAAC,EAAC,CAAC;AAAA,QAC7B;AAAA,MACF;AAAA,AAzCN,WAAK,eAAe,AAAC,uBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,kBAD1B,MAAK,KAAgB,UAC4B;QAAC,CAAC,CAAC,CAAC;AA0C/C,mBAAa,KAAK,AAAC,CAAC,OAAM,CAAG,WAAS,CAAG,QAAM,CAAC,CAAC;IACnD;AAAA,AA5CJ,SAAK,eAAe,AAAC,8BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,gBAuBW,OAAM,IAxB3C,MAAK,KAAgB,WAArB,MAAK,KAAgB,cAC4B;MAAC,CAAC,CAAC,CAAC;AA6CjD,KAAC,AAAC,CAAC,+CAA8C,CAAG,CAAA,MAAK,AAAC,CAAC,CAAC,kBAAiB,CAAC,CAAG,EAAC,KAAI,IAAM;AAC1F,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,AAAI,QAAA,CAAA,QAAO,EAAI,MAAI,CAAC;AACpB,QAAE,KAAK,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACvB,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,SAAO,CAAG,EAAC,AAAD,IAAM,CAAA,KAAI,KAAK,AAAC,EAAC,CAAC,CAAC;AAC/D,QAAE,MAAM,AAAC,EAAC,CAAC;IACb,CAAC,CAAC,CAAC;AAEH,KAAC,AAAC,CAAC,6CAA4C,CAAG,CAAA,MAAK,AAAC,CAAC,CAAC,kBAAiB,CAAC,CAAG,EAAC,KAAI,IAAM;AACxF,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,AAAI,QAAA,CAAA,QAAO,EAAI,KAAG,CAAC;AACnB,QAAE,KAAK,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACvB,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,SAAO,CAAG,EAAC,AAAD,IAAM,CAAA,KAAI,KAAK,AAAC,EAAC,CAAC,CAAC;AAC/D,QAAE,MAAM,AAAC,EAAC,CAAC;IACb,CAAC,CAAC,CAAC;AAEH,KAAC,AAAC,CAAC,gDAA+C,CAAG,CAAA,MAAK,AAAC,CAAC,CAAC,kBAAiB,CAAC,CAAG,EAAC,KAAI,IAAM;AAC3F,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,AAAI,QAAA,CAAA,QAAO,EAAI,MAAI,CAAC;AACpB,QAAE,OAAO,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACzB,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,SAAO,CAAG,EAAC,AAAD,IAAM,CAAA,KAAI,KAAK,AAAC,EAAC,CAAC,CAAC;AAC/D,QAAE,MAAM,AAAC,EAAC,CAAC;IACb,CAAC,CAAC,CAAC;AAEH,KAAC,AAAC,CAAC,8CAA6C,CAAG,CAAA,MAAK,AAAC,CAAC,CAAC,kBAAiB,CAAC,CAAG,EAAC,KAAI,IAAM;AACzF,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,AAAI,QAAA,CAAA,QAAO,EAAI,KAAG,CAAC;AACnB,QAAE,OAAO,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACzB,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,SAAO,CAAG,EAAC,AAAD,IAAM,CAAA,KAAI,KAAK,AAAC,EAAC,CAAC,CAAC;AAC/D,QAAE,MAAM,AAAC,EAAC,CAAC;IACb,CAAC,CAAC,CAAC;AAEH,KAAC,AAAC,CAAC,+BAA8B,CAAG,EAAC,AAAD,IAAM;AACxC,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,AAAI,QAAA,CAAA,QAAO,EAAI,MAAI,CAAC;AACpB,QAAE,OAAO,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACzB,QAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAC;AACZ,QAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAC;AACZ,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM;AACX,UAAE,MAAM,AAAC,EAAC,CAAC;MACb,CAAC,aAAa,AAAC,CAAC,yBAAwB,CAAC,CAAC;IAC5C,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,+CAA8C,CAAG,CAAA,MAAK,AAAC,CAAC,CAAC,kBAAiB,CAAC,CAAG,EAAC,KAAI,IAAM;AAC1F,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,QAAE,KAAK,AAAC,CAAC,GAAE,CAAG,OAAK,CAAC,CAAC;AACrB,QAAE,OAAO,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACzB,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,SAAO,CAAC,CAAC;AAC3C,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,OAAK,CAAG,EAAC,AAAD,IAAM,CAAA,KAAI,KAAK,AAAC,EAAC,CAAC,CAAC;AAC7D,QAAE,MAAM,AAAC,EAAC,CAAC;IACb,CAAC,CAAC,CAAC;AAEH,KAAC,AAAC,CAAC,2DAA0D,CAAG,EAAC,AAAD,IAAM;AACpE,QAAE,IAAI,AAAC,CAAC,MAAK,CAAC,CAAC;AACf,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM;AACX,UAAE,MAAM,AAAC,EAAC,CAAC;MACb,CAAC,aAAa,AAAC,CAAC,yBAAwB,CAAC,CAAC;IAC5C,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,gEAA+D,CAAG,EAAC,AAAD,IAAM;AACzE,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM;AACX,UAAE,MAAM,AAAC,EAAC,CAAC;MACb,CAAC,aAAa,AAAC,CAAC,8BAA6B,CAAC,CAAC;IACjD,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,2CAA0C,CAAG,EAAC,AAAD,IAAM;AACpD,QAAE,OAAO,AAAC,CAAC,MAAK,CAAG,MAAI,CAAC,CAAC;AACzB,QAAE,KAAK,AAAC,CAAC,MAAK,CAAG,MAAI,CAAC,CAAC;AACvB,QAAE,IAAI,AAAC,CAAC,MAAK,CAAC,CAAC;AACf,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM;AACX,UAAE,MAAM,AAAC,EAAC,CAAC;MACb,CAAC,aAAa,AAAC,CAAC,4BAA2B,CAAC,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAA","file":"angular2/test/mock/xhr_mock_spec.es6","sourcesContent":["import {\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  el,\n  expect,\n  iit,\n  inject,\n  IS_DARTIUM,\n  it,\n} from 'angular2/test_lib';\nimport {MockXHR} from 'angular2/src/mock/xhr_mock';\nimport {PromiseWrapper, Promise} from 'angular2/src/facade/async';\nimport {isPresent} from 'angular2/src/facade/lang';\n\nexport function main() {\n  describe('MockXHR', () => {\n    var xhr;\n\n    beforeEach(() => {\n      xhr = new MockXHR();\n    });\n\n    function expectResponse(request: Promise, url: string, response: string, done = null) {\n      function onResponse(text: string) {\n        if (response === null) {\n          throw `Unexpected response ${url} -> ${text}`;\n        } else {\n          expect(text).toEqual(response);\n          if (isPresent(done)) done();\n        }\n      }\n\n      function onError(error: string) {\n        if (response !== null) {\n          throw `Unexpected error ${url}`;\n        } else {\n          expect(error).toEqual(`Failed to load ${url}`);\n          if (isPresent(done)) done();\n        }\n      }\n\n      PromiseWrapper.then(request, onResponse, onError);\n    }\n\n    it('should return a response from the definitions', inject([AsyncTestCompleter], (async) => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.when(url, response);\n      expectResponse(xhr.get(url), url, response, () => async.done());\n      xhr.flush();\n    }));\n\n    it('should return an error from the definitions', inject([AsyncTestCompleter], (async) => {\n      var url = '/foo';\n      var response = null;\n      xhr.when(url, response);\n      expectResponse(xhr.get(url), url, response, () => async.done());\n      xhr.flush();\n    }));\n\n    it('should return a response from the expectations', inject([AsyncTestCompleter], (async) => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.expect(url, response);\n      expectResponse(xhr.get(url), url, response, () => async.done());\n      xhr.flush();\n    }));\n\n    it('should return an error from the expectations', inject([AsyncTestCompleter], (async) => {\n      var url = '/foo';\n      var response = null;\n      xhr.expect(url, response);\n      expectResponse(xhr.get(url), url, response, () => async.done());\n      xhr.flush();\n    }));\n\n    it('should not reuse expectations', () => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.expect(url, response);\n      xhr.get(url);\n      xhr.get(url);\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unexpected request /foo');\n    });\n\n    it('should return expectations before definitions', inject([AsyncTestCompleter], (async) => {\n      var url = '/foo';\n      xhr.when(url, 'when');\n      xhr.expect(url, 'expect');\n      expectResponse(xhr.get(url), url, 'expect');\n      expectResponse(xhr.get(url), url, 'when', () => async.done());\n      xhr.flush();\n    }));\n\n    it('should throw when there is no definitions or expectations', () => {\n      xhr.get('/foo');\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unexpected request /foo');\n    });\n\n    it('should throw when flush is called without any pending requests', () => {\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('No pending requests to flush');\n    });\n\n    it('should throw on unstatisfied expectations', () => {\n      xhr.expect('/foo', 'bar');\n      xhr.when('/bar', 'foo');\n      xhr.get('/bar');\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unsatisfied requests: /foo');\n    });\n  });\n}\n"]}