{"version":3,"sources":["ruler_spec.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,kBAAiB;AAAG,OAAK;AAAG,UAAQ;AAAG,SAAO;AAAG,GAAC;AAAG,IAAE;AAAG,IAAE;AAAG,OAAK;AAAG,UAAQ,CAAC,KAAO,oBAAkB,CAAC;AAElH,KAAO,EAAC,GAAE;AAAG,WAAS,CAAC,KAAO,+BAA6B,CAAC;AAC5D,KAAO,EAAC,SAAQ,CAAC,KAAO,wCAAsC,CAAC;AAE/D,KAAO,EAAC,KAAI;AAAG,UAAQ,CAAC,KAAO,8BAA4B,CAAC;AAC5D,KAAO,EAAC,eAAc,CAAC,KAAO,mBAAiB,CAAC;AAEhD,IAAM,eAAa,QAAU,WAAS;AAEpC,YAAU,CAAE,IAAG,CAAG;AAChB,QAAI,AAAC,EAAC,CAAC;AACP,OAAG,KAAK,EAAI,KAAG,CAAC;EAClB;AAAA,AAEA,sBAAoB,CAAE,GAAE,CAAG;AACzB,SAAO,CAAA,IAAG,KAAK,CAAC;EAClB;AAAA,AACF;AAEA,OAAS,iBAAe,CAAE,IAAG,AAAW,CAAG,CAAA,IAAG,CAAG,CAAA,KAAI,CAAG,CAAA,GAAE,CAAG,CAAA,MAAK,CAAG,CAAA,KAAI,CAAG,CAAA,MAAK,CAAG;AAClF,OAAK,AAAC,CAAC,IAAG,KAAK,CAAC,QAAQ,AAAC,CAAC,IAAG,CAAC,CAAC;AAC/B,OAAK,AAAC,CAAC,IAAG,MAAM,CAAC,QAAQ,AAAC,CAAC,KAAI,CAAC,CAAC;AACjC,OAAK,AAAC,CAAC,IAAG,IAAI,CAAC,QAAQ,AAAC,CAAC,GAAE,CAAC,CAAC;AAC7B,OAAK,AAAC,CAAC,IAAG,OAAO,CAAC,QAAQ,AAAC,CAAC,MAAK,CAAC,CAAC;AACnC,OAAK,AAAC,CAAC,IAAG,MAAM,CAAC,QAAQ,AAAC,CAAC,KAAI,CAAC,CAAC;AACjC,OAAK,AAAC,CAAC,IAAG,OAAO,CAAC,QAAQ,AAAC,CAAC,MAAK,CAAC,CAAC;AACrC;AAAA,AA3BA,KAAK,eAAe,AAAC,gCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAmBM,SAAQ,2BAnBS;EAAC,CAAC,CAAC,CAAC;AA4BrD,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AAErB,SAAO,AAAC,CAAC,eAAc,CAAG,EAAC,AAAD,IAAM;AAE9B,KAAC,AAAC,CAAC,mCAAkC,CACnC,CAAA,MAAK,AAAC,CAAC,CAAC,kBAAiB,CAAC,CAAG,EAAC,KAAI,IAAM;AACtC,AAAI,QAAA,CAAA,KAAI,EAAI,IAAI,MAAI,AAAC,CAAC,GAAI,eAAa,AAAC,CAAC,eAAc,AAAC,CAAC,EAAC,CAAG,GAAC,CAAG,IAAE,CAAG,IAAE,CAAC,CAAC,CAAC,CAAC;AAE5E,UAAI,QAAQ,AAAC,CAAC,GAAI,cAAY,AAAC,CAAC,IAAG,CAAC,CAAC,KAAK,AAAC,CAAC,CAAC,IAAG,IAAM;AACpD,uBAAe,AAAC,CAAC,IAAG,CAAG,GAAC,CAAG,IAAE,CAAG,GAAC,CAAG,IAAE,CAAG,IAAE,CAAG,IAAE,CAAC,CAAC;AAClD,YAAI,KAAK,AAAC,EAAC,CAAC;MACd,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AAGL,KAAC,AAAC,CAAC,0FAAyF,CAC1F,CAAA,MAAK,AAAC,CAAC,CAAC,kBAAiB,CAAC,CAAG,EAAC,KAAI,IAAM;AACtC,AAAI,QAAA,CAAA,KAAI,EAAI,IAAI,MAAI,AAAC,CAAC,GAAE,CAAC,CAAC;AAE1B,UAAI,QAAQ,AAAC,CAAC,GAAI,cAAY,AAAC,CAAC,GAAE,cAAc,AAAC,CAAC,KAAI,CAAC,CAAC,CAAC,KAAK,AAAC,CAAC,CAAC,IAAG,IAAM;AAExE,uBAAe,AAAC,CAAC,IAAG,CAAG,EAAA,CAAG,EAAA,CAAG,EAAA,CAAG,EAAA,CAAG,EAAA,CAAG,EAAA,CAAC,CAAC;AACxC,YAAI,KAAK,AAAC,EAAC,CAAC;MACd,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;EAEL,CAAC,CAAC;AACJ;AAAA,AAEA,IAAM,cAAY,QAAU,UAAQ;AAGlC,YAAU,CAAE,UAAS,CAAG;AACtB,QAAI,AAAC,CAAC,IAAG,CAAG,KAAG,CAAC,CAAC;AACjB,OAAG,YAAY,EAAI,WAAS,CAAC;EAC/B;AAAA,AAEA,IAAI,WAAS,EAAI;AACf,SAAO,CAAA,IAAG,YAAY,CAAC;EACzB;AAAA,AACF;AAAA","file":"angular2/test/services/ruler_spec.es6","sourcesContent":["import {AsyncTestCompleter, inject, ddescribe, describe, it, iit, xit, expect, SpyObject} from 'angular2/test_lib';\n\nimport {DOM, DomAdapter} from 'angular2/src/dom/dom_adapter';\nimport {NgElement} from 'angular2/src/core/compiler/ng_element';\n\nimport {Ruler, Rectangle} from 'angular2/src/services/ruler';\nimport {createRectangle} from './rectangle_mock';\n\nclass DomAdapterMock extends DomAdapter {\n  rect;\n  constructor(rect) {\n    super();\n    this.rect = rect;\n  }\n\n  getBoundingClientRect(elm) {\n    return this.rect;\n  }\n}\n\nfunction assertDimensions(rect: Rectangle, left, right, top, bottom, width, height) {\n  expect(rect.left).toEqual(left);\n  expect(rect.right).toEqual(right);\n  expect(rect.top).toEqual(top);\n  expect(rect.bottom).toEqual(bottom);\n  expect(rect.width).toEqual(width);\n  expect(rect.height).toEqual(height);\n}\n\nexport function main() {\n\n  describe('ruler service', () => {\n\n    it('should allow measuring NgElements',\n      inject([AsyncTestCompleter], (async) => {\n        var ruler = new Ruler(new DomAdapterMock(createRectangle(10, 20, 200, 100)));\n\n        ruler.measure(new FakeNgElement(null)).then((rect) => {\n          assertDimensions(rect, 10, 210, 20, 120, 200, 100);\n          async.done();\n        });\n      }));\n\n\n    it('should return 0 for all rectangle values while measuring elements in a document fragment',\n      inject([AsyncTestCompleter], (async) => {\n        var ruler = new Ruler(DOM);\n\n        ruler.measure(new FakeNgElement(DOM.createElement('div'))).then((rect) => {\n          //here we are using an element created in a doc fragment so all the measures will come back as 0\n          assertDimensions(rect, 0, 0, 0, 0, 0, 0);\n          async.done();\n        });\n    }));\n\n  });\n}\n\nclass FakeNgElement extends NgElement {\n  _domElement;\n\n  constructor(domElement) {\n    super(null, null);\n    this._domElement = domElement;\n  }\n\n  get domElement() {\n    return this._domElement;\n  }\n}"]}