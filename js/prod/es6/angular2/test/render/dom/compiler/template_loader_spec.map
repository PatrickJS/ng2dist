{"version":3,"sources":["template_loader_spec.js"],"names":[],"mappings":"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","file":"angular2/test/render/dom/compiler/template_loader_spec.es6","sourcesContent":["import {\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  el,\n  expect,\n  iit,\n  inject,\n  it,\n  xit,\n} from 'angular2/test_lib';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\nimport {TemplateLoader} from 'angular2/src/render/dom/compiler/template_loader';\nimport {UrlResolver} from 'angular2/src/services/url_resolver';\n\nimport {ViewDefinition} from 'angular2/src/render/api';\nimport {PromiseWrapper} from 'angular2/src/facade/async';\nimport {MockXHR} from 'angular2/src/mock/xhr_mock';\n\nexport function main() {\n  describe('TemplateLoader', () => {\n    var loader, xhr;\n\n    beforeEach(() => {\n      xhr = new MockXHR();\n      loader = new TemplateLoader(xhr, new FakeUrlResolver());\n    });\n\n    it('should load inline templates', inject([AsyncTestCompleter], (async) => {\n      var template = new ViewDefinition({template: 'template template'});\n      loader.load(template).then( (el) => {\n        expect(DOM.content(el)).toHaveText('template template');\n        async.done();\n      });\n    }));\n\n    it('should load templates through XHR', inject([AsyncTestCompleter], (async) => {\n      xhr.expect('base/foo', 'xhr template');\n      var template = new ViewDefinition({absUrl: 'base/foo'});\n      loader.load(template).then((el) => {\n        expect(DOM.content(el)).toHaveText('xhr template');\n        async.done();\n      });\n      xhr.flush();\n    }));\n\n    it('should cache template loaded through XHR', inject([AsyncTestCompleter], (async) => {\n      var firstEl;\n      xhr.expect('base/foo', 'xhr template');\n      var template = new ViewDefinition({absUrl: 'base/foo'});\n      loader.load(template)\n        .then((el) => {\n          firstEl = el;\n          return loader.load(template);\n        })\n        .then((el) =>{\n          expect(el).toBe(firstEl);\n          expect(DOM.content(el)).toHaveText('xhr template');\n          async.done();\n        });\n      xhr.flush();\n    }));\n\n    it('should throw when no template is defined', () => {\n      var template =  new ViewDefinition({template: null, absUrl: null});\n      expect(() => loader.load(template))\n        .toThrowError('View should have either the url or template property set');\n    });\n\n    it('should return a rejected Promise when xhr loading fails', inject([AsyncTestCompleter], (async) => {\n      xhr.expect('base/foo', null);\n      var template = new ViewDefinition({absUrl: 'base/foo'});\n      PromiseWrapper.then(loader.load(template),\n        function(_) { throw 'Unexpected response'; },\n        function(error) {\n          expect(error).toEqual('Failed to load base/foo');\n          async.done();\n        }\n      )\n      xhr.flush();\n    }));\n\n  });\n}\n\nclass SomeComponent {\n}\n\nclass FakeUrlResolver extends UrlResolver {\n  constructor() {\n    super();\n  }\n\n  resolve(baseUrl: string, url: string): string {\n    return baseUrl + url;\n  }\n}\n"]}