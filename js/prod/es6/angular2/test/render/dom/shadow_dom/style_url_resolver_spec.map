{"version":3,"sources":["style_url_resolver_spec.js"],"names":[],"mappings":"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","file":"angular2/test/render/dom/shadow_dom/style_url_resolver_spec.es6","sourcesContent":["import {describe, it, expect, beforeEach, ddescribe, iit, xit, el} from 'angular2/test_lib';\nimport {StyleUrlResolver} from 'angular2/src/render/dom/shadow_dom/style_url_resolver';\n\nimport {UrlResolver} from 'angular2/src/services/url_resolver';\n\nexport function main() {\n  describe('StyleUrlResolver', () => {\n    it('should resolve \"url()\" urls', () => {\n      var styleUrlResolver = new StyleUrlResolver(new FakeUrlResolver());\n      var css = `\n      .foo {\n        background-image: url(\"double.jpg\");\n        background-image: url('simple.jpg');\n        background-image: url(noquote.jpg);\n      }`;\n      var expectedCss = `\n      .foo {\n        background-image: url('base/double.jpg');\n        background-image: url('base/simple.jpg');\n        background-image: url('base/noquote.jpg');\n      }`;\n\n      var resolvedCss = styleUrlResolver.resolveUrls(css, 'base');\n      expect(resolvedCss).toEqual(expectedCss);\n    });\n\n    it('should resolve \"@import\" urls', () => {\n      var styleUrlResolver = new StyleUrlResolver(new FakeUrlResolver());\n      var css = `\n      @import '1.css';\n      @import \"2.css\";\n      `;\n      var expectedCss = `\n      @import 'base/1.css';\n      @import 'base/2.css';\n      `;\n\n      var resolvedCss = styleUrlResolver.resolveUrls(css, 'base');\n      expect(resolvedCss).toEqual(expectedCss);\n    });\n\n    it('should resolve \"@import url()\" urls', () => {\n      var styleUrlResolver = new StyleUrlResolver(new FakeUrlResolver());\n      var css = `\n      @import url('3.css');\n      @import url(\"4.css\");\n      @import url(5.css);\n      `;\n      var expectedCss = `\n      @import url('base/3.css');\n      @import url('base/4.css');\n      @import url('base/5.css');\n      `;\n\n      var resolvedCss = styleUrlResolver.resolveUrls(css, 'base');\n      expect(resolvedCss).toEqual(expectedCss);\n    });\n\n    it('should support media query in \"@import\"', () => {\n      var styleUrlResolver = new StyleUrlResolver(new FakeUrlResolver());\n      var css = `\n      @import 'print.css' print;\n      @import url(print.css) print;\n      `;\n      var expectedCss = `\n      @import 'base/print.css' print;\n      @import url('base/print.css') print;\n      `;\n\n      var resolvedCss = styleUrlResolver.resolveUrls(css, 'base');\n      expect(resolvedCss).toEqual(expectedCss);\n    });\n  });\n}\n\nclass FakeUrlResolver extends UrlResolver {\n  resolve(baseUrl: string, url: string): string {\n    return baseUrl + '/' + url;\n  }\n}\n"]}