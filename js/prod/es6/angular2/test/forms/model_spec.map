{"version":3,"sources":["model_spec.js"],"names":[],"mappings":"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","file":"angular2/test/forms/model_spec.es6","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, el,\n  AsyncTestCompleter, inject} from 'angular2/test_lib';\nimport {ControlGroup, Control, ControlArray, Validators} from 'angular2/forms';\nimport {ObservableWrapper} from 'angular2/src/facade/async';\nimport {ListWrapper} from 'angular2/src/facade/collection';\n\nexport function main() {\n  describe(\"Form Model\", () => {\n    describe(\"Control\", () => {\n      describe(\"validator\", () => {\n        it(\"should run validator with the initial value\", () => {\n          var c = new Control(\"value\", Validators.required);\n          expect(c.valid).toEqual(true);\n        });\n\n        it(\"should rerun the validator when the value changes\", () => {\n          var c = new Control(\"value\", Validators.required);\n          c.updateValue(null);\n          expect(c.valid).toEqual(false);\n        });\n\n        it(\"should return errors\", () => {\n          var c = new Control(null, Validators.required);\n          expect(c.errors).toEqual({\"required\" : true});\n        });\n      });\n\n      describe(\"pristine\", () => {\n        it(\"should be true after creating a control\", () => {\n          var c = new Control(\"value\");\n          expect(c.pristine).toEqual(true);\n        });\n\n        it(\"should be false after changing the value of the control\", () => {\n          var c = new Control(\"value\");\n          c.updateValue(\"new value\");\n          expect(c.pristine).toEqual(false);\n        });\n      });\n\n      describe(\"dirty\", () => {\n        it(\"should be false after creating a control\", () => {\n          var c = new Control(\"value\");\n          expect(c.dirty).toEqual(false);\n        });\n\n        it(\"should be true after changing the value of the control\", () => {\n          var c = new Control(\"value\");\n          c.updateValue(\"new value\");\n          expect(c.dirty).toEqual(true);\n        });\n      });\n\n      describe(\"valueChanges\", () => {\n        var c;\n\n        beforeEach(() => {\n          c = new Control(\"old\");\n        });\n\n        it(\"should fire an event after the value has been updated\",  inject([AsyncTestCompleter], (async) => {\n          ObservableWrapper.subscribe(c.valueChanges, (value) => {\n            expect(c.value).toEqual('new');\n            expect(value).toEqual('new');\n            async.done();\n          });\n          c.updateValue(\"new\");\n        }));\n\n        it(\"should return a cold observable\",  inject([AsyncTestCompleter], (async) => {\n          c.updateValue(\"will be ignored\");\n          ObservableWrapper.subscribe(c.valueChanges, (value) => {\n            expect(value).toEqual('new');\n            async.done();\n          });\n          c.updateValue(\"new\");\n        }));\n      });\n    });\n\n    describe(\"ControlGroup\", () => {\n      describe(\"value\", () => {\n        it(\"should be the reduced value of the child controls\", () => {\n          var g = new ControlGroup({\n            \"one\": new Control(\"111\"),\n            \"two\": new Control(\"222\")\n          });\n          expect(g.value).toEqual({\"one\": \"111\", \"two\": \"222\"});\n        });\n\n        it(\"should be empty when there are no child controls\", () => {\n          var g = new ControlGroup({});\n          expect(g.value).toEqual({});\n        });\n\n        it(\"should support nested groups\", () => {\n          var g = new ControlGroup({\n            \"one\": new Control(\"111\"),\n            \"nested\": new ControlGroup({\n              \"two\" : new Control(\"222\")\n            })\n          });\n          expect(g.value).toEqual({\"one\": \"111\", \"nested\" : {\"two\": \"222\"}});\n\n          g.controls[\"nested\"].controls[\"two\"].updateValue(\"333\");\n\n          expect(g.value).toEqual({\"one\": \"111\", \"nested\" : {\"two\": \"333\"}});\n        });\n      });\n\n      describe(\"validator\", () => {\n        it(\"should run the validator with the initial value (valid)\", () => {\n          var g = new ControlGroup({\n            \"one\": new Control('value', Validators.required)\n          });\n\n          expect(g.valid).toEqual(true);\n\n          expect(g.errors).toEqual(null);\n        });\n\n        it(\"should run the validator with the initial value (invalid)\", () => {\n          var one = new Control(null, Validators.required);\n          var g = new ControlGroup({\"one\": one});\n\n          expect(g.valid).toEqual(false);\n\n          expect(g.errors).toEqual({\"required\": [one]});\n        });\n\n        it(\"should run the validator with the value changes\", () => {\n          var c = new Control(null, Validators.required);\n          var g = new ControlGroup({\"one\": c});\n\n          c.updateValue(\"some value\");\n\n          expect(g.valid).toEqual(true);\n          expect(g.errors).toEqual(null);\n        });\n      });\n\n      describe(\"pristine\", () => {\n        it(\"should be true after creating a control\", () => {\n          var c = new Control('value');\n          var g = new ControlGroup({\"one\": c});\n\n          expect(g.pristine).toEqual(true);\n        });\n\n        it(\"should be false after changing the value of the control\", () => {\n          var c = new Control('value');\n          var g = new ControlGroup({\"one\": c});\n          c.updateValue('new value');\n\n          expect(g.pristine).toEqual(false);\n        });\n      });\n\n      describe(\"optional components\", () => {\n        describe(\"contains\", () => {\n          var group;\n\n          beforeEach(() => {\n            group = new ControlGroup({\n              \"required\": new Control(\"requiredValue\"),\n              \"optional\": new Control(\"optionalValue\")\n            }, {\n              \"optional\": false\n            });\n          });\n\n          // rename contains into has\n          it(\"should return false when the component is not included\", () => {\n            expect(group.contains(\"optional\")).toEqual(false);\n          })\n\n          it(\"should return false when there is no component with the given name\", () => {\n            expect(group.contains(\"something else\")).toEqual(false);\n          });\n\n          it(\"should return true when the component is included\", () => {\n            expect(group.contains(\"required\")).toEqual(true);\n\n            group.include(\"optional\");\n\n            expect(group.contains(\"optional\")).toEqual(true);\n          });\n        });\n\n        it(\"should not include an inactive component into the group value\", () => {\n          var group = new ControlGroup({\n            \"required\": new Control(\"requiredValue\"),\n            \"optional\": new Control(\"optionalValue\")\n          }, {\n            \"optional\": false\n          });\n\n          expect(group.value).toEqual({\"required\" : \"requiredValue\"});\n\n          group.include(\"optional\");\n\n          expect(group.value).toEqual({\"required\" : \"requiredValue\", \"optional\" : \"optionalValue\"});\n        });\n\n        it(\"should not run Validators on an inactive component\", () => {\n          var group = new ControlGroup({\n            \"required\": new Control(\"requiredValue\", Validators.required),\n            \"optional\": new Control(\"\", Validators.required)\n          }, {\n            \"optional\": false\n          });\n\n          expect(group.valid).toEqual(true);\n\n          group.include(\"optional\");\n\n          expect(group.valid).toEqual(false);\n        });\n\n        describe(\"valueChanges\", () => {\n          var g, c1, c2;\n\n          beforeEach(() => {\n            c1 = new Control(\"old1\");\n            c2 = new Control(\"old2\")\n            g = new ControlGroup({\n              \"one\" : c1, \"two\" : c2\n            }, {\n              \"two\" : true\n            });\n          });\n\n          it(\"should fire an event after the value has been updated\", inject([AsyncTestCompleter], (async) => {\n            ObservableWrapper.subscribe(g.valueChanges, (value) => {\n              expect(g.value).toEqual({'one' : 'new1', 'two' : 'old2'});\n              expect(value).toEqual({'one' : 'new1', 'two' : 'old2'});\n              async.done();\n            });\n            c1.updateValue(\"new1\");\n          }));\n\n          it(\"should fire an event after the control's observable fired an event\", inject([AsyncTestCompleter], (async) => {\n            var controlCallbackIsCalled = false;\n\n            ObservableWrapper.subscribe(c1.valueChanges, (value) => {\n              controlCallbackIsCalled = true;\n            });\n\n            ObservableWrapper.subscribe(g.valueChanges, (value) => {\n              expect(controlCallbackIsCalled).toBe(true);\n              async.done();\n            });\n\n            c1.updateValue(\"new1\");\n          }));\n\n          it(\"should fire an event when a control is excluded\", inject([AsyncTestCompleter], (async) => {\n            ObservableWrapper.subscribe(g.valueChanges, (value) => {\n              expect(value).toEqual({'one' : 'old1'});\n              async.done();\n            });\n\n            g.exclude(\"two\");\n          }));\n\n          it(\"should fire an event when a control is included\", inject([AsyncTestCompleter], (async) => {\n            g.exclude(\"two\");\n\n            ObservableWrapper.subscribe(g.valueChanges, (value) => {\n              expect(value).toEqual({'one' : 'old1', 'two' : 'old2'});\n              async.done();\n            });\n\n            g.include(\"two\");\n          }));\n\n          it(\"should fire an event every time a control is updated\", inject([AsyncTestCompleter], (async) => {\n            var loggedValues = [];\n\n            ObservableWrapper.subscribe(g.valueChanges, (value) => {\n              ListWrapper.push(loggedValues, value);\n\n              if (loggedValues.length == 2) {\n                expect(loggedValues).toEqual([\n                  {\"one\" : \"new1\", \"two\" : \"old2\"},\n                  {\"one\" : \"new1\", \"two\" : \"new2\"}\n                ])\n                async.done();\n              }\n            });\n\n            c1.updateValue(\"new1\");\n            c2.updateValue(\"new2\");\n          }));\n\n          xit(\"should not fire an event when an excluded control is updated\", inject([AsyncTestCompleter], (async) => {\n            // hard to test without hacking zones\n          }));\n        });\n      });\n\n      describe(\"ControlArray\", () => {\n        describe(\"adding/removing\", () => {\n          var a;\n          var c1, c2, c3;\n\n          beforeEach(() => {\n            a = new ControlArray([]);\n            c1 = new Control(1);\n            c2 = new Control(2);\n            c3 = new Control(3);\n          });\n\n          it(\"should support pushing\", () => {\n            a.push(c1);\n            expect(a.length).toEqual(1);\n            expect(a.controls).toEqual([c1]);\n          });\n\n          it(\"should support removing\", () => {\n            a.push(c1);\n            a.push(c2);\n            a.push(c3);\n\n            a.removeAt(1);\n\n            expect(a.controls).toEqual([c1, c3]);\n          });\n\n          it(\"should support inserting\", () => {\n            a.push(c1);\n            a.push(c3);\n\n            a.insert(1, c2);\n\n            expect(a.controls).toEqual([c1, c2, c3]);\n          });\n        });\n\n        describe(\"value\", () => {\n          it(\"should be the reduced value of the child controls\", () => {\n            var a = new ControlArray([new Control(1), new Control(2)]);\n            expect(a.value).toEqual([1, 2]);\n          });\n\n          it(\"should be an empty array when there are no child controls\", () => {\n            var a = new ControlArray([]);\n            expect(a.value).toEqual([]);\n          });\n        });\n\n        describe(\"validator\", () => {\n          it(\"should run the validator with the initial value (valid)\", () => {\n            var a = new ControlArray([\n              new Control(1, Validators.required),\n              new Control(2, Validators.required)\n            ]);\n\n            expect(a.valid).toBe(true);\n            expect(a.errors).toBe(null);\n          });\n\n          it(\"should run the validator with the initial value (invalid)\", () => {\n            var a = new ControlArray([\n              new Control(1, Validators.required),\n              new Control(null, Validators.required),\n              new Control(2, Validators.required)\n            ]);\n\n            expect(a.valid).toBe(false);\n            expect(a.errors).toEqual({\"required\": [a.controls[1]]});\n          });\n\n          it(\"should run the validator when the value changes\", () => {\n            var a = new ControlArray([]);\n            var c = new Control(null, Validators.required);\n            a.push(c);\n            expect(a.valid).toBe(false);\n\n            c.updateValue(\"some value\");\n\n            expect(a.valid).toBe(true);\n            expect(a.errors).toBe(null);\n          });\n        });\n\n        describe(\"pristine\", () => {\n          it(\"should be true after creating a control\", () => {\n            var a = new ControlArray([new Control(1)]);\n            expect(a.pristine).toBe(true);\n          });\n\n          it(\"should be false after changing the value of the control\", () => {\n            var c = new Control(1);\n            var a = new ControlArray([c]);\n\n            c.updateValue('new value');\n\n            expect(a.pristine).toEqual(false);\n          });\n        });\n\n        describe(\"valueChanges\", () => {\n          var a, c1, c2;\n\n          beforeEach(() => {\n            c1 = new Control(\"old1\");\n            c2 = new Control(\"old2\")\n            a = new ControlArray([c1, c2]);\n          });\n\n          it(\"should fire an event after the value has been updated\", inject([AsyncTestCompleter], (async) => {\n            ObservableWrapper.subscribe(a.valueChanges, (value) => {\n              expect(a.value).toEqual(['new1', 'old2']);\n              expect(value).toEqual(['new1', 'old2']);\n              async.done();\n            });\n            c1.updateValue(\"new1\");\n          }));\n\n          it(\"should fire an event after the control's observable fired an event\", inject([AsyncTestCompleter], (async) => {\n            var controlCallbackIsCalled = false;\n\n            ObservableWrapper.subscribe(c1.valueChanges, (value) => {\n              controlCallbackIsCalled = true;\n            });\n\n            ObservableWrapper.subscribe(a.valueChanges, (value) => {\n              expect(controlCallbackIsCalled).toBe(true);\n              async.done();\n            });\n\n            c1.updateValue(\"new1\");\n          }));\n\n          it(\"should fire an event when a control is removed\", inject([AsyncTestCompleter], (async) => {\n            ObservableWrapper.subscribe(a.valueChanges, (value) => {\n              expect(value).toEqual(['old1']);\n              async.done();\n            });\n\n            a.removeAt(1);\n          }));\n\n          it(\"should fire an event when a control is added\", inject([AsyncTestCompleter], (async) => {\n            a.removeAt(1);\n\n            ObservableWrapper.subscribe(a.valueChanges, (value) => {\n              expect(value).toEqual(['old1', 'old2']);\n              async.done();\n            });\n\n            a.push(c2);\n          }));\n        });\n      });\n    });\n  });\n}\n"]}