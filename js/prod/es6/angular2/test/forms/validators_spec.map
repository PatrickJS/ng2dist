{"version":3,"sources":["validators_spec.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,SAAQ;AAAG,SAAO;AAAG,GAAC;AAAG,IAAE;AAAG,IAAE;AAAG,OAAK;AAAG,WAAS;AAAG,UAAQ;AAAG,GAAC,CAAC,KAAO,oBAAkB,CAAC;AACtG,KAAO,EAAC,YAAW;AAAG,QAAM;AAAG,WAAS,CAAC,KAAO,iBAAe,CAAC;AAEhE,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAS,UAAQ,CAAE,GAAE,AAAO,CAAG,CAAA,KAAI,AAAI,CAAE;AACvC,SAAO,UAAS,CAAA,AAAQ,CAAG;AACzB,AAAI,QAAA,CAAA,CAAA,EAAI,GAAC,CAAC;AACV,MAAA,CAAE,GAAE,CAAC,EAAI,MAAI,CAAC;AACd,WAAO,EAAA,CAAC;IACV,CAAA;EACF;AAAA,AAVF,OAAK,eAAe,AAAC,yBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAD1B,MAAK,KAAgB,WAArB,MAAK,KAAgB,OAC4B;IAAC,CAAC,CAAC,CAAC;AAWnD,SAAO,AAAC,CAAC,YAAW,CAAG,EAAC,AAAD,IAAM;AAC3B,WAAO,AAAC,CAAC,UAAS,CAAG,EAAC,AAAD,IAAM;AACzB,OAAC,AAAC,CAAC,iCAAgC,CAAG,EAAC,AAAD,IAAM;AAC1C,aAAK,AAAC,CAAC,UAAS,SAAS,AAAC,CAAC,GAAI,QAAM,AAAC,CAAC,EAAC,CAAC,CAAC,CAAC,QAAQ,AAAC,CAAC,CAAC,UAAS,CAAI,KAAG,CAAC,CAAC,CAAC;MAC3E,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,sBAAqB,CAAG,EAAC,AAAD,IAAM;AAC/B,aAAK,AAAC,CAAC,UAAS,SAAS,AAAC,CAAC,GAAI,QAAM,AAAC,CAAC,IAAG,CAAC,CAAC,CAAC,QAAQ,AAAC,CAAC,CAAC,UAAS,CAAI,KAAG,CAAC,CAAC,CAAC;MAC7E,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,wCAAuC,CAAG,EAAC,AAAD,IAAM;AACjD,aAAK,AAAC,CAAC,UAAS,SAAS,AAAC,CAAC,GAAI,QAAM,AAAC,CAAC,WAAU,CAAC,CAAC,CAAC,QAAQ,AAAC,CAAC,IAAG,CAAC,CAAC;MACrE,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,WAAO,AAAC,CAAC,SAAQ,CAAG,EAAC,AAAD,IAAM;AACxB,OAAC,AAAC,CAAC,+CAA8C,CAAG,EAAC,AAAD,IAAM;AACxD,AAAI,UAAA,CAAA,CAAA,EAAI,CAAA,UAAS,QAAQ,AAAC,CAAC,CAAC,SAAQ,AAAC,CAAC,GAAE,CAAG,KAAG,CAAC,CAAG,CAAA,SAAQ,AAAC,CAAC,GAAE,CAAG,KAAG,CAAC,CAAC,CAAC,CAAC;AACxE,aAAK,AAAC,CAAC,CAAA,AAAC,CAAC,GAAI,QAAM,AAAC,CAAC,EAAC,CAAC,CAAC,CAAC,QAAQ,AAAC,CAAC;AAAC,YAAE,CAAI,KAAG;AAAG,YAAE,CAAI,KAAG;AAAA,QAAC,CAAC,CAAC;MAC9D,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,qCAAoC,CAAG,EAAC,AAAD,IAAM;AAC9C,AAAI,UAAA,CAAA,CAAA,EAAI,CAAA,UAAS,QAAQ,AAAC,CAAC,CAAC,SAAQ,AAAC,CAAC,GAAE,CAAG,EAAA,CAAC,CAAG,CAAA,SAAQ,AAAC,CAAC,GAAE,CAAG,EAAA,CAAC,CAAC,CAAC,CAAC;AAClE,aAAK,AAAC,CAAC,CAAA,AAAC,CAAC,GAAI,QAAM,AAAC,CAAC,EAAC,CAAC,CAAC,CAAC,QAAQ,AAAC,CAAC,CAAC,GAAE,CAAI,EAAA,CAAC,CAAC,CAAC;MAC/C,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,mCAAkC,CAAG,EAAC,AAAD,IAAM;AAC5C,AAAI,UAAA,CAAA,CAAA,EAAI,CAAA,UAAS,QAAQ,AAAC,CAAC,CAAC,UAAS,cAAc,CAAG,CAAA,UAAS,cAAc,CAAC,CAAC,CAAC;AAChF,aAAK,AAAC,CAAC,CAAA,AAAC,CAAC,GAAI,QAAM,AAAC,CAAC,EAAC,CAAC,CAAC,CAAC,QAAQ,AAAC,CAAC,IAAG,CAAC,CAAC;MAC1C,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,WAAO,AAAC,CAAC,uBAAsB,CAAG,EAAC,AAAD,IAAM;AACtC,OAAC,AAAC,CAAC,+CAA8C,CAAG,EAAC,AAAD,IAAM;AACxD,AAAI,UAAA,CAAA,GAAE,EAAI,IAAI,QAAM,AAAC,CAAC,KAAI,CAAG,CAAA,SAAQ,AAAC,CAAC,GAAE,CAAG,KAAG,CAAC,CAAC,CAAC;AAClD,AAAI,UAAA,CAAA,GAAE,EAAI,IAAI,QAAM,AAAC,CAAC,KAAI,CAAG,CAAA,SAAQ,AAAC,CAAC,GAAE,CAAG,KAAG,CAAC,CAAC,CAAC;AAClD,AAAI,UAAA,CAAA,CAAA,EAAI,IAAI,aAAW,AAAC,CAAC;AAAC,cAAI,CAAI,IAAE;AAAG,cAAI,CAAI,IAAE;AAAA,QAAC,CAAC,CAAC;AAEpD,aAAK,AAAC,CAAC,UAAS,MAAM,AAAC,CAAC,CAAA,CAAC,CAAC,QAAQ,AAAC,CAAC;AAClC,YAAE,CAAI,EAAC,GAAE,CAAC;AACV,YAAE,CAAI,EAAC,GAAE,CAAC;AAAA,QACZ,CAAC,CAAC;MACJ,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,iDAAgD,CAAG,EAAC,AAAD,IAAM;AAC1D,AAAI,UAAA,CAAA,GAAE,EAAI,IAAI,QAAM,AAAC,CAAC,KAAI,CAAG,CAAA,SAAQ,AAAC,CAAC,GAAE,CAAG,KAAG,CAAC,CAAC,CAAC;AAClD,AAAI,UAAA,CAAA,GAAE,EAAI,IAAI,QAAM,AAAC,CAAC,KAAI,CAAC,CAAC;AAC5B,AAAI,UAAA,CAAA,CAAA,EAAI,IAAI,aAAW,AAAC,CAAC;AAAC,cAAI,CAAI,IAAE;AAAG,cAAI,CAAI,IAAE;AAAA,QAAC,CAAC,CAAC;AAEpD,aAAK,AAAC,CAAC,UAAS,MAAM,AAAC,CAAC,CAAA,CAAC,CAAC,QAAQ,AAAC,CAAC,CAClC,GAAE,CAAG,EAAC,GAAE,CAAC,CACX,CAAC,CAAC;MACJ,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,mCAAkC,CAAG,EAAC,AAAD,IAAM;AAC5C,AAAI,UAAA,CAAA,CAAA,EAAI,IAAI,aAAW,AAAC,CAAC,CACvB,KAAI,CAAI,IAAI,QAAM,AAAC,CAAC,KAAI,CAAC,CAC3B,CAAC,CAAC;AAEF,aAAK,AAAC,CAAC,UAAS,MAAM,AAAC,CAAC,CAAA,CAAC,CAAC,QAAQ,AAAC,CAAC,IAAG,CAAC,CAAC;MAC3C,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAA","file":"angular2/test/forms/validators_spec.es6","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, el} from 'angular2/test_lib';\nimport {ControlGroup, Control, Validators} from 'angular2/forms';\n\nexport function main() {\n  function validator(key:string, error:any){\n    return function(c:Control) {\n      var r = {};\n      r[key] = error;\n      return r;\n    }\n  }\n\n  describe(\"Validators\", () => {\n    describe(\"required\", () => {\n      it(\"should error on an empty string\", () => {\n        expect(Validators.required(new Control(\"\"))).toEqual({\"required\" : true});\n      });\n\n      it(\"should error on null\", () => {\n        expect(Validators.required(new Control(null))).toEqual({\"required\" : true});\n      });\n\n      it(\"should not error on a non-empty string\", () => {\n        expect(Validators.required(new Control(\"not empty\"))).toEqual(null);\n      });\n    });\n\n    describe(\"compose\", () => {\n      it(\"should collect errors from all the validators\", () => {\n        var c = Validators.compose([validator(\"a\", true), validator(\"b\", true)]);\n        expect(c(new Control(\"\"))).toEqual({\"a\" : true, \"b\" : true});\n      });\n\n      it(\"should run validators left to right\", () => {\n        var c = Validators.compose([validator(\"a\", 1), validator(\"a\", 2)]);\n        expect(c(new Control(\"\"))).toEqual({\"a\" : 2});\n      });\n\n      it(\"should return null when no errors\", () => {\n        var c = Validators.compose([Validators.nullValidator, Validators.nullValidator]);\n        expect(c(new Control(\"\"))).toEqual(null);\n      });\n    });\n\n    describe(\"controlGroupValidator\", () => {\n      it(\"should collect errors from the child controls\", () => {\n        var one = new Control(\"one\", validator(\"a\", true));\n        var two = new Control(\"one\", validator(\"b\", true));\n        var g = new ControlGroup({\"one\" : one, \"two\" : two});\n\n        expect(Validators.group(g)).toEqual({\n          \"a\" : [one],\n          \"b\" : [two]\n        });\n      });\n\n      it(\"should not include controls that have no errors\", () => {\n        var one = new Control(\"one\", validator(\"a\", true));\n        var two = new Control(\"two\");\n        var g = new ControlGroup({\"one\" : one, \"two\" : two});\n\n        expect(Validators.group(g)).toEqual({\n          \"a\": [one]\n        });\n      });\n\n      it(\"should return null when no errors\", () => {\n        var g = new ControlGroup({\n          \"one\" : new Control(\"one\")\n        });\n\n        expect(Validators.group(g)).toEqual(null);\n      });\n    });\n  });\n}"]}