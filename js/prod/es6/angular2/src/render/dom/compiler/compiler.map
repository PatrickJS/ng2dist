{"version":3,"sources":["compiler.js"],"names":[],"mappings":"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","file":"angular2/src/render/dom/compiler/compiler.es6","sourcesContent":["import {Injectable} from 'angular2/di';\n\nimport {PromiseWrapper, Promise} from 'angular2/src/facade/async';\nimport {BaseException} from 'angular2/src/facade/lang';\n\nimport {ViewDefinition, ProtoViewDto} from '../../api';\nimport {CompilePipeline} from './compile_pipeline';\nimport {TemplateLoader} from 'angular2/src/render/dom/compiler/template_loader';\nimport {CompileStepFactory, DefaultStepFactory} from './compile_step_factory';\nimport {Parser} from 'angular2/change_detection';\nimport {ShadowDomStrategy} from '../shadow_dom/shadow_dom_strategy';\n\n/**\n * The compiler loads and translates the html templates of components into\n * nested ProtoViews. To decompose its functionality it uses\n * the CompilePipeline and the CompileSteps.\n */\nexport class Compiler {\n  _templateLoader: TemplateLoader;\n  _stepFactory: CompileStepFactory;\n\n  constructor(stepFactory: CompileStepFactory, templateLoader: TemplateLoader) {\n    this._templateLoader = templateLoader;\n    this._stepFactory = stepFactory;\n  }\n\n  compile(template: ViewDefinition):Promise<ProtoViewDto> {\n    var tplPromise = this._templateLoader.load(template);\n    return PromiseWrapper.then(tplPromise,\n      (el) => this._compileTemplate(template, el),\n      (_) => { throw new BaseException(`Failed to load the template \"${template.componentId}\"`); }\n    );\n  }\n\n  _compileTemplate(template: ViewDefinition, tplElement):Promise<ProtoViewDto> {\n    var subTaskPromises = [];\n    var pipeline = new CompilePipeline(this._stepFactory.createSteps(template, subTaskPromises));\n    var compileElements;\n\n    compileElements = pipeline.process(tplElement, template.componentId);\n\n    var protoView = compileElements[0].inheritedProtoView.build();\n\n    if (subTaskPromises.length > 0) {\n      return PromiseWrapper.all(subTaskPromises).then((_) => protoView);\n    } else {\n      return PromiseWrapper.resolve(protoView);\n    }\n  }\n}\n\n@Injectable()\nexport class DefaultCompiler extends Compiler {\n  constructor(parser:Parser, shadowDomStrategy:ShadowDomStrategy, templateLoader: TemplateLoader) {\n    super(new DefaultStepFactory(parser, shadowDomStrategy), templateLoader);\n  }\n}\n"]}