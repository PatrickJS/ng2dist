{"version":3,"sources":["directive_metadata_reader.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,UAAS;AAAG,SAAO,CAAC,KAAO,cAAY,CAAC;AAChD,KAAO,EAAC,IAAG;AAAG,UAAQ;AAAG,cAAY;AAAG,UAAQ,CAAC,KAAO,2BAAyB,CAAC;AAClF,KAAO,EAAC,SAAQ;AAAG,UAAQ,CAAC,KAAO,6BAA2B,CAAC;AAC/D,KAAO,EAAC,iBAAgB,CAAC,KAAO,uBAAqB,CAAC;AACtD,KAAO,EAAC,SAAQ,CAAC,KAAO,qCAAmC,CAAC;AAG5D,KAAO,MAAM,wBAAsB;AACjC,KAAG,CAAE,IAAG,AAAK,CAAqB;AAChC,AAAI,MAAA,CAAA,WAAU,EAAI,CAAA,SAAQ,YAAY,AAAC,CAAC,IAAG,CAAC,CAAC;AAC7C,OAAI,SAAQ,AAAC,CAAC,WAAU,CAAC,CAAG;AAC1B,UAAS,GAAA,CAAA,CAAA,EAAE,EAAA,CAAG,CAAA,CAAA,EAAE,CAAA,WAAU,OAAO,CAAG,CAAA,CAAA,EAAE,CAAG;AACvC,AAAI,UAAA,CAAA,UAAS,EAAI,CAAA,WAAU,CAAE,CAAA,CAAC,CAAC;AAE/B,WAAI,UAAS,WAAa,UAAQ,CAAG;AACnC,AAAI,YAAA,CAAA,mBAAkB,EAAI,KAAG,CAAC;AAC9B,aAAI,UAAS,WAAa,UAAQ,CAAA,EAAK,CAAA,SAAQ,AAAC,CAAC,UAAS,YAAY,CAAC,CAAG;AACxE,8BAAkB,EAAI,CAAA,QAAO,QAAQ,AAAC,CAAC,UAAS,YAAY,CAAC,CAAC;UAChE;AAAA,AACA,eAAO,IAAI,kBAAgB,AAAC,CAAC,IAAG,CAAG,WAAS,CAAG,oBAAkB,CAAC,CAAC;QACrE;AAAA,MACF;AAAA,IACF;AAAA,AACA,QAAM,IAAI,cAAY,AAAC,CAAC,oCAAoC,SAAQ,AAAC,CAAC,IAAG,CAAC,EAAE,CAAC,CAAC;EAChF;AAAA,AAEF;AAAA,AA1BA,KAAK,eAAe,AAAC,wCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAKzB,WAAS,AAAC,EAAC,EALqC;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,sDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAOd,IAAG,GAPkC;EAAC,CAAC,CAAC,CAAC;AA0BrD","file":"angular2/src/core/compiler/directive_metadata_reader.es6","sourcesContent":["import {Injectable, Injector} from 'angular2/di';\nimport {Type, isPresent, BaseException, stringify} from 'angular2/src/facade/lang';\nimport {Directive, Component} from '../annotations/annotations';\nimport {DirectiveMetadata} from './directive_metadata';\nimport {reflector} from 'angular2/src/reflection/reflection';\n\n@Injectable()\nexport class DirectiveMetadataReader {\n  read(type:Type):DirectiveMetadata {\n    var annotations = reflector.annotations(type);\n    if (isPresent(annotations)) {\n      for (var i=0; i<annotations.length; i++) {\n        var annotation = annotations[i];\n\n        if (annotation instanceof Directive) {\n          var resolvedInjectables = null;\n          if (annotation instanceof Component && isPresent(annotation.injectables)) {\n            resolvedInjectables = Injector.resolve(annotation.injectables);\n          }\n          return new DirectiveMetadata(type, annotation, resolvedInjectables);\n        }\n      }\n    }\n    throw new BaseException(`No Directive annotation found on ${stringify(type)}`);\n  }\n\n}\n"]}