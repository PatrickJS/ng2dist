{"version":3,"sources":["dynamic_component_loader.js"],"names":[],"mappings":"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","file":"angular2/src/core/compiler/dynamic_component_loader.es6","sourcesContent":["import {Key, Injector, Injectable, ResolvedBinding} from 'angular2/di'\nimport {Compiler} from './compiler';\nimport {DirectiveMetadataReader} from './directive_metadata_reader';\nimport {Type, BaseException, stringify, isPresent} from 'angular2/src/facade/lang';\nimport {List} from 'angular2/src/facade/collection';\nimport {Promise} from 'angular2/src/facade/async';\nimport {Component} from 'angular2/src/core/annotations/annotations';\nimport {ViewFactory} from 'angular2/src/core/compiler/view_factory';\nimport {Renderer} from 'angular2/src/render/api';\nimport {ElementRef} from './element_injector';\nimport {AppView} from './view';\n\n/**\n * @exportedAs angular2/view\n */\nexport class ComponentRef {\n  location:ElementRef;\n  instance:any;\n  componentView:AppView;\n\n  constructor(location:ElementRef, instance:any, componentView:AppView){\n    this.location = location;\n    this.instance = instance;\n    this.componentView = componentView;\n  }\n\n  get injector() {\n    return this.location.injector;\n  }\n\n  get hostView() {\n    return this.location.hostView;\n  }\n}\n\n/**\n * Service for dynamically loading a Component into an arbitrary position in the internal Angular\n * application tree.\n *\n * @exportedAs angular2/view\n */\n@Injectable()\nexport class DynamicComponentLoader {\n  _compiler:Compiler;\n  _viewFactory:ViewFactory;\n  _renderer:Renderer;\n  _directiveMetadataReader:DirectiveMetadataReader;\n\n  constructor(compiler:Compiler, directiveMetadataReader:DirectiveMetadataReader,\n              renderer:Renderer, viewFactory:ViewFactory) {\n    this._compiler = compiler;\n    this._directiveMetadataReader = directiveMetadataReader;\n    this._renderer = renderer;\n    this._viewFactory = viewFactory\n  }\n\n  /**\n   * Loads a component into the location given by the provided ElementRef. The loaded component\n   * receives injection as if it in the place of the provided ElementRef.\n   */\n  loadIntoExistingLocation(type:Type, location:ElementRef, injector:Injector = null):Promise<ComponentRef> {\n    this._assertTypeIsComponent(type);\n\n    var directiveMetadata = this._directiveMetadataReader.read(type);\n\n    var inj = this._componentAppInjector(location, injector, directiveMetadata.resolvedInjectables);\n\n    var hostEi = location.elementInjector;\n    var hostView = location.hostView;\n\n    return this._compiler.compile(type).then(componentProtoView => {\n      var component = hostEi.dynamicallyCreateComponent(type, directiveMetadata.annotation, inj);\n      var componentView = this._instantiateAndHydrateView(componentProtoView, injector, hostEi, component);\n\n      //TODO(vsavkin): do not use component child views as we need to clear the dynamically created views\n      //same problem exists on the render side\n      hostView.addComponentChildView(componentView);\n\n      this._renderer.setDynamicComponentView(hostView.render, location.boundElementIndex, componentView.render);\n\n      // TODO(vsavkin): return a component ref that dehydrates the component view and removes it\n      // from the component child views\n      return new ComponentRef(location, component, componentView);\n    });\n  }\n\n  /**\n   * Loads a component as a child of the View given by the provided ElementRef. The loaded\n   * component receives injection normally as a hosted view.\n   *\n   * TODO(vsavkin, jelbourn): remove protoViewFactory after render layer exists.\n   */\n  loadIntoNewLocation(elementOrSelector:any, type:Type, location:ElementRef,\n                      injector:Injector = null):Promise<ComponentRef> {\n    this._assertTypeIsComponent(type);\n\n    var inj = this._componentAppInjector(location, injector, null);\n\n    //TODO(tbosch) this should always be a selector\n    return  this._compiler.compileRoot(elementOrSelector, type).then(pv => {\n      var hostView = this._instantiateAndHydrateView(pv, inj, null, new Object());\n\n      // TODO(vsavkin): return a component ref that dehydrates the host view\n      var newLocation = new ElementRef(hostView.elementInjectors[0]);\n      var component = hostView.elementInjectors[0].getComponent();\n      return new ComponentRef(newLocation, component, hostView.componentChildViews[0]);\n    });\n  }\n\n  _componentAppInjector(location, injector:Injector, resolvedBindings:List<ResolvedBinding>) {\n    var inj = isPresent(injector) ? injector : location.injector;\n    return isPresent(resolvedBindings) ? inj.createChildFromResolved(resolvedBindings) : inj;\n  }\n\n  _instantiateAndHydrateView(protoView, injector, hostElementInjector, context) {\n    var componentView = this._viewFactory.getView(protoView);\n    componentView.hydrate(injector, hostElementInjector, context, null);\n    return componentView;\n  }\n\n  /** Asserts that the type being dynamically instantiated is a Component. */\n  _assertTypeIsComponent(type:Type) {\n    var annotation = this._directiveMetadataReader.read(type).annotation;\n    if (!(annotation instanceof Component)) {\n      throw new BaseException(`Could not load '${stringify(type)}' because it is not a component.`);\n    }\n  }\n}\n"]}