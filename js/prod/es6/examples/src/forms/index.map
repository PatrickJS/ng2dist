{"version":3,"sources":["index.es6"],"names":[],"mappings":"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","file":"examples/src/forms/index.es6","sourcesContent":["import {bootstrap, Component, Decorator, View, If, For, EventEmitter} from 'angular2/angular2';\nimport {FormBuilder, Validators, FormDirectives, ControlGroup} from 'angular2/forms';\n\n// HeaderFields renders the bound header control group. It can used as follows:\n//\n//   <survey-header [header]=\"header\"></survey-header>\n//\n// This component is self-contained and can be tested in isolation.\n@Component({\n  selector: 'survey-header',\n  properties: {\n    \"header\" : \"header\"\n  }\n})\n@View({\n  template: `\n      <div [control-group]=\"header\">\n        <div>\n          <label>Title:</label> <br/>\n          <input type=\"text\" control=\"title\"/>\n          <div *if=\"! header.controls.title.valid && header.controls.title.dirty\">\n            Title is required\n          </div>\n        </div>\n\n        <div>\n          <label>Description:</label> <br/>\n          <textarea control=\"description\"></textarea>\n          <div *if=\"! header.controls.description.valid && header.controls.description.dirty\">\n            Description is required\n          </div>\n        </div>\n\n        <div>\n          <label>Publish Date:</label> <br/>\n          <input type=\"date\" control=\"date\"/>\n        </div>\n      </div>\n  `,\n  directives: [FormDirectives, If]\n})\nclass HeaderFields {\n  header:ControlGroup;\n}\n\n\n\n// SurveyQuestion renders an individual question. It can used as follows:\n//\n//   <survey-question [question]=\"question\" [index]=\"i\" (delete)=\"onDelete()\"></survey-question>\n//\n// SurveyQuestion uses EventEmitter to fire the delete action.\n// This component is self-contained and can be tested in isolation.\n@Component({\n  selector: 'survey-question',\n  properties: {\n    \"question\" : \"question\",\n    \"index\" : \"index\"\n  }\n})\n@View({\n  template: `\n      <h2>Question #{{index}}</h2>\n\n      <button (click)=\"deleteQuestion()\">Delete</button>\n\n      <div [control-group]=\"question\">\n        <div>\n          <label>Type:</label> <br/>\n          <select control=\"type\">\n            <option value=\"\"></option>\n            <option value=\"text\">Text</option>\n            <option value=\"checkbox\">Checkbox</option>\n            <option value=\"textarea\">Textarea</option>\n          </select>\n          <div *if=\"! question.controls.type.valid && question.controls.type.dirty\">\n            Type is required\n          </div>\n        </div>\n\n        <div>\n          <label>Question:</label> <br/>\n          <input type=\"text\" control=\"questionText\">\n          <div *if=\"! question.controls.questionText.valid && question.controls.questionText.dirty\">\n            Question is required\n          </div>\n        </div>\n\n        <div *if=\"question.contains('responseLength')\">\n          <label>Response Length:</label> <br/>\n          <input type=\"number\" control=\"responseLength\">\n          <div *if=\"! question.controls.responseLength.valid && question.controls.responseLength.dirty\">\n            Length is required\n          </div>\n        </div>\n      </div>\n  `,\n  directives: [FormDirectives, If]\n})\nclass SurveyQuestion {\n  question:ControlGroup;\n  index:number;\n  onDelete:Function;\n\n  constructor(@EventEmitter(\"delete\") onDelete:Function) {\n    this.onDelete = onDelete;\n  }\n\n  deleteQuestion() {\n    // Invoking an injected event emitter will fire an event,\n    // which in this case will result in calling `deleteQuestion(i)`\n    this.onDelete();\n  }\n}\n\n\n\n// SurveyBuilder is a form that allows you to create a survey.\n@Component({\n  selector: 'survey-builder-app',\n  injectables: [FormBuilder]\n})\n@View({\n  template: `\n    <h1>Create New Survey</h1>\n\n    <div [control-group]=\"form\">\n      <survey-header [header]=\"form.controls.header\"></survey-header>\n\n      <button (click)=\"addQuestion()\">Add Question</button>\n      <survey-question\n          *for=\"var q of form.controls.questions.controls; var i=index\"\n          [question]=\"q\"\n          [index]=\"i + 1\"\n          (delete)=\"deleteQuestion(i)\">\n      </survey-question>\n\n      <button (click)=\"submitForm()\">Submit</button>\n    </div>\n  `,\n  directives: [FormDirectives, For, HeaderFields, SurveyQuestion]\n})\nclass SurveyBuilder {\n  form:ControlGroup;\n  builder:FormBuilder;\n\n  constructor(b:FormBuilder) {\n    this.builder = b;\n    this.form = b.group({\n      \"header\" : b.group({\n        \"title\" :       [\"\", Validators.required],\n        \"description\" : [\"\", Validators.required],\n        \"date\" :        \"\"\n      }),\n      \"questions\": b.array([])\n    });\n  }\n\n  addQuestion() {\n    var newQuestion = this.builder.group({\n      \"type\":           [\"\", Validators.required],\n      \"questionText\":   [\"\", Validators.required],\n      \"responseLength\": [100, Validators.required]\n    }, {\n      // Optional controls can be dynamically added or removed from the form.\n      // Here, the responseLength field is optional and not included by default.\n      \"optionals\": {\n        \"responseLength\": false\n      }\n    });\n\n    // Every Control has an observable of value changes. You can subscribe to this observable\n    // to update the form, update the application model, etc.\n    // These observables can also be transformed and combined. This enables implementing\n    // complex form interactions in a declarative fashion.\n    //\n    // We are disabling the responseLength control when the question type is checkbox.\n    newQuestion.controls.type.valueChanges.subscribe((v) =>\n      v == 'text' || v == 'textarea' ?\n        newQuestion.include('responseLength') : newQuestion.exclude('responseLength'));\n\n    this.form.controls.questions.push(newQuestion);\n  }\n\n  deleteQuestion(index:number) {\n    this.form.controls.questions.removeAt(index);\n  }\n\n  submitForm() {\n    console.log(\"Submitting a form\")\n    console.log(\"value\", this.form.value, \"valid\", this.form.valid, \"errors\", this.form.errors);\n  }\n}\n\nexport function main() {\n  bootstrap(SurveyBuilder);\n}\n"]}