{"version":3,"sources":["index_common.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,SAAQ;AAAG,UAAQ;AAAG,UAAQ;AAAG,KAAG;AAAG,UAAQ,CAAC,KAAO,oBAAkB,CAAC;AAClF,KAAO,EAAC,UAAS,CAAC,KAAO,cAAY,CAAC;AA+BtC,IAAM,SAAO;AAEX,YAAU,CAAE,OAAM,AAAiB,CAAG;AACpC,OAAG,SAAS,EAAI,CAAA,OAAM,SAAS,CAAC;EAClC;AAAA,AACA,eAAa,CAAE,AAAD,CAAG;AACf,OAAG,SAAS,EAAI,QAAM,CAAC;EACzB;AAAA,AACF;AAxCA,KAAK,eAAe,AAAC,yBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAUzB,UAAQ,AAAC,CAAC;AAIT,aAAO,CAAG,YAAU;AAGpB,gBAAU,CAAG,EAAC,eAAc,CAAC;AAAA,IAC/B,CAAC,KAEA,KAAG,AAAC,CAAC;AAGJ,aAAO,CAAG,kLACkG;AAK5G,eAAS,CAAG,EAAC,MAAK,CAAC;AAAA,IACrB,CAAC,EA9BgD;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,wBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAiCH,eAAc,GAjCY;EAAC,CAAC,CAAC,CAAC;AA8CrD,IAAM,OAAK;AAGT,YAAU,CAAE,EAAC,AAAW,CAAG;AACzB,KAAC,WAAW,MAAM,MAAM,EAAI,MAAI,CAAC;EACnC;AAAA,AACF;AArDA,KAAK,eAAe,AAAC,uBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cA2CzB,UAAQ,AAAC,CAAC,CACT,QAAO,CAAG,QAAM,CAClB,CAAC,EA7CgD;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,sBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAiDR,SAAQ,GAjDuB;EAAC,CAAC,CAAC,CAAC;AAwDrD,IAAM,gBAAc;AAElB,YAAU,CAAE,AAAD,CAAG;AACZ,OAAG,SAAS,EAAI,QAAM,CAAC;EACzB;AAAA,AACF;AA9DA,KAAK,eAAe,AAAC,gCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAuDzB,WAAS,AAAC,EAAC,EAvDqC;EAAC,CAAC,CAAC,CAAC;AA+DrD,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AAQrB,UAAQ,AAAC,CAAC,QAAO,CAAC,CAAC;AACrB;AAAA","file":"examples/src/hello_world/index_common.es6","sourcesContent":["import {bootstrap, Component, Decorator, View, NgElement} from 'angular2/angular2';\nimport {Injectable} from 'angular2/di';\n\n// Angular 2.0 supports 3 basic types of directives:\n// - Component - the basic building blocks of Angular 2.0 apps. Backed by\n//   ShadowDom.(http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/)\n// - Decorator - add behavior to existing elements.\n// - Viewport - allow for stamping out of a html template (not in this demo).\n\n// @Component is AtScript syntax to annotate the HelloCmp class as an Angular\n// 2.0 component.\n@Component({\n  // The Selector prop tells Angular on which elements to instantiate this\n  // class. The syntax supported is a basic subset of CSS selectors, for example\n  // 'element', '[attr]', [attr=foo]', etc.\n  selector: 'hello-app',\n  // These are services that would be created if a class in the component's\n  // template tries to inject them.\n  injectables: [GreetingService]\n})\n// The template for the component.\n@View({\n  // Expressions in the template (like {{greeting}}) are evaluated in the\n  // context of the HelloCmp class below.\n  template: `<div class=\"greeting\">{{greeting}} <span red>world</span>!</div>\n           <button class=\"changeButton\" (click)=\"changeGreeting()\">change greeting</button><content></content>`,\n  // All directives used in the template need to be specified. This allows for\n  // modularity (RedDec can only be used in this template)\n  // and better tooling (the template can be invalidated if the attribute is\n  // misspelled).\n  directives: [RedDec]\n})\nclass HelloCmp {\n  greeting: string;\n  constructor(service: GreetingService) {\n    this.greeting = service.greeting;\n  }\n  changeGreeting() {\n    this.greeting = 'howdy';\n  }\n}\n\n// Decorators are light-weight. They don't allow for templates, or new\n// expression contexts (use @Component or @Viewport for those needs).\n@Decorator({\n  selector: '[red]'\n})\nclass RedDec {\n  // NgElement is always injectable and it wraps the element on which the\n  // directive was found by the compiler.\n  constructor(el: NgElement) {\n    el.domElement.style.color = 'red';\n  }\n}\n\n// A service available to the Injector, used by the HelloCmp component.\n@Injectable()\nclass GreetingService {\n  greeting:string;\n  constructor() {\n    this.greeting = 'hello';\n  }\n}\n\nexport function main() {\n  // Bootstrapping only requires specifying a root component.\n  // The boundary between the Angular application and the rest of the page is\n  // the shadowDom of this root component.\n  // The selector of the component passed in is used to find where to insert the\n  // application.\n  // You can use the light dom of the <hello-app> tag as temporary content (for\n  // example 'Loading...') before the application is ready.\n  bootstrap(HelloCmp);\n}\n"]}