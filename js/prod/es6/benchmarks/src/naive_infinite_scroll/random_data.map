{"version":3,"sources":["random_data.js"],"names":[],"mappings":"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","file":"benchmarks/src/naive_infinite_scroll/random_data.es6","sourcesContent":["import {int, StringWrapper} from 'angular2/src/facade/lang';\nimport {List, ListWrapper} from 'angular2/src/facade/collection';\nimport {CustomDate, Offering, Company, Opportunity, Account, STATUS_LIST,\n    AAT_STATUS_LIST} from './common';\n\nexport function generateOfferings(count:int):List<Offering> {\n  var res = [];\n  for(var i = 0; i < count; i++) {\n    ListWrapper.push(res, generateOffering(i));\n  }\n  return res;\n}\n\nexport function generateOffering(seed:int):Offering {\n  var res = new Offering();\n  res.name = generateName(seed++);\n  res.company = generateCompany(seed++);\n  res.opportunity = generateOpportunity(seed++);\n  res.account = generateAccount(seed++);\n  res.basePoints = seed % 10;\n  res.kickerPoints = seed % 4;\n  res.status = STATUS_LIST[seed % STATUS_LIST.length];\n  res.bundles = randomString(seed++);\n  res.dueDate = randomDate(seed++);\n  res.endDate = randomDate(seed++, res.dueDate);\n  res.aatStatus = AAT_STATUS_LIST[seed % AAT_STATUS_LIST.length];\n  return res;\n}\n\nexport function generateCompany(seed:int):Company {\n  var res = new Company();\n  res.name = generateName(seed);\n  return res;\n}\n\nexport function generateOpportunity(seed:int):Opportunity {\n  var res = new Opportunity();\n  res.name = generateName(seed);\n  return res;\n}\n\nexport function generateAccount(seed:int):Account {\n  var res = new Account();\n  res.accountId = seed;\n  return res;\n}\n\nvar names = [\n  'Foo', 'Bar', 'Baz', 'Qux', 'Quux', 'Garply', 'Waldo', 'Fred', 'Plugh',\n  'Xyzzy', 'Thud', 'Cruft', 'Stuff'\n];\n\nfunction generateName(seed:int):string {\n  return names[seed % names.length];\n}\n\nvar offsets = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfunction randomDate(seed:int, minDate:CustomDate = null):CustomDate {\n  if (minDate == null) {\n    minDate = CustomDate.now();\n  }\n\n  return minDate.addDays(offsets[seed % offsets.length]);\n}\n\nvar stringLengths = [5, 7, 9, 11, 13];\nvar charCodeOffsets = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n\nfunction randomString(seed:int):string {\n  var len = stringLengths[seed % 5];\n  var str = '';\n  for (var i = 0; i < len; i++) {\n    str += StringWrapper.fromCharCode(97 + charCodeOffsets[seed % 9] + i);\n  }\n  return str;\n}\n"]}