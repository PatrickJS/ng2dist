{"version":3,"sources":["perflog_metric.js"],"names":[],"mappings":"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","file":"benchpress/src/metric/perflog_metric.es6","sourcesContent":["import { PromiseWrapper, Promise } from 'angular2/src/facade/async';\nimport {\n  isPresent, isBlank, int, BaseException, StringWrapper, Math, RegExpWrapper, NumberWrapper\n} from 'angular2/src/facade/lang';\nimport { ListWrapper, StringMap, StringMapWrapper } from 'angular2/src/facade/collection';\nimport { bind, OpaqueToken } from 'angular2/di';\n\nimport { WebDriverExtension, PerfLogFeatures } from '../web_driver_extension';\nimport { Metric } from '../metric';\nimport { Options } from '../common_options';\n\n/**\n * A metric that reads out the performance log\n */\nexport class PerflogMetric extends Metric {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get BINDINGS() { return _BINDINGS; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get SET_TIMEOUT() { return _SET_TIMEOUT; }\n\n  _driverExtension:WebDriverExtension;\n  _remainingEvents:List;\n  _measureCount:int;\n  _setTimeout:Function;\n  _microMetrics:StringMap<string, string>;\n  _perfLogFeatures:PerfLogFeatures;\n\n  /**\n   * @param driverExtension\n   * @param setTimeout\n   * @param microMetrics Name and description of metrics provided via console.time / console.timeEnd\n   **/\n  constructor(driverExtension:WebDriverExtension, setTimeout:Function, microMetrics:StringMap<string, string>) {\n    super();\n    this._driverExtension = driverExtension;\n    this._remainingEvents = [];\n    this._measureCount = 0;\n    this._setTimeout = setTimeout;\n    this._microMetrics = microMetrics;\n    this._perfLogFeatures = driverExtension.perfLogFeatures();\n  }\n\n  describe():StringMap {\n    var res = {\n      'scriptTime': 'script execution time in ms, including gc and render',\n      'pureScriptTime': 'script execution time in ms, without gc nor render'\n    };\n    if (this._perfLogFeatures.render) {\n      res['renderTime'] = 'render time in and ouside of script in ms';\n    }\n    if (this._perfLogFeatures.gc) {\n      res['gcTime'] = 'gc time in and ouside of script in ms';\n      res['gcAmount'] = 'gc amount in kbytes';\n      res['majorGcTime'] = 'time of major gcs in ms';\n    }\n    StringMapWrapper.forEach(this._microMetrics, (desc, name) => {\n      StringMapWrapper.set(res, name, desc);\n    });\n    return res;\n  }\n\n  beginMeasure():Promise {\n    return this._driverExtension.timeBegin(this._markName(this._measureCount++));\n  }\n\n  endMeasure(restart:boolean):Promise<Object> {\n    var markName = this._markName(this._measureCount-1);\n    var nextMarkName = restart ? this._markName(this._measureCount++) : null;\n    return this._driverExtension.timeEnd(markName, nextMarkName)\n      .then( (_) => this._readUntilEndMark(markName) );\n  }\n\n  _readUntilEndMark(markName:string, loopCount:int = 0, startEvent = null) {\n    if (loopCount > _MAX_RETRY_COUNT) {\n      throw new BaseException(`Tried too often to get the ending mark: ${loopCount}`);\n    }\n    return this._driverExtension.readPerfLog().then( (events) => {\n      this._addEvents(events);\n      var result = this._aggregateEvents(\n        this._remainingEvents, markName\n      );\n      if (isPresent(result)) {\n        this._remainingEvents = events;\n        return result;\n      }\n      var completer = PromiseWrapper.completer();\n      this._setTimeout(\n        () => completer.resolve(this._readUntilEndMark(markName, loopCount+1)),\n        100\n      );\n      return completer.promise;\n    });\n  }\n\n  _addEvents(events) {\n    var needSort = false;\n    ListWrapper.forEach(events, (event) => {\n      if (StringWrapper.equals(event['ph'], 'X')) {\n        needSort = true;\n        var startEvent = {};\n        var endEvent = {};\n        StringMapWrapper.forEach(event, (value, prop) => {\n          startEvent[prop] = value;\n          endEvent[prop] = value;\n        });\n        startEvent['ph'] = 'B';\n        endEvent['ph'] = 'E';\n        endEvent['ts'] = startEvent['ts'] + startEvent['dur'];\n        ListWrapper.push(this._remainingEvents, startEvent);\n        ListWrapper.push(this._remainingEvents, endEvent);\n      } else {\n        ListWrapper.push(this._remainingEvents, event);\n      }\n    });\n    if (needSort) {\n      // Need to sort because of the ph==='X' events\n      ListWrapper.sort(this._remainingEvents, (a,b) => {\n        var diff = a['ts'] - b['ts'];\n        return diff > 0\n            ? 1\n            : diff < 0\n                ? -1\n                : 0;\n      });\n    }\n  }\n\n  _aggregateEvents(events, markName) {\n    var result = {\n      'scriptTime': 0,\n      'pureScriptTime': 0\n    };\n    if (this._perfLogFeatures.gc) {\n      result['gcTime'] = 0;\n      result['majorGcTime'] = 0;\n      result['gcAmount'] = 0;\n    }\n    if (this._perfLogFeatures.render) {\n      result['renderTime'] = 0;\n    }\n    StringMapWrapper.forEach(this._microMetrics, (desc, name) => {\n      result[name] = 0;\n    });\n\n    var markStartEvent = null;\n    var markEndEvent = null;\n    var gcTimeInScript = 0;\n    var renderTimeInScript = 0;\n\n    var intervalStarts = {};\n    events.forEach( (event) => {\n      var ph = event['ph'];\n      var name = event['name'];\n      var microIterations = 1;\n      var microIterationsMatch = RegExpWrapper.firstMatch(_MICRO_ITERATIONS_REGEX, name);\n      if (isPresent(microIterationsMatch)) {\n        name = microIterationsMatch[1];\n        microIterations = NumberWrapper.parseInt(microIterationsMatch[2], 10);\n      }\n\n      if (StringWrapper.equals(ph, 'b') && StringWrapper.equals(name, markName)) {\n        markStartEvent = event;\n      } else if (StringWrapper.equals(ph, 'e') && StringWrapper.equals(name, markName)) {\n        markEndEvent = event;\n      }\n      if (isPresent(markStartEvent) && isBlank(markEndEvent) && event['pid'] === markStartEvent['pid']) {\n        if (StringWrapper.equals(ph, 'B') || StringWrapper.equals(ph, 'b')) {\n          intervalStarts[name] = event;\n        } else if ((StringWrapper.equals(ph, 'E') || StringWrapper.equals(ph, 'e')) && isPresent(intervalStarts[name])) {\n          var startEvent = intervalStarts[name];\n          var duration = (event['ts'] - startEvent['ts']);\n          intervalStarts[name] = null;\n          if (StringWrapper.equals(name, 'gc')) {\n            result['gcTime'] += duration;\n            var amount = (startEvent['args']['usedHeapSize'] - event['args']['usedHeapSize']) / 1000;\n            result['gcAmount'] += amount;\n            var majorGc = event['args']['majorGc'];\n            if (isPresent(majorGc) && majorGc) {\n              result['majorGcTime'] += duration;\n            }\n            if (isPresent(intervalStarts['script'])) {\n              gcTimeInScript += duration;\n            }\n          } else if (StringWrapper.equals(name, 'render')) {\n            result['renderTime'] += duration;\n            if (isPresent(intervalStarts['script'])) {\n              renderTimeInScript += duration;\n            }\n          } else if (StringWrapper.equals(name, 'script')) {\n            result['scriptTime'] += duration;\n          } else if (isPresent(this._microMetrics[name])) {\n            result[name] += duration / microIterations;\n          }\n        }\n      }\n    });\n    result['pureScriptTime'] = result['scriptTime'] - gcTimeInScript - renderTimeInScript;\n    return isPresent(markStartEvent) && isPresent(markEndEvent) ? result : null;\n  }\n\n  _markName(index) {\n    return `${_MARK_NAME_PREFIX}${index}`;\n  }\n}\n\nvar _MICRO_ITERATIONS_REGEX = RegExpWrapper.create('(.+)\\\\*(\\\\d+)$');\n\nvar _MAX_RETRY_COUNT = 20;\nvar _MARK_NAME_PREFIX = 'benchpress';\nvar _SET_TIMEOUT = new OpaqueToken('PerflogMetric.setTimeout');\nvar _BINDINGS = [\n  bind(PerflogMetric).toFactory(\n    (driverExtension, setTimeout, microMetrics) =>\n      new PerflogMetric(driverExtension, setTimeout, microMetrics),\n    [WebDriverExtension, _SET_TIMEOUT, Options.MICRO_METRICS]\n  ),\n  bind(_SET_TIMEOUT).toValue( (fn, millis) => PromiseWrapper.setTimeout(fn, millis) )\n];\n"]}