{"version":3,"sources":["multi_reporter_spec.js"],"names":[],"mappings":"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","file":"benchpress/test/reporter/multi_reporter_spec.es6","sourcesContent":["import {\n  afterEach,\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  expect,\n  iit,\n  inject,\n  it,\n  xit,\n} from 'angular2/test_lib';\n\nimport { List, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { PromiseWrapper, Promise } from 'angular2/src/facade/async';\nimport { DateWrapper } from 'angular2/src/facade/lang';\n\nimport { Reporter, MultiReporter, bind, Injector, MeasureValues } from 'benchpress/common';\n\nexport function main() {\n  function createReporters(ids) {\n    return Injector.resolveAndCreate([\n      ListWrapper.map(ids, (id) => bind(id).toValue(new MockReporter(id)) ),\n      MultiReporter.createBindings(ids)\n    ]).asyncGet(MultiReporter);\n  }\n\n  describe('multi reporter', () => {\n\n    it('should reportMeasureValues to all', inject([AsyncTestCompleter], (async) => {\n      var mv = new MeasureValues(0, DateWrapper.now(), {});\n      createReporters(['m1', 'm2'])\n        .then( (r) => r.reportMeasureValues(mv) )\n        .then( (values) => {\n\n        expect(values).toEqual([\n          {'id': 'm1', 'values': mv},\n          {'id': 'm2', 'values': mv}\n        ]);\n        async.done();\n      });\n    }));\n\n    it('should reportSample to call', inject([AsyncTestCompleter], (async) => {\n      var completeSample = [\n        new MeasureValues(0, DateWrapper.now(), {}),\n        new MeasureValues(1, DateWrapper.now(), {})\n      ];\n      var validSample = [completeSample[1]];\n\n      createReporters(['m1', 'm2'])\n        .then( (r) => r.reportSample(completeSample, validSample) )\n        .then( (values) => {\n\n        expect(values).toEqual([\n          {'id': 'm1', 'completeSample': completeSample, 'validSample': validSample},\n          {'id': 'm2', 'completeSample': completeSample, 'validSample': validSample}\n        ]);\n        async.done();\n      })\n    }));\n\n  });\n}\n\nclass MockReporter extends Reporter {\n  _id:string;\n\n  constructor(id) {\n    super();\n    this._id = id;\n  }\n\n  reportMeasureValues(values:MeasureValues):Promise {\n    return PromiseWrapper.resolve({\n      'id': this._id,\n      'values': values\n    });\n  }\n\n  reportSample(completeSample:List<MeasureValues>, validSample:List<MeasureValues>):Promise {\n    return PromiseWrapper.resolve({\n      'id': this._id,\n      'completeSample': completeSample,\n      'validSample': validSample\n    });\n  }\n\n}\n"]}