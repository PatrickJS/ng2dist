{"version":3,"sources":["progress_linear.js"],"names":[],"mappings":"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","file":"angular2_material/src/components/progress-linear/progress_linear.es6","sourcesContent":["import {Component, View, Attribute, PropertySetter, onChange} from 'angular2/angular2';\nimport {isPresent, isBlank} from 'angular2/src/facade/lang';\nimport {Math} from 'angular2/src/facade/math';\n\n@Component({\n  selector: 'md-progress-linear',\n  lifecycle: [onChange],\n  properties: {\n    'value': 'value',\n    'bufferValue': 'buffer-value'\n  }\n})\n@View({\n  templateUrl: 'angular2_material/src/components/progress-linear/progress_linear.html',\n  directives: []\n})\nexport class MdProgressLinear {\n  /** Value for the primary bar. */\n  value_: number;\n\n  /** Value for the secondary bar. */\n  bufferValue: number;\n\n  /** The render mode for the progress bar. */\n  mode: string;\n\n  /** Attribute setter for aria-valuenow. */\n  ariaValueNowSetter: Function;\n\n  /** CSS `transform` property applied to the primary bar. */\n  primaryBarTransform: string;\n\n  /** CSS `transform` property applied to the secondary bar. */\n  secondaryBarTransform: string;\n\n  constructor(\n      @Attribute('md-mode') mode: string,\n      @PropertySetter('attr.role') roleSetter: Function,\n      @PropertySetter('attr.aria-valuemin') ariaValueMinSetter: Function,\n      @PropertySetter('attr.aria-valuemax') ariaValueMaxSetter: Function,\n      @PropertySetter('attr.aria-valuenow') ariaValueNowSetter: Function) {\n    this.ariaValueNowSetter = ariaValueNowSetter;\n    this.primaryBarTransform = '';\n    this.secondaryBarTransform = '';\n\n    roleSetter('progressbar');\n    ariaValueMinSetter('0');\n    ariaValueMaxSetter('100');\n\n    this.mode = isPresent(mode) ? mode : Mode.DETERMINATE;\n  }\n\n  get value() {\n    return this.value_;\n  }\n\n  set value(v) {\n    if (isPresent(v)) {\n      this.value_ = MdProgressLinear.clamp(v);\n      this.ariaValueNowSetter(this.value_);\n    }\n  }\n\n  onChange(_) {\n    // If the mode does not use a value, or if there is no value, do nothing.\n    if (this.mode == Mode['QUERY'] || this.mode == Mode['INDETERMINATE'] || isBlank(this.value)) {\n      return;\n    }\n\n    this.primaryBarTransform = this.transformForValue(this.value);\n\n    // The bufferValue is only used in buffer mode.\n    if (this.mode == Mode['BUFFER']) {\n      this.secondaryBarTransform = this.transformForValue(this.bufferValue);\n    }\n  }\n\n  /** Gets the CSS `transform` property for a progress bar based on the given value (0 - 100). */\n  transformForValue(value) {\n    // TODO(jelbourn): test perf gain of caching these, since there are only 101 values.\n    var scale = value / 100;\n    var translateX = (value - 100) / 2;\n    return `translateX(${translateX}%) scale(${scale}, 1)`;\n  }\n\n  /** Clamps a value to be between 0 and 100. */\n  static clamp(v) {\n    return Math.max(0, Math.min(100, v));\n  }\n}\n\n/** @enum {string} Progress-linear modes. */\nvar Mode = {\n  'DETERMINATE': 'determinate',\n  'INDETERMINATE': 'indeterminate',\n  'BUFFER': 'buffer',\n  'QUERY': 'query'\n};\n"]}