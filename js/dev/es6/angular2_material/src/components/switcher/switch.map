{"version":3,"sources":["switch.js"],"names":[],"mappings":"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","file":"angular2_material/src/components/switcher/switch.es6","sourcesContent":["import {Component, View, Attribute, PropertySetter} from 'angular2/angular2';\nimport {isPresent} from 'angular2/src/facade/lang';\nimport {KeyCodes} from 'angular2_material/src/core/constants'\n\n// TODO(jelbourn): without gesture support, this is identical to MdCheckbox.\n\n@Component({\n  selector: 'md-switch',\n  properties: {\n    'checked': 'checked',\n    'disabled': 'disabled'\n  },\n  hostListeners: {\n    'keydown': 'onKeydown($event)'\n  }\n})\n@View({\n  templateUrl: 'angular2_material/src/components/switcher/switch.html',\n  directives: []\n})\nexport class MdSwitch {\n  /** Whether this switch is checked. */\n  checked_: boolean;\n\n  /** Setter for `aria-checked` attribute. */\n  ariaCheckedSetter: Function;\n\n  /** Setter for `aria-disabled` attribute. */\n  ariaDisabledSetter: Function;\n\n  constructor(\n      @Attribute('tabindex') tabindex: string,\n      @PropertySetter('tabindex') tabindexSetter: Function,\n      @PropertySetter('attr.role') roleSetter: Function,\n      @PropertySetter('attr.aria-checked') ariaCheckedSetter: Function,\n      @PropertySetter('attr.aria-disabled') ariaDisabledSetter: Function) {\n    this.ariaCheckedSetter = ariaCheckedSetter;\n    this.ariaDisabledSetter = ariaDisabledSetter;\n\n    roleSetter('checkbox');\n    this.checked = false;\n    tabindexSetter(isPresent(tabindex) ? tabindex : '0');\n  }\n\n  get checked() {\n    return this.checked_;\n  }\n\n  set checked(value) {\n    this.checked_ = value;\n    this.ariaCheckedSetter(value);\n  }\n\n  get disabled() {\n    return this.disabled_;\n  }\n\n  set disabled(value) {\n    this.disabled_ = isPresent(value) && value !== false;\n    this.ariaDisabledSetter(this.disabled_);\n  }\n\n  onKeydown(event: KeyboardEvent) {\n    if (event.keyCode == KeyCodes.SPACE) {\n      event.preventDefault();\n      this.toggle(event);\n    }\n  }\n\n  toggle(event) {\n    if (this.disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    this.checked = !this.checked;\n    this.ariaCheckedSetter(this.checked);\n  }\n}\n\n"]}