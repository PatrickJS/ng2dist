{"version":3,"sources":["multi_metric_spec.js"],"names":[],"mappings":"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","file":"benchpress/test/metric/multi_metric_spec.es6","sourcesContent":["import {\n  afterEach,\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  expect,\n  iit,\n  inject,\n  it,\n  xit,\n} from 'angular2/test_lib';\n\nimport { List, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { PromiseWrapper, Promise } from 'angular2/src/facade/async';\n\nimport { Metric, MultiMetric, bind, Injector } from 'benchpress/common';\n\nexport function main() {\n  function createMetric(ids) {\n    return Injector.resolveAndCreate([\n      ListWrapper.map(ids, (id) => bind(id).toValue(new MockMetric(id)) ),\n      MultiMetric.createBindings(ids)\n    ]).asyncGet(MultiMetric);\n  }\n\n  describe('multi metric', () => {\n\n    it('should merge descriptions', inject([AsyncTestCompleter], (async) => {\n      createMetric(['m1', 'm2']).then( (m) => {\n        expect(m.describe()).toEqual({\n          'm1': 'describe', 'm2': 'describe'\n        });\n        async.done();\n      });\n    }));\n\n    it('should merge all beginMeasure calls', inject([AsyncTestCompleter], (async) => {\n      createMetric(['m1', 'm2'])\n        .then( (m) => m.beginMeasure() )\n        .then( (values) => {\n          expect(values).toEqual([\n            'm1_beginMeasure', 'm2_beginMeasure'\n          ]);\n          async.done();\n        });\n    }));\n\n    [false, true].forEach( (restartFlag) => {\n      it(`should merge all endMeasure calls for restart=${restartFlag}`, inject([AsyncTestCompleter], (async) => {\n        createMetric(['m1', 'm2'])\n          .then( (m) => m.endMeasure(restartFlag) )\n          .then( (values) => {\n            expect(values).toEqual({\n              'm1': { 'restart': restartFlag },\n              'm2': { 'restart': restartFlag }\n            });\n            async.done();\n          });\n      }));\n    });\n\n  });\n}\n\nclass MockMetric extends Metric {\n  _id:string;\n\n  constructor(id) {\n    super();\n    this._id = id;\n  }\n\n  beginMeasure():Promise {\n    return PromiseWrapper.resolve(`${this._id}_beginMeasure`);\n  }\n\n  endMeasure(restart:boolean):Promise<StringMap> {\n    var result = {};\n    result[this._id] = {\n      'restart': restart\n    };\n    return PromiseWrapper.resolve(result);\n  }\n\n  describe():StringMap {\n    var result = {};\n    result[this._id] = 'describe';\n    return result;\n  }\n}\n"]}