{"version":3,"sources":["runner_spec.js"],"names":[],"mappings":"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","file":"benchpress/test/runner_spec.es6","sourcesContent":["import {\n  afterEach,\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  expect,\n  iit,\n  inject,\n  it,\n  xit,\n} from 'angular2/test_lib';\nimport {\n  Runner, Sampler, SampleDescription,\n  Validator, bind, Injector, Metric,\n  Options, WebDriverAdapter\n} from 'benchpress/common';\nimport { isBlank } from 'angular2/src/facade/lang';\nimport { Promise, PromiseWrapper } from 'angular2/src/facade/async';\n\nexport function main() {\n  describe('runner', () => {\n    var injector;\n    var runner;\n\n    function createRunner(defaultBindings = null) {\n      if (isBlank(defaultBindings)) {\n        defaultBindings = [];\n      }\n      runner = new Runner([\n        defaultBindings,\n        bind(Sampler).toFactory(\n          (_injector) => {\n            injector = _injector;\n            return new MockSampler();\n          }, [Injector]\n        ),\n        bind(Metric).toFactory( () => new MockMetric(), []),\n        bind(Validator).toFactory( () => new MockValidator(), []),\n        bind(WebDriverAdapter).toFactory( () => new MockWebDriverAdapter(), [])\n      ]);\n      return runner;\n    }\n\n    it('should set SampleDescription.id', inject([AsyncTestCompleter], (async) => {\n      createRunner().sample({id: 'someId'})\n        .then( (_) => injector.asyncGet(SampleDescription) )\n        .then( (desc) => {\n          expect(desc.id).toBe('someId');\n          async.done();\n        });\n    }));\n\n    it('should merge SampleDescription.description', inject([AsyncTestCompleter], (async) => {\n      createRunner([\n        bind(Options.DEFAULT_DESCRIPTION).toValue({'a': 1})\n      ]).sample({id: 'someId', bindings: [\n        bind(Options.SAMPLE_DESCRIPTION).toValue({'b': 2})\n      ]}).then( (_) => injector.asyncGet(SampleDescription) )\n         .then( (desc) => {\n\n        expect(desc.description).toEqual({\n          'forceGc': false,\n          'userAgent': 'someUserAgent',\n          'a': 1,\n          'b': 2,\n          'v': 11\n        });\n        async.done();\n      });\n    }));\n\n    it('should fill SampleDescription.metrics from the Metric', inject([AsyncTestCompleter], (async) => {\n      createRunner().sample({id: 'someId'})\n        .then( (_) => injector.asyncGet(SampleDescription) )\n        .then( (desc) => {\n\n        expect(desc.metrics).toEqual({ 'm1': 'some metric' });\n        async.done();\n      });\n    }));\n\n    it('should bind Options.EXECUTE', inject([AsyncTestCompleter], (async) => {\n      var execute = () => {};\n      createRunner().sample({id: 'someId', execute: execute}).then( (_) => {\n        expect(injector.get(Options.EXECUTE)).toEqual(execute);\n        async.done();\n      });\n    }));\n\n    it('should bind Options.PREPARE', inject([AsyncTestCompleter], (async) => {\n      var prepare = () => {};\n      createRunner().sample({id: 'someId', prepare: prepare}).then( (_) => {\n        expect(injector.get(Options.PREPARE)).toEqual(prepare);\n        async.done();\n      });\n    }));\n\n    it('should bind Options.MICRO_METRICS', inject([AsyncTestCompleter], (async) => {\n      createRunner().sample({id: 'someId', microMetrics: {'a': 'b'}}).then( (_) => {\n        expect(injector.get(Options.MICRO_METRICS)).toEqual({'a': 'b'});\n        async.done();\n      });\n    }));\n\n    it('should overwrite bindings per sample call', inject([AsyncTestCompleter], (async) => {\n      createRunner([\n        bind(Options.DEFAULT_DESCRIPTION).toValue({'a': 1}),\n      ]).sample({id: 'someId', bindings: [\n        bind(Options.DEFAULT_DESCRIPTION).toValue({'a': 2}),\n      ]}).then( (_) => injector.asyncGet(SampleDescription) )\n         .then( (desc) => {\n\n        expect(injector.get(SampleDescription).description['a']).toBe(2);\n        async.done();\n      });\n\n    }));\n\n  });\n}\n\nclass MockWebDriverAdapter extends WebDriverAdapter {\n  executeScript(script):Promise {\n    return PromiseWrapper.resolve('someUserAgent');\n  }\n}\n\nclass MockValidator extends Validator {\n  constructor() {\n    super();\n  }\n  describe() {\n    return { 'v': 11 };\n  }\n}\n\nclass MockMetric extends Metric {\n  constructor() {\n    super();\n  }\n  describe() {\n    return { 'm1': 'some metric' };\n  }\n}\n\nclass MockSampler extends Sampler {\n  constructor() {\n    super();\n  }\n  sample():Promise {\n    return PromiseWrapper.resolve(23);\n  }\n}\n"]}