{"version":3,"sources":["size_validator.js"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAE,IAAG;AAAG,YAAU;AAAG,UAAQ,CAAE,KAAO,iCAA+B,CAAC;AAC7E,KAAO,EAAE,IAAG;AAAG,YAAU,CAAE,KAAO,cAAY,CAAC;AAE/C,KAAO,EAAE,SAAQ,CAAE,KAAO,eAAa,CAAC;AACxC,KAAO,EAAE,aAAY,CAAE,KAAO,oBAAkB,CAAC;AAKjD,KAAO,MAAM,cAAY,QAAU,UAAQ;AAEzC,WAAW,SAAO,EAAI;AAAE,SAAO,UAAQ,CAAC;EAAE;AAAA,AAE1C,WAAW,YAAU,EAAI;AAAE,SAAO,aAAW,CAAC;EAAE;AAAA,AAIhD,YAAU,CAAE,IAAG,CAAG;AAChB,QAAI,AAAC,EAAC,CAAC;AACP,OAAG,YAAY,EAAI,KAAG,CAAC;EACzB;AAAA,AAEA,SAAO,CAAE,AAAD;AAtBV,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAuBd,CACL,YAAW,CAAG,CAAA,IAAG,YAAY,CAC/B,CAzBuC,CAsB9B,UAAQ,CAtB0C,CAAA;EA0B7D;AAEA,SAAO,CAAE,cAAa,AAAoB;AA5B5C,SAAK,cAAc,gBAAnB,CAAA,MAAK,YAAuB,AA4BF,CAAA,IAAG,CAAE,cAAY,CAAC,AA5BG,CAAT,CAAA;AA6BlC,OAAI,cAAa,OAAO,GAAK,CAAA,IAAG,YAAY,CAAG;AA7BnD,WAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CA8BZ,WAAU,MAAM,AAAC,CAAC,cAAa,CAAG,CAAA,cAAa,OAAO,EAAI,CAAA,IAAG,YAAY,CAAG,CAAA,cAAa,OAAO,CAAC,CA9BnE,CAA3C,CAAA,MAAK,YAAuB,AA4BmB,CAAA,IAAG,CAAE,cAAY,CAAC,AA5BlB,CAAgB,CAAA;IA+B3D,KAAO;AA/BX,WAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAgCZ,IAAG,CAhC2B,CAA3C,CAAA,MAAK,YAAuB,AA4BmB,CAAA,IAAG,CAAE,cAAY,CAAC,AA5BlB,CAAgB,CAAA;IAiC3D;AAAA,EACF;AAEF;AAAA,AApCA,KAAK,eAAe,AAAC,gDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,MAAK,YAAuB,AA4BF,CAAA,IAAG,CAAE,cAAY,CAAC,AA5BG,GACE;EAAC,CAAC,CAAC,CAAC;AAqCrD,AAAI,EAAA,CAAA,YAAW,EAAI,IAAI,YAAU,AAAC,CAAC,0BAAyB,CAAC,CAAC;AAC9D,AAAI,EAAA,CAAA,SAAQ,EAAI,EACd,IAAG,AAAC,CAAC,aAAY,CAAC,UAAU,AAAC,CAC3B,CAAC,IAAG,IAAM,IAAI,cAAY,AAAC,CAAC,IAAG,CAAC,CAChC,EAAC,YAAW,CAAC,CACf,CACA,CAAA,IAAG,AAAC,CAAC,YAAW,CAAC,QAAQ,AAAC,CAAC,EAAC,CAAC,CAC/B,CAAC;AAAA","file":"benchpress/src/validator/size_validator.es6","sourcesContent":["import { List, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { bind, OpaqueToken } from 'angular2/di';\n\nimport { Validator } from '../validator';\nimport { MeasureValues } from '../measure_values';\n\n/**\n * A validator that waits for the sample to have a certain size.\n */\nexport class SizeValidator extends Validator {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get BINDINGS() { return _BINDINGS; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get SAMPLE_SIZE() { return _SAMPLE_SIZE; }\n\n  _sampleSize:number;\n\n  constructor(size) {\n    super();\n    this._sampleSize = size;\n  }\n\n  describe():StringMap {\n    return {\n      'sampleSize': this._sampleSize\n    };\n  }\n\n  validate(completeSample:List<MeasureValues>):List<MeasureValues> {\n    if (completeSample.length >= this._sampleSize) {\n      return ListWrapper.slice(completeSample, completeSample.length - this._sampleSize, completeSample.length);\n    } else {\n      return null;\n    }\n  }\n\n}\n\nvar _SAMPLE_SIZE = new OpaqueToken('SizeValidator.sampleSize');\nvar _BINDINGS = [\n  bind(SizeValidator).toFactory(\n    (size) => new SizeValidator(size),\n    [_SAMPLE_SIZE]\n  ),\n  bind(_SAMPLE_SIZE).toValue(10)\n];"]}