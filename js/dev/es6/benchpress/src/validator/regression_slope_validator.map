{"version":3,"sources":["regression_slope_validator.js"],"names":[],"mappings":"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","file":"benchpress/src/validator/regression_slope_validator.es6","sourcesContent":["import { List, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { bind, OpaqueToken } from 'angular2/di';\n\nimport { Validator } from '../validator';\nimport { Statistic } from '../statistic';\nimport { MeasureValues } from '../measure_values';\n\n/**\n * A validator that checks the regression slope of a specific metric.\n * Waits for the regression slope to be >=0.\n */\nexport class RegressionSlopeValidator extends Validator {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get SAMPLE_SIZE() { return _SAMPLE_SIZE; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get METRIC() { return _METRIC; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get BINDINGS() { return _BINDINGS; }\n\n  _sampleSize:number;\n  _metric:string;\n\n  constructor(sampleSize, metric) {\n    super();\n    this._sampleSize = sampleSize;\n    this._metric = metric;\n  }\n\n  describe():StringMap {\n    return {\n      'sampleSize': this._sampleSize,\n      'regressionSlopeMetric': this._metric\n    };\n  }\n\n  validate(completeSample:List<MeasureValues>):List<MeasureValues> {\n    if (completeSample.length >= this._sampleSize) {\n      var latestSample =\n        ListWrapper.slice(completeSample, completeSample.length - this._sampleSize, completeSample.length);\n      var xValues = [];\n      var yValues = [];\n      for (var i = 0; i<latestSample.length; i++) {\n        // For now, we only use the array index as x value.\n        // TODO(tbosch): think about whether we should use time here instead\n        ListWrapper.push(xValues, i);\n        ListWrapper.push(yValues, latestSample[i].values[this._metric]);\n      }\n      var regressionSlope = Statistic.calculateRegressionSlope(\n        xValues, Statistic.calculateMean(xValues),\n        yValues, Statistic.calculateMean(yValues)\n      );\n      return regressionSlope >= 0 ? latestSample : null;\n    } else {\n      return null;\n    }\n  }\n\n}\n\nvar _SAMPLE_SIZE = new OpaqueToken('RegressionSlopeValidator.sampleSize');\nvar _METRIC = new OpaqueToken('RegressionSlopeValidator.metric');\nvar _BINDINGS = [\n  bind(RegressionSlopeValidator).toFactory(\n    (sampleSize, metric) => new RegressionSlopeValidator(sampleSize, metric),\n    [_SAMPLE_SIZE, _METRIC]\n  ),\n  bind(_SAMPLE_SIZE).toValue(10),\n  bind(_METRIC).toValue('scriptTime')\n];\n"]}