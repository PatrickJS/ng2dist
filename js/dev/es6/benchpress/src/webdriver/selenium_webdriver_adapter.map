{"version":3,"sources":["selenium_webdriver_adapter.es6"],"names":[],"mappings":"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","file":"benchpress/src/webdriver/selenium_webdriver_adapter.es6","sourcesContent":["import { Promise, PromiseWrapper } from 'angular2/src/facade/async';\nimport { bind } from 'angular2/di';\nimport { WebDriverAdapter } from '../web_driver_adapter';\n\nimport webdriver from 'selenium-webdriver';\n\n/**\n * Adapter for the selenium-webdriver.\n */\nexport class SeleniumWebDriverAdapter extends WebDriverAdapter {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get PROTRACTOR_BINDINGS() { return _PROTRACTOR_BINDINGS; }\n\n  _driver:any;\n\n  constructor(driver) {\n    super();\n    this._driver = driver;\n  }\n\n  _convertPromise(thenable) {\n    var completer = PromiseWrapper.completer();\n    thenable.then(\n      // selenium-webdriver uses an own Node.js context,\n      // so we need to convert data into objects of this context.\n      // (e.g. otherwise instanceof checks of rtts_assert would fail)\n      (data) => completer.resolve(convertToLocalProcess(data)),\n      completer.reject\n    );\n    return completer.promise;\n  }\n\n  waitFor(callback):Promise {\n    return this._convertPromise(this._driver.controlFlow().execute(callback));\n  }\n\n  executeScript(script:string):Promise {\n    return this._convertPromise(this._driver.executeScript(script));\n  }\n\n  capabilities():Promise {\n    return this._convertPromise(\n      this._driver.getCapabilities().then( (capsObject) => capsObject.toJSON() )\n    );\n  }\n\n  logs(type:string):Promise {\n    // Needed as selenium-webdriver does not forward\n    // performance logs in the correct way via manage().logs\n    return this._convertPromise(this._driver.schedule(\n      new webdriver.Command(webdriver.CommandName.GET_LOG).\n          setParameter('type', type),\n      'WebDriver.manage().logs().get(' + type + ')'));\n  }\n\n}\n\nfunction convertToLocalProcess(data) {\n  var serialized = JSON.stringify(data);\n  if (''+serialized === 'undefined') {\n    return undefined;\n  }\n  return JSON.parse(serialized);\n}\n\nvar _PROTRACTOR_BINDINGS = [\n  bind(WebDriverAdapter).toFactory( () => new SeleniumWebDriverAdapter(global.browser), [])\n];"]}