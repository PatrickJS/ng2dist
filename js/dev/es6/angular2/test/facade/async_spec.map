{"version":3,"sources":["async_spec.js"],"names":[],"mappings":"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","file":"angular2/test/facade/async_spec.es6","sourcesContent":["import {describe, it, expect, beforeEach, ddescribe, iit, xit, el,\n  SpyObject, AsyncTestCompleter, inject, IS_DARTIUM} from 'angular2/test_lib';\n\nimport {ObservableWrapper, Observable, ObservableController, PromiseWrapper} from 'angular2/src/facade/async';\n\nexport function main() {\n  describe('Observable', () => {\n    var obs:Observable;\n    var controller:ObservableController;\n\n    beforeEach(() => {\n      controller = ObservableWrapper.createController();\n      obs = ObservableWrapper.createObservable(controller);\n    });\n\n    it(\"should call the next callback\",  inject([AsyncTestCompleter], (async) => {\n      ObservableWrapper.subscribe(obs, (value) => {\n        expect(value).toEqual(99);\n        async.done();\n      });\n\n      ObservableWrapper.callNext(controller, 99);\n    }));\n\n    it(\"should call the throw callback\", inject([AsyncTestCompleter], (async) => {\n      ObservableWrapper.subscribe(obs, (_) => {}, (error) => {\n        expect(error).toEqual(\"Boom\");\n        async.done();\n      });\n      ObservableWrapper.callThrow(controller, \"Boom\");\n    }));\n\n    it(\"should call the return callback\", inject([AsyncTestCompleter], (async) => {\n      ObservableWrapper.subscribe(obs, (_) => {}, (_) => {}, () => {\n        async.done();\n      });\n\n      ObservableWrapper.callReturn(controller);\n    }));\n\n    it(\"should subscribe to the wrapper asynchronously\", () => {\n      var called = false;\n      ObservableWrapper.subscribe(obs, (value) => {\n        called = true;\n      });\n\n      ObservableWrapper.callNext(controller, 99);\n      expect(called).toBe(false);\n    });\n\n    if (!IS_DARTIUM) {\n      // See here: https://github.com/jhusain/observable-spec\n      describe(\"Generator\", () => {\n        var generator;\n\n        beforeEach(() => {\n          generator = new SpyObject();\n          generator.spy(\"next\");\n          generator.spy(\"throw\");\n          generator.spy(\"return\");\n        });\n\n        it(\"should call next on the given generator\",  inject([AsyncTestCompleter], (async) => {\n          generator.spy(\"next\").andCallFake((value) => {\n            expect(value).toEqual(99);\n            async.done();\n          });\n\n          ObservableWrapper.subscribe(obs, generator);\n          ObservableWrapper.callNext(controller, 99);\n        }));\n\n        it(\"should call throw on the given generator\", inject([AsyncTestCompleter], (async) => {\n          generator.spy(\"throw\").andCallFake((error) => {\n            expect(error).toEqual(\"Boom\");\n            async.done();\n          });\n          ObservableWrapper.subscribe(obs, generator);\n          ObservableWrapper.callThrow(controller, \"Boom\");\n        }));\n\n        it(\"should call return on the given generator\", inject([AsyncTestCompleter], (async) => {\n          generator.spy(\"return\").andCallFake(() => {\n            async.done();\n          });\n          ObservableWrapper.subscribe(obs, generator);\n          ObservableWrapper.callReturn(controller);\n        }));\n      });\n    }\n\n    //TODO: vsavkin: add tests cases\n    //should call dispose on the subscription if generator returns {done:true}\n    //should call dispose on the subscription on throw\n    //should call dispose on the subscription on return\n });\n}\n\n//make sure rx observables are async"]}