{"version":3,"sources":["testability_spec.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,QAAO;AAAG,UAAQ;AAAG,GAAC;AAAG,IAAE;AAAG,IAAE;AAAG,UAAQ;AAAG,OAAK;AAAG,WAAS,CAAC,KAAO,oBAAkB,CAAC;AAClG,KAAO,EAAC,WAAU,CAAC,KAAO,4CAA0C,CAAC;AAGrE,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAO,AAAC,CAAC,aAAY,CAAG,EAAC,AAAD,IAAM;AAC5B,AAAI,MAAA,CAAA,WAAU;AAAG,eAAO,CAAC;AAEzB,aAAS,AAAC,CAAC,CAAC,AAAD,IAAM;AACf,gBAAU,EAAI,IAAI,YAAU,AAAC,EAAC,CAAC;AAC/B,aAAO,EAAI,MAAI,CAAC;IAClB,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,wCAAuC,CAAG,EAAC,AAAD,IAAM;AACjD,WAAK,AAAC,CAAC,WAAU,gBAAgB,AAAC,EAAC,CAAC,QAAQ,AAAC,CAAC,CAAA,CAAC,CAAC;IAClD,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,wDAAuD,CAAG,EAAC,AAAD,IAAM;AACjE,gBAAU,WAAW,AAAC,CAAC,CAAC,AAAD,IAAM,CAAA,QAAO,EAAI,KAAG,CAAC,CAAC;AAC7C,WAAK,AAAC,CAAC,QAAO,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;IAC7B,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,oEAAmE,CAAG,EAAC,AAAD,IAAM;AAC7E,gBAAU,cAAc,AAAC,CAAC,CAAA,CAAC,CAAC;AAC5B,gBAAU,WAAW,AAAC,CAAC,CAAC,AAAD,IAAM,CAAA,QAAO,EAAI,KAAG,CAAC,CAAC;AAE7C,WAAK,AAAC,CAAC,QAAO,CAAC,KAAK,AAAC,CAAC,KAAI,CAAC,CAAC;AAC5B,gBAAU,cAAc,AAAC,CAAC,CAAC,CAAA,CAAC,CAAC;AAC7B,WAAK,AAAC,CAAC,QAAO,CAAC,KAAK,AAAC,CAAC,KAAI,CAAC,CAAC;IAC9B,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,0DAAyD,CAAG,EAAC,AAAD,IAAM;AACnE,gBAAU,cAAc,AAAC,CAAC,CAAA,CAAC,CAAC;AAC5B,gBAAU,WAAW,AAAC,CAAC,CAAC,AAAD,IAAM,CAAA,QAAO,EAAI,KAAG,CAAC,CAAC;AAE7C,WAAK,AAAC,CAAC,QAAO,CAAC,KAAK,AAAC,CAAC,KAAI,CAAC,CAAC;AAE5B,gBAAU,cAAc,AAAC,CAAC,CAAC,CAAA,CAAC,CAAC;AAC7B,WAAK,AAAC,CAAC,QAAO,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAA","file":"angular2/test/core/testability/testability_spec.es6","sourcesContent":["import {describe, ddescribe, it, iit, xit, xdescribe, expect, beforeEach} from 'angular2/test_lib';\nimport {Testability} from 'angular2/src/core/testability/testability';\n\n\nexport function main() {\n  describe('Testability', () => {\n    var testability, executed;\n\n    beforeEach(() => {\n      testability = new Testability();\n      executed = false;\n    });\n\n    it('should start with a pending count of 0', () => {\n      expect(testability.getPendingCount()).toEqual(0);\n    });\n\n    it('should fire whenstable callbacks if pending count is 0', () => {\n      testability.whenStable(() => executed = true);\n      expect(executed).toBe(true);\n    });\n\n    it('should not call whenstable callbacks when there are pending counts', () => {\n      testability.increaseCount(2);\n      testability.whenStable(() => executed = true);\n\n      expect(executed).toBe(false);\n      testability.increaseCount(-1);\n      expect(executed).toBe(false);\n    });\n\n    it('should fire whenstable callbacks when pending drops to 0', () => {\n      testability.increaseCount(2);\n      testability.whenStable(() => executed = true);\n\n      expect(executed).toBe(false);\n\n      testability.increaseCount(-2);\n      expect(executed).toBe(true);\n    });\n  });\n}\n"]}