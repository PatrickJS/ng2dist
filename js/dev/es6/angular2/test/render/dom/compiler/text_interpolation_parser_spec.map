{"version":3,"sources":["text_interpolation_parser_spec.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,QAAO;AAAG,WAAS;AAAG,OAAK;AAAG,GAAC;AAAG,IAAE;AAAG,UAAQ;AAAG,GAAC,CAAC,KAAO,oBAAkB,CAAC;AACtF,KAAO,EAAC,uBAAsB,CAAC,KAAO,6DAA2D,CAAC;AAClG,KAAO,EAAC,eAAc,CAAC,KAAO,oDAAkD,CAAC;AACjF,KAAO,EAAC,UAAS;AAAG,YAAU,CAAC,KAAO,iCAA+B,CAAC;AACtE,KAAO,EAAC,KAAI;AAAG,OAAK,CAAC,KAAO,4BAA0B,CAAC;AACvD,KAAO,EAAC,kBAAiB,CAAC,KAAO,kBAAgB,CAAC;AAElD,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAO,AAAC,CAAC,yBAAwB,CAAG,EAAC,AAAD,IAAM;AACxC,WAAS,eAAa,CAAE,AAAD,CAAG;AACxB,WAAO,IAAI,gBAAc,AAAC,CAAC,CACzB,GAAI,mBAAiB,AAAC,EAAC,CACvB,IAAI,wBAAsB,AAAC,CAAC,GAAI,OAAK,AAAC,CAAC,GAAI,MAAI,AAAC,EAAC,CAAC,CAAC,CACrD,CAAC,CAAC;IACJ;AAAA,AAEA,WAAS,QAAM,CAAE,OAAM,CAAG;AACxB,WAAO,CAAA,WAAU,IAAI,AAAC,CACpB,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,OAAM,CAAC,CAChC,EAAC,cAAa,IAAM,CAAA,cAAa,uBAAuB,CAC1D,CAAC;IACH;AAAA,AAEA,WAAS,kBAAgB,CAAE,aAAY,CAAG,CAAA,YAAW,CAAG,CAAA,SAAQ,CAAG,CAAA,UAAS,CAAG;AAC7E,WAAK,AAAC,CAAC,aAAY,aAAa,CAAE,YAAW,CAAC,OAAO,CAAC,QAAQ,AAAC,CAAC,UAAS,CAAC,CAAC;AAC3E,WAAK,AAAC,CAAC,aAAY,mBAAmB,CAAE,YAAW,CAAC,CAAC,QAAQ,AAAC,CAAC,SAAQ,CAAC,CAAC;IAC3E;AAAA,AAEA,KAAC,AAAC,CAAC,mDAAkD,CAAG,EAAC,AAAD,IAAM;AAC5D,AAAI,QAAA,CAAA,MAAK,EAAI,CAAA,OAAM,AAAC,CAAC,EAAC,AAAC,CAAC,4CAA2C,CAAC,CAAC,CAAE,CAAA,CAAC,CAAC;AACzE,sBAAgB,AAAC,CAAC,MAAK,CAAG,EAAA,CAAG,EAAA,CAAG,YAAU,CAAC,CAAC;AAC5C,sBAAgB,AAAC,CAAC,MAAK,CAAG,EAAA,CAAG,EAAA,CAAG,YAAU,CAAC,CAAC;IAC9C,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,qDAAoD,CAAG,EAAC,AAAD,IAAM;AAC9D,AAAI,QAAA,CAAA,MAAK,EAAI,CAAA,OAAM,AAAC,CAAC,EAAC,AAAC,CAAC,sDAAqD,CAAC,CAAC,CAAE,CAAA,CAAC,CAAC;AACnF,sBAAgB,AAAC,CAAC,MAAK,CAAG,EAAA,CAAG,EAAA,CAAG,YAAU,CAAC,CAAC;AAC5C,sBAAgB,AAAC,CAAC,MAAK,CAAG,EAAA,CAAG,EAAA,CAAG,YAAU,CAAC,CAAC;IAC9C,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,mCAAkC,CAAG,EAAC,AAAD,IAAM;AAC5C,AAAI,QAAA,CAAA,MAAK,EAAI,CAAA,OAAM,AAAC,CAAC,EAAC,AAAC,CAAC,+BAA8B,CAAC,CAAC,CAAE,CAAA,CAAC,CAAC;AAC5D,sBAAgB,AAAC,CAAC,MAAK,CAAG,EAAA,CAAG,EAAA,CAAG,qBAAmB,CAAC,CAAC;IACvD,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,sDAAqD,CAAG,EAAC,AAAD,IAAM;AAC/D,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,OAAM,AAAC,CAAC,EAAC,AAAC,CAAC,kEAAiE,CAAC,CAAC,CAAC;AAC7F,sBAAgB,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,CAAG,EAAA,CAAG,EAAA,CAAG,eAAa,CAAC,CAAC;AACnD,WAAK,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,CAAC,KAAK,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,CAAC,CAAC;IACrC,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,kEAAiE,CAAG,EAAC,AAAD,IAAM;AAC3E,AAAI,QAAA,CAAA,MAAK,EAAI,CAAA,OAAM,AAAC,CAAC,EAAC,AAAC,CAAC,kCAAiC,CAAC,CAAC,CAAE,CAAA,CAAC,CAAC;AAC/D,sBAAgB,AAAC,CAAC,MAAK,CAAG,EAAA,CAAG,EAAA,CAAG,wBAAsB,CAAC,CAAC;IAC1D,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,qCAAoC,CAAG,EAAC,AAAD,IAAM;AAC9C,AAAI,QAAA,CAAA,MAAK,EAAI,CAAA,OAAM,AAAC,CAAC,EAAC,AAAC,CAAC,0BAAyB,CAAC,CAAC,CAAE,CAAA,CAAC,CAAC;AACvD,sBAAgB,AAAC,CAAC,MAAK,CAAG,EAAA,CAAG,EAAA,CAAG,gBAAc,CAAC,CAAC;IAClD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAA","file":"angular2/test/render/dom/compiler/text_interpolation_parser_spec.es6","sourcesContent":["import {describe, beforeEach, expect, it, iit, ddescribe, el} from 'angular2/test_lib';\nimport {TextInterpolationParser} from 'angular2/src/render/dom/compiler/text_interpolation_parser';\nimport {CompilePipeline} from 'angular2/src/render/dom/compiler/compile_pipeline';\nimport {MapWrapper, ListWrapper} from 'angular2/src/facade/collection';\nimport {Lexer, Parser} from 'angular2/change_detection';\nimport {IgnoreChildrenStep} from './pipeline_spec';\n\nexport function main() {\n  describe('TextInterpolationParser', () => {\n    function createPipeline() {\n      return new CompilePipeline([\n        new IgnoreChildrenStep(),\n        new TextInterpolationParser(new Parser(new Lexer()))\n      ]);\n    }\n\n    function process(element) {\n      return ListWrapper.map(\n        createPipeline().process(element),\n        (compileElement) => compileElement.inheritedElementBinder\n      );\n    }\n\n    function assertTextBinding(elementBinder, bindingIndex, nodeIndex, expression) {\n      expect(elementBinder.textBindings[bindingIndex].source).toEqual(expression);\n      expect(elementBinder.textBindingIndices[bindingIndex]).toEqual(nodeIndex);\n    }\n\n    it('should find text interpolation in normal elements', () => {\n      var result = process(el('<div>{{expr1}}<span></span>{{expr2}}</div>'))[0];\n      assertTextBinding(result, 0, 0, \"{{expr1}}\");\n      assertTextBinding(result, 1, 2, \"{{expr2}}\");\n    });\n\n    it('should find text interpolation in template elements', () => {\n      var result = process(el('<template>{{expr1}}<span></span>{{expr2}}</template>'))[0];\n      assertTextBinding(result, 0, 0, \"{{expr1}}\");\n      assertTextBinding(result, 1, 2, \"{{expr2}}\");\n    });\n\n    it('should allow multiple expressions', () => {\n      var result = process(el('<div>{{expr1}}{{expr2}}</div>'))[0];\n      assertTextBinding(result, 0, 0, \"{{expr1}}{{expr2}}\");\n    });\n\n    it('should not interpolate when compileChildren is false', () => {\n      var results = process(el('<div>{{included}}<span ignore-children>{{excluded}}</span></div>'));\n      assertTextBinding(results[0], 0, 0, \"{{included}}\");\n      expect(results[1]).toBe(results[0]);\n    });\n\n    it('should allow fixed text before, in between and after expressions', () => {\n      var result = process(el('<div>a{{expr1}}b{{expr2}}c</div>'))[0];\n      assertTextBinding(result, 0, 0, \"a{{expr1}}b{{expr2}}c\");\n    });\n\n    it('should escape quotes in fixed parts', () => {\n      var result = process(el(\"<div>'\\\"a{{expr1}}</div>\"))[0];\n      assertTextBinding(result, 0, 0, \"'\\\"a{{expr1}}\");\n    });\n  });\n}\n"]}