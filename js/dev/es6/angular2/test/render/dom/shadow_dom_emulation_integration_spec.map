{"version":3,"sources":["shadow_dom_emulation_integration_spec.js"],"names":[],"mappings":"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","file":"angular2/test/render/dom/shadow_dom_emulation_integration_spec.es6","sourcesContent":["import {\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  el,\n  elementText,\n  expect,\n  iit,\n  inject,\n  it,\n  xit,\n  SpyObject,\n} from 'angular2/test_lib';\n\nimport {MapWrapper, ListWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\n\nimport {\n  ProtoViewDto, ViewDefinition, ViewContainerRef, DirectiveMetadata\n} from 'angular2/src/render/api';\n\nimport {EmulatedScopedShadowDomStrategy} from 'angular2/src/render/dom/shadow_dom/emulated_scoped_shadow_dom_strategy';\nimport {EmulatedUnscopedShadowDomStrategy} from 'angular2/src/render/dom/shadow_dom/emulated_unscoped_shadow_dom_strategy';\nimport {NativeShadowDomStrategy} from 'angular2/src/render/dom/shadow_dom/native_shadow_dom_strategy';\nimport {UrlResolver} from 'angular2/src/services/url_resolver';\nimport {StyleUrlResolver} from 'angular2/src/render/dom/shadow_dom/style_url_resolver';\nimport {StyleInliner} from 'angular2/src/render/dom/shadow_dom/style_inliner';\n\nimport {IntegrationTestbed} from './integration_testbed';\n\nexport function main() {\n  describe('ShadowDom integration tests', function() {\n    var urlResolver, styleUrlResolver, styleInliner;\n    var strategies = {\n      \"scoped\" : () => new EmulatedScopedShadowDomStrategy(styleInliner, styleUrlResolver, null),\n      \"unscoped\" : () => new EmulatedUnscopedShadowDomStrategy(styleUrlResolver, null)\n    }\n    if (DOM.supportsNativeShadowDOM()) {\n      StringMapWrapper.set(strategies, \"native\", () => new NativeShadowDomStrategy(styleUrlResolver));\n    }\n\n    beforeEach( () => {\n      urlResolver = new UrlResolver();\n      styleUrlResolver = new StyleUrlResolver(urlResolver);\n      styleInliner = new StyleInliner(null, styleUrlResolver, urlResolver);\n    });\n\n\n    StringMapWrapper.forEach(strategies,\n      (strategyFactory, name) => {\n\n      describe(`${name} shadow dom strategy`, () => {\n\n        var testbed, renderer, rootEl, compile, compileRoot;\n\n        function createRenderer({templates}) {\n          testbed = new IntegrationTestbed({\n            shadowDomStrategy: strategyFactory(),\n            templates: ListWrapper.concat(templates, componentTemplates)\n          });\n          renderer = testbed.renderer;\n          compileRoot = (rootEl, componentId) => testbed.compileRoot(rootEl, componentId);\n          compile = (componentId) => testbed.compile(componentId);\n        }\n\n        beforeEach( () => {\n          rootEl = el('<div></div>');\n        });\n\n        it('should support simple components', inject([AsyncTestCompleter], (async) => {\n          createRenderer({\n            templates: [new ViewDefinition({\n              componentId: 'main',\n              template: '<simple>' +\n                '<div>A</div>' +\n                '</simple>',\n              directives: [simple]\n            })]\n          });\n          compileRoot(rootEl, 'main').then( (pv) => {\n            renderer.createView(pv.render);\n\n            expect(rootEl).toHaveText('SIMPLE(A)');\n\n            async.done();\n          });\n        }));\n\n        it('should support dynamic components', inject([AsyncTestCompleter], (async) => {\n          createRenderer({\n            templates: [new ViewDefinition({\n              componentId: 'main',\n              template: '<dynamic>' +\n                '<div>A</div>' +\n                '</dynamic>',\n              directives: [dynamicComponent]\n            })]\n          });\n          compileRoot(rootEl, 'main').then( (rootPv) => {\n            compile('simple').then( (simplePv) => {\n              var views = renderer.createView(rootPv.render);\n              var simpleViews = renderer.createView(simplePv.render);\n              renderer.setDynamicComponentView(views[1], 0, simpleViews[0]);\n\n              expect(rootEl).toHaveText('SIMPLE(A)');\n\n              async.done();\n            });\n          });\n        }));\n\n        it('should support multiple content tags', inject([AsyncTestCompleter], (async) => {\n          createRenderer({\n            templates: [new ViewDefinition({\n              componentId: 'main',\n              template: '<multiple-content-tags>' +\n                  '<div>B</div>' +\n                  '<div>C</div>' +\n                  '<div class=\"left\">A</div>' +\n                '</multiple-content-tags>',\n              directives: [multipleContentTagsComponent]\n            })]\n          });\n          compileRoot(rootEl, 'main').then( (pv) => {\n            renderer.createView(pv.render);\n\n            expect(rootEl).toHaveText('(A, BC)');\n\n            async.done();\n          });\n        }));\n\n        it('should redistribute only direct children', inject([AsyncTestCompleter], (async) => {\n          createRenderer({\n            templates: [new ViewDefinition({\n              componentId: 'main',\n              template: '<multiple-content-tags>' +\n                '<div>B<div class=\"left\">A</div></div>' +\n                '<div>C</div>' +\n                '</multiple-content-tags>',\n              directives: [multipleContentTagsComponent]\n            })]\n          });\n          compileRoot(rootEl, 'main').then( (pv) => {\n            renderer.createView(pv.render);\n\n            expect(rootEl).toHaveText('(, BAC)');\n\n            async.done();\n          });\n        }));\n\n        it(\"should redistribute direct child viewcontainers when the light dom changes\", inject([AsyncTestCompleter], (async) => {\n          createRenderer({\n            templates: [new ViewDefinition({\n              componentId: 'main',\n              template: '<multiple-content-tags>' +\n                '<div><div template=\"manual\" class=\"left\">A</div></div>' +\n                '<div>B</div>' +\n                '</multiple-content-tags>',\n              directives: [multipleContentTagsComponent, manualViewportDirective]\n            })]\n          });\n          compileRoot(rootEl, 'main').then( (pv) => {\n            var viewRefs = renderer.createView(pv.render);\n            var vcRef = new ViewContainerRef(viewRefs[1], 1);\n            var vcProtoViewRef = pv.elementBinders[0].nestedProtoView\n              .elementBinders[1].nestedProtoView.render;\n            var childViewRef = renderer.createView(vcProtoViewRef)[0];\n\n            expect(rootEl).toHaveText('(, B)');\n\n            renderer.insertViewIntoContainer(vcRef, childViewRef);\n\n            expect(rootEl).toHaveText('(, AB)');\n\n            renderer.detachViewFromContainer(vcRef, 0);\n\n            expect(rootEl).toHaveText('(, B)');\n\n            async.done();\n          });\n        }));\n\n        it(\"should redistribute when the light dom changes\", inject([AsyncTestCompleter], (async) => {\n          createRenderer({\n            templates: [new ViewDefinition({\n              componentId: 'main',\n              template: '<multiple-content-tags>' +\n                '<div template=\"manual\" class=\"left\">A</div>' +\n                '<div>B</div>' +\n                '</multiple-content-tags>',\n              directives: [multipleContentTagsComponent, manualViewportDirective]\n            })]\n          });\n          compileRoot(rootEl, 'main').then( (pv) => {\n            var viewRefs = renderer.createView(pv.render);\n            var vcRef = new ViewContainerRef(viewRefs[1], 1);\n            var vcProtoViewRef = pv.elementBinders[0].nestedProtoView\n              .elementBinders[1].nestedProtoView.render;\n            var childViewRef = renderer.createView(vcProtoViewRef)[0];\n\n            expect(rootEl).toHaveText('(, B)');\n\n            renderer.insertViewIntoContainer(vcRef, childViewRef);\n\n            expect(rootEl).toHaveText('(A, B)');\n\n            renderer.detachViewFromContainer(vcRef, 0);\n\n            expect(rootEl).toHaveText('(, B)');\n\n            async.done();\n          });\n        }));\n\n        it(\"should support nested components\", inject([AsyncTestCompleter], (async) => {\n          createRenderer({\n            templates: [new ViewDefinition({\n              componentId: 'main',\n              template: '<outer-with-indirect-nested>' +\n                '<div>A</div>' +\n                '<div>B</div>' +\n                '</outer-with-indirect-nested>',\n              directives: [outerWithIndirectNestedComponent]\n            })]\n          });\n          compileRoot(rootEl, 'main').then( (pv) => {\n            renderer.createView(pv.render);\n\n            expect(rootEl).toHaveText('OUTER(SIMPLE(AB))');\n\n            async.done();\n          });\n        }));\n\n        it(\"should support nesting with content being direct child of a nested component\", inject([AsyncTestCompleter], (async) => {\n          createRenderer({\n            templates: [new ViewDefinition({\n              componentId: 'main',\n              template: '<outer>' +\n                '<div template=\"manual\" class=\"left\">A</div>' +\n                '<div>B</div>' +\n                '<div>C</div>' +\n                '</outer>',\n              directives: [outerComponent, manualViewportDirective]\n            })]\n          });\n          compileRoot(rootEl, 'main').then( (pv) => {\n            var viewRefs = renderer.createView(pv.render);\n            var vcRef = new ViewContainerRef(viewRefs[1], 1);\n            var vcProtoViewRef = pv.elementBinders[0].nestedProtoView\n              .elementBinders[1].nestedProtoView.render;\n            var childViewRef = renderer.createView(vcProtoViewRef)[0];\n\n            expect(rootEl).toHaveText('OUTER(INNER(INNERINNER(,BC)))');\n\n            renderer.insertViewIntoContainer(vcRef, childViewRef);\n\n            expect(rootEl).toHaveText('OUTER(INNER(INNERINNER(A,BC)))');\n            async.done();\n          });\n        }));\n\n        it('should redistribute when the shadow dom changes', inject([AsyncTestCompleter], (async) => {\n          createRenderer({\n            templates: [new ViewDefinition({\n              componentId: 'main',\n              template: '<conditional-content>' +\n                '<div class=\"left\">A</div>' +\n                '<div>B</div>' +\n                '<div>C</div>' +\n                '</conditional-content>',\n              directives: [conditionalContentComponent]\n            })]\n          });\n          compileRoot(rootEl, 'main').then( (pv) => {\n            var viewRefs = renderer.createView(pv.render);\n            var vcRef = new ViewContainerRef(viewRefs[2], 0);\n            var vcProtoViewRef = pv.elementBinders[0].nestedProtoView\n              .elementBinders[0].nestedProtoView\n              .elementBinders[0].nestedProtoView.render;\n            var childViewRef = renderer.createView(vcProtoViewRef)[0];\n\n            expect(rootEl).toHaveText('(, ABC)');\n\n            renderer.insertViewIntoContainer(vcRef, childViewRef);\n\n            expect(rootEl).toHaveText('(A, BC)');\n\n            renderer.detachViewFromContainer(vcRef, 0);\n\n            expect(rootEl).toHaveText('(, ABC)');\n\n            async.done();\n          });\n        }));\n\n        //Implement once NgElement support changing a class\n        //it(\"should redistribute when a class has been added or removed\");\n        //it('should not lose focus', () => {\n        //  var temp = `<simple>aaa<input type=\"text\" id=\"focused-input\" ng-class=\"{'aClass' : showClass}\"> bbb</simple>`;\n        //\n        //  compile(temp, (view, lc) => {\n        //    var input = view.rootNodes[1];\n        //    input.focus();\n        //\n        //    expect(document.activeElement.id).toEqual(\"focused-input\");\n        //\n        //    // update class of input\n        //\n        //    expect(document.activeElement.id).toEqual(\"focused-input\");\n        //  });\n        //});\n      });\n    });\n\n  });\n}\n\n\nvar simple = new DirectiveMetadata({\n  selector: 'simple',\n  id: 'simple',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n\nvar dynamicComponent = new DirectiveMetadata({\n  selector: 'dynamic',\n  id: 'dynamic',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n\nvar multipleContentTagsComponent = new DirectiveMetadata({\n  selector: 'multiple-content-tags',\n  id: 'multiple-content-tags',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n\nvar manualViewportDirective = new DirectiveMetadata({\n  selector: '[manual]',\n  id: 'manual',\n  type: DirectiveMetadata.VIEWPORT_TYPE\n});\n\nvar outerWithIndirectNestedComponent = new DirectiveMetadata({\n  selector: 'outer-with-indirect-nested',\n  id: 'outer-with-indirect-nested',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n\nvar outerComponent = new DirectiveMetadata({\n  selector: 'outer',\n  id: 'outer',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n\nvar innerComponent = new DirectiveMetadata({\n  selector: 'inner',\n  id: 'inner',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n\nvar innerInnerComponent = new DirectiveMetadata({\n  selector: 'innerinner',\n  id: 'innerinner',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n\nvar conditionalContentComponent = new DirectiveMetadata({\n  selector: 'conditional-content',\n  id: 'conditional-content',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n\nvar autoViewportDirective = new DirectiveMetadata({\n  selector: '[auto]',\n  id: '[auto]',\n  type: DirectiveMetadata.VIEWPORT_TYPE\n});\n\nvar componentTemplates = [\n  new ViewDefinition({\n    componentId: 'simple',\n    template: 'SIMPLE(<content></content>)',\n    directives: []\n  }),\n  new ViewDefinition({\n    componentId: 'multiple-content-tags',\n    template: '(<content select=\".left\"></content>, <content></content>)',\n    directives: []\n  }),\n  new ViewDefinition({\n    componentId: 'outer-with-indirect-nested',\n    template: 'OUTER(<simple><div><content></content></div></simple>)',\n    directives: [simple]\n  }),\n  new ViewDefinition({\n    componentId: 'outer',\n    template: 'OUTER(<inner><content></content></inner>)',\n    directives: [innerComponent]\n  }),\n  new ViewDefinition({\n    componentId: 'inner',\n    template: 'INNER(<innerinner><content></content></innerinner>)',\n    directives: [innerInnerComponent]\n  }),\n  new ViewDefinition({\n    componentId: 'innerinner',\n    template: 'INNERINNER(<content select=\".left\"></content>,<content></content>)',\n    directives: []\n  }),\n  new ViewDefinition({\n    componentId: 'conditional-content',\n    template: '<div>(<div *auto=\"cond\"><content select=\".left\"></content></div>, <content></content>)</div>',\n    directives: [autoViewportDirective]\n  })\n];\n"]}