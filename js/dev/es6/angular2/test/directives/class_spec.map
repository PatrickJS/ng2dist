{"version":3,"sources":["class_spec.js"],"names":[],"mappings":"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","file":"angular2/test/directives/class_spec.es6","sourcesContent":["import {\n  AsyncTestCompleter,\n  beforeEach,\n  beforeEachBindings,\n  ddescribe,\n  xdescribe,\n  describe,\n  el,\n  expect,\n  iit,\n  inject,\n  it,\n  xit,\n  } from 'angular2/test_lib';\n\nimport {StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {View} from 'angular2/src/core/annotations/view';\nimport {Component} from 'angular2/src/core/annotations/annotations';\n\nimport {TestBed} from 'angular2/src/test_lib/test_bed';\n\nimport {CSSClass} from 'angular2/src/directives/class';\n\nexport function main() {\n  describe('binding to CSS class list', () => {\n\n    it('should add classes specified in an object literal',\n      inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var template = '<div [class]=\"{foo: true, bar: false}\"></div>';\n\n      tb.createView(TestComponent, {html: template}).then((view) => {\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('ng-binding foo');\n\n        async.done();\n      });\n    }));\n\n    it('should add and remove classes based on changes in object literal values',\n      inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var template = '<div [class]=\"{foo: condition, bar: !condition}\"></div>';\n\n      tb.createView(TestComponent, {html: template}).then((view) => {\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('ng-binding foo');\n\n        view.context.condition = false;\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('ng-binding bar');\n\n        async.done();\n      });\n    }));\n\n    it('should add and remove classes based on changes to the expression object',\n      inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var template = '<div [class]=\"expr\"></div>';\n\n      tb.createView(TestComponent, {html: template}).then((view) => {\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('ng-binding foo');\n\n        StringMapWrapper.set(view.context.expr, 'bar', true);\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('ng-binding foo bar');\n\n        StringMapWrapper.set(view.context.expr, 'baz', true);\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('ng-binding foo bar baz');\n\n        StringMapWrapper.delete(view.context.expr, 'bar');\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('ng-binding foo baz');\n\n        async.done();\n      });\n    }));\n\n    it('should retain existing classes when expression evaluates to null',\n      inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var template = '<div [class]=\"expr\"></div>';\n\n      tb.createView(TestComponent, {html: template}).then((view) => {\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('ng-binding foo');\n\n        view.context.expr = null;\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('ng-binding foo');\n\n        view.context.expr = {'foo': false, 'bar': true};\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('ng-binding bar');\n\n        async.done();\n      });\n    }));\n\n    it('should co-operate with the class attribute',\n      inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var template = '<div [class]=\"expr\" class=\"init foo\"></div>';\n\n      tb.createView(TestComponent, {html: template}).then((view) => {\n        StringMapWrapper.set(view.context.expr, 'bar', true);\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('init foo ng-binding bar');\n\n        StringMapWrapper.set(view.context.expr, 'foo', false);\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('init ng-binding bar');\n\n        async.done();\n      });\n    }));\n\n    it('should co-operate with the class attribute and class.name binding',\n      inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var template = '<div class=\"init foo\" [class]=\"expr\" [class.baz]=\"condition\"></div>';\n\n      tb.createView(TestComponent, {html: template}).then((view) => {\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('init foo ng-binding baz');\n\n        StringMapWrapper.set(view.context.expr, 'bar', true);\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('init foo ng-binding baz bar');\n\n        StringMapWrapper.set(view.context.expr, 'foo', false);\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('init ng-binding baz bar');\n\n        view.context.condition = false;\n        view.detectChanges();\n        expect(view.rootNodes[0].className).toEqual('init ng-binding bar');\n\n        async.done();\n      });\n    }));\n  })\n}\n\n@Component({selector: 'test-cmp'})\n@View({directives: [CSSClass]})\nclass TestComponent {\n  condition:boolean;\n  expr;\n  constructor() {\n    this.condition = true;\n    this.expr = {'foo': true, 'bar': false};\n  }\n}\n"]}