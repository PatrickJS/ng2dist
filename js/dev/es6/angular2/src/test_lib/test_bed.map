{"version":3,"sources":["test_bed.js"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAC,QAAO;AAAG,KAAG,CAAC,KAAO,cAAY,CAAC;AAE1C,KAAO,EAAC,IAAG;AAAG,UAAQ;AAAG,cAAY,CAAC,KAAO,2BAAyB,CAAC;AACvE,KAAO,EAAC,OAAM,CAAC,KAAO,4BAA0B,CAAC;AACjD,KAAO,EAAC,OAAM,CAAC,KAAO,2BAAyB,CAAC;AAChD,KAAO,EAAC,IAAG,CAAC,KAAO,iCAA+B,CAAC;AAEnD,KAAO,EAAC,IAAG,CAAC,KAAO,qCAAmC,CAAC;AAEvD,KAAO,EAAC,gBAAe,CAAC,KAAO,+CAA6C,CAAC;AAC7E,KAAO,EAAC,QAAO,CAAC,KAAO,sCAAoC,CAAC;AAC5D,KAAO,EAAC,OAAM,CAAC,KAAO,kCAAgC,CAAC;AACvD,KAAO,EAAC,WAAU,CAAC,KAAO,0CAAwC,CAAC;AAEnE,KAAO,EAAC,gBAAe,CAAC,KAAO,8CAA4C,CAAC;AAC5E,KAAO,EAAC,uBAAsB,CAAC,KAAO,uDAAqD,CAAC;AAE5F,KAAO,EAAC,SAAQ;AAAG,cAAY;AAAG,GAAC,CAAC,KAAO,UAAQ,CAAC;AACpD,KAAO,EAAC,eAAc;AAAG,UAAQ,CAAC,KAAO,eAAa,CAAC;AAKvD,KAAO,MAAM,QAAM;AAGjB,YAAU,CAAE,QAAO,AAAU,CAAG;AA1BlC,SAAK,cAAc,UA0BK,SAAO,CA1BO,CAAA;AA2BlC,OAAG,UAAU,EAAI,SAAO,CAAC;EAC3B;AAAA,AAUA,aAAW,CAAE,SAAQ,AAAM,CAAG,CAAA,QAAO,AAAM,CAAS;AAtCtD,SAAK,cAAc,WAsCO,KAAG,WAAa,KAAG,CAtCP,CAAA;AAuClC,OAAG,UAAU,IAAI,AAAC,CAAC,gBAAe,CAAC,QAAQ,AAAC,CAAC,SAAQ,CAAG,SAAO,CAAC,CAAC;EACnE;AAAA,AASA,kBAAgB,CAAE,SAAQ,AAAM,CAAG,CAAA,IAAG,AAAQ,CAAS;AAjDzD,SAAK,cAAc,WAiDY,KAAG,OAjDlC,CAAA,MAAK,KAAgB,QAAiB,CAAA;AAkDlC,OAAG,UAAU,IAAI,AAAC,CAAC,gBAAe,CAAC,kBAAkB,AAAC,CAAC,SAAQ,CAAG,KAAG,CAAC,CAAC;EACzE;AAAA,AASA,kBAAgB,CAAE,SAAQ,AAAM,CAAG,CAAA,IAAG,AAAM,CAAG,CAAA,EAAC,AAAM,CAAS;AA5DjE,SAAK,cAAc,WA4DY,KAAG,OAAS,KAAG,KAAO,KAAG,CA5DlB,CAAA;AA6DlC,OAAG,UAAU,IAAI,AAAC,CAAC,gBAAe,CAAC,0BAA0B,AAAC,CAAC,SAAQ,CAAG,KAAG,CAAG,GAAC,CAAC,CAAC;EACrF;AAAA,AAaA,WAAS,CAAE,SAAQ,AAAM,CACd,CAAA,CAAC,OAAM,EAAI,KAAG;AAAG,OAAG,EAAI,KAAG,CAAC,EAAiC,GAAC;AA5E3E,SAAK,cAAc,WA2EK,KAAG,CA3EW,CAAA;AA8ElC,OAAI,OAAM,AAAC,CAAC,SAAQ,CAAC,CAAA,EAAK,CAAA,OAAM,AAAC,CAAC,OAAM,CAAC,CAAG;AAC1C,UAAM,IAAI,cAAY,AAAC,CAAC,sDAAqD,CAAC,CAAC;IACjF;AAAA,AAEA,OAAI,OAAM,AAAC,CAAC,SAAQ,CAAC,CAAG;AACtB,cAAQ,EAAI,CAAA,SAAQ,AAAC,CAAC,OAAM,CAAC,CAAC;IAChC,KAAO,KAAI,OAAM,AAAC,CAAC,OAAM,CAAC,CAAG;AAC3B,YAAM,EAAI,CAAA,eAAc,AAAC,CAAC,SAAQ,CAAC,CAAC;IACtC;AAAA,AAEA,OAAI,SAAQ,AAAC,CAAC,IAAG,CAAC,CAAG;AACnB,SAAG,kBAAkB,AAAC,CAAC,SAAQ,CAAG,KAAG,CAAC,CAAC;IACzC;AAAA,AAEI,MAAA,CAAA,MAAK,EAAI,CAAA,EAAC,AAAC,CAAC,aAAY,CAAC,CAAC;AAC9B,AAAI,MAAA,CAAA,cAAa,EAAI,CAAA,IAAG,UAAU,IAAI,AAAC,CAAC,uBAAsB,CAAC,CAAC;AAChE,AAAI,MAAA,CAAA,gBAAe,EAAI,CAAA,gBAAe,kBAAkB,AAAC,CACvD,IAAG,AAAC,CAAC,SAAQ,CAAC,QAAQ,AAAC,CAAC,OAAM,CAAC,CAC/B,CAAA,cAAa,KAAK,AAAC,CAAC,SAAQ,CAAC,WAAW,CAC1C,CAAC;AAjGL,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAkGd,IAAG,UAAU,IAAI,AAAC,CAAC,QAAO,CAAC,YAAY,AAAC,CAAC,MAAK,CAAG,iBAAe,CAAC,KAAK,AAAC,CAAC,CAAC,EAAC,IAAM;AACrF,AAAI,QAAA,CAAA,WAAU,EAAI,CAAA,IAAG,UAAU,IAAI,AAAC,CAAC,WAAU,CAAC,CAAC;AACjD,AAAI,QAAA,CAAA,IAAG,EAAI,CAAA,WAAU,QAAQ,AAAC,CAAC,EAAC,CAAC,CAAC;AAClC,SAAG,QAAQ,AAAC,CAAC,IAAG,UAAU,CAAG,KAAG,CAAG,QAAM,CAAG,KAAG,CAAC,CAAC;AACjD,WAAO,IAAI,UAAQ,AAAC,CAAC,IAAG,oBAAoB,CAAE,CAAA,CAAC,CAAC,CAAC;IACnD,CAAC,CAvGsC,CAA3C,CAAA,MAAK,YAAuB,AA4EmD,CAAA,OAAM,CAAE,QAAM,CAAC,AA5E/C,CAAgB,CAAA;EAwG7D;AACF;AAAA,AAzGA,KAAK,eAAe,AAAC,uBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAyBF,QAAO,GAzBkB;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,8CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAqCA,IAAG,IAAa,IAAG,GArCI;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,mDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAgDK,IAAG,IAjDlC,MAAK,KAAgB,UAC4B;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,mDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YA2DK,IAAG,IAAS,IAAG,IAAO,IAAG,GA3DP;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,4CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YA0EF,IAAG,OA1EsB;EAAC,CAAC,CAAC,CAAC;AA6GrD,KAAO,MAAM,UAAQ;AAGnB,YAAU,CAAE,IAAG,AAAS,CAAG;AAjH7B,SAAK,cAAc,MAiHC,QAAM,CAjHY,CAAA;AAkHlC,OAAG,MAAM,EAAI,KAAG,CAAC;EACnB;AAAA,AAEA,IAAI,QAAM;AArHZ,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAsHd,IAAG,MAAM,QAAQ,CAtHe,CAA3C,CAAA,MAAK,KAAgB,KAA0C,CAAA;EAuH7D;AAEA,IAAI,UAAQ;AAzHd,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CA0Hd,aAAY,AAAC,CAAC,IAAG,MAAM,CAAC,CA1HQ,CAyHxB,KAAG,CAzHyC,CAAA;EA2H7D;AAEA,cAAY,CAAE,AAAD,CAAS;AACpB,OAAG,MAAM,eAAe,cAAc,AAAC,EAAC,CAAC;EAC3C;AAAA,AAEA,cAAY,CAAE,QAAO,CAAG;AACtB,SAAO,CAAA,SAAQ,AAAC,CAAC,IAAG,MAAM,CAAG,SAAO,CAAC,CAAC;EACxC;AAAA,AAOA,IAAI,QAAM;AA1IZ,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CA2Id,IAAG,MAAM,CA3IuB,CA0I1B,QAAM,CA1IwC,CAAA;EA4I7D;AACF;AAAA,AA7IA,KAAK,eAAe,AAAC,yBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAgHN,OAAM,GAhHuB;EAAC,CAAC,CAAC,CAAC;AA6IrD","file":"angular2/src/test_lib/test_bed.es6","sourcesContent":["import {Injector, bind} from 'angular2/di';\n\nimport {Type, isPresent, BaseException} from 'angular2/src/facade/lang';\nimport {Promise} from 'angular2/src/facade/async';\nimport {isBlank} from 'angular2/src/facade/lang';\nimport {List} from 'angular2/src/facade/collection';\n\nimport {View} from 'angular2/src/core/annotations/view';\n\nimport {TemplateResolver} from 'angular2/src/core/compiler/template_resolver';\nimport {Compiler} from 'angular2/src/core/compiler/compiler';\nimport {AppView} from 'angular2/src/core/compiler/view';\nimport {ViewFactory} from 'angular2/src/core/compiler/view_factory';\n\nimport {DirectiveBinding} from 'angular2/src/core/compiler/element_injector';\nimport {DirectiveMetadataReader} from 'angular2/src/core/compiler/directive_metadata_reader';\n\nimport {queryView, viewRootNodes, el} from './utils';\nimport {instantiateType, getTypeOf} from './lang_utils';\n\n/**\n * @exportedAs angular2/test\n */\nexport class TestBed {\n  _injector: Injector;\n\n  constructor(injector: Injector) {\n    this._injector = injector;\n  }\n\n  /**\n   * Overrides the [View] of a [Component].\n   *\n   * @see setInlineTemplate() to only override the html\n   *\n   * @param {Type} component\n   * @param {ViewDefinition} template\n   */\n  overrideView(component: Type, template: View): void {\n    this._injector.get(TemplateResolver).setView(component, template);\n  }\n\n  /**\n   * Overrides only the html of a [Component].\n   * All the other propoerties of the component's [View] are preserved.\n   *\n   * @param {Type} component\n   * @param {string} html\n   */\n  setInlineTemplate(component: Type, html: string): void {\n    this._injector.get(TemplateResolver).setInlineTemplate(component, html);\n  }\n\n  /**\n   * Overrides the directives from the component [View].\n   *\n   * @param {Type} component\n   * @param {Type} from\n   * @param {Type} to\n   */\n  overrideDirective(component: Type, from: Type, to: Type): void {\n    this._injector.get(TemplateResolver).overrideTemplateDirective(component, from, to);\n  }\n\n  /**\n   * Creates a [AppView] for the given component.\n   *\n   * Only either a component or a context needs to be specified but both can be provided for\n   * advanced use cases (ie subclassing the context).\n   *\n   * @param {Type} component\n   * @param {*} context\n   * @param {string} html Use as the component template when specified (shortcut for setInlineTemplate)\n   * @return {Promise<ViewProxy>}\n   */\n  createView(component: Type,\n             {context = null, html = null}: {context:any, html: string} = {}): Promise<AppView> {\n\n    if (isBlank(component) && isBlank(context)) {\n      throw new BaseException('You must specified at least a component or a context');\n    }\n\n    if (isBlank(component)) {\n      component = getTypeOf(context);\n    } else if (isBlank(context)) {\n      context = instantiateType(component);\n    }\n\n    if (isPresent(html)) {\n      this.setInlineTemplate(component, html);\n    }\n\n    var rootEl = el('<div></div>');\n    var metadataReader = this._injector.get(DirectiveMetadataReader);\n    var componentBinding = DirectiveBinding.createFromBinding(\n      bind(component).toValue(context),\n      metadataReader.read(component).annotation\n    );\n    return this._injector.get(Compiler).compileRoot(rootEl, componentBinding).then((pv) => {\n      var viewFactory = this._injector.get(ViewFactory);\n      var view = viewFactory.getView(pv);\n      view.hydrate(this._injector, null, context, null);\n      return new ViewProxy(view.componentChildViews[0]);\n    });\n  }\n}\n\n/**\n * Proxy to [AppView] return by [TestBed.createView] which offers a high level API for tests.\n */\nexport class ViewProxy {\n  _view: AppView;\n\n  constructor(view: AppView) {\n    this._view = view;\n  }\n\n  get context(): any {\n    return this._view.context;\n  }\n\n  get rootNodes(): List {\n    return viewRootNodes(this._view);\n  }\n\n  detectChanges(): void {\n    this._view.changeDetector.detectChanges();\n  }\n\n  querySelector(selector) {\n    return queryView(this._view, selector);\n  }\n\n  /**\n   * @returns {AppView} return the underlying [AppView].\n   *\n   * Prefer using the other methods which hide implementation details.\n   */\n  get rawView(): AppView {\n    return this._view;\n  }\n}\n"]}