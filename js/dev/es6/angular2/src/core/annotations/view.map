{"version":3,"sources":["view.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,QAAO;AAAG,MAAI;AAAG,KAAG,CAAC,KAAO,2BAAyB,CAAC;AAkC9D,KAAO,MAAM,KAAG;AAQd,AACA,YAAU,CAAE,CACR,WAAU;AACV,WAAO;AACP,aAAS;AACT,aAAS;AACT,SAAK;AACL,SAAK;AACL,SAAK,CACP,AAQA,CACF;AACE,OAAG,YAAY,EAAI,YAAU,CAAC;AAC9B,OAAG,SAAS,EAAI,SAAO,CAAC;AACxB,OAAG,WAAW,EAAI,WAAS,CAAC;AAC5B,OAAG,WAAW,EAAI,WAAS,CAAC;AAC5B,OAAG,OAAO,EAAI,OAAK,CAAC;AACpB,OAAG,OAAO,EAAI,OAAK,CAAC;AACpB,OAAG,OAAO,EAAI,OAAK,CAAC;EACtB;AAAA,AACF;AAAA,AArEA,KAAK,eAAe,AAAC,qBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAyCvB,MAAI,AAAC,EAAC,EAzCwC;EAAC,CAAC,CAAC,CAAC;AAqErD","file":"angular2/src/core/annotations/view.es6","sourcesContent":["import {ABSTRACT, CONST, Type} from 'angular2/src/facade/lang';\n\n/**\n * Declare the available HTML templates for an application.\n *\n * Each angular component requires a single `@Component` and at least one `@View` annotation. The @View\n * annotation specifies the HTML template to use, and lists the directives that are active within the template.\n *\n * When a component is instantiated, the template is loaded into the component's shadow root, and the\n * expressions and statements in the template are evaluated against the component.\n *\n * For details on the `@Component` annotation, see [Component].\n *\n * ## Example\n *\n * ```\n * @Component({\n *   selector: 'greet'\n * })\n * @View({\n *   template: 'Hello {{name}}!',\n *   directives: [GreetUser, Bold]\n * })\n * class Greet {\n *   name: string;\n *\n *   constructor() {\n *     this.name = 'World';\n *   }\n * }\n * ```\n *\n * @exportedAs angular2/annotations\n */\nexport class View {\n  templateUrl:any; //string;\n  template:any; //string;\n  directives:any; //List<Type>;\n  formatters:any; //List<Type>;\n  source:any;//List<View>;\n  locale:any; //string\n  device:any; //string\n  @CONST()\n  constructor({\n      templateUrl,\n      template,\n      directives,\n      formatters,\n      source,\n      locale,\n      device\n    }: {\n      templateUrl: string,\n      template: string,\n      directives: List<Type>,\n      formatters: List<Type>,\n      source: List<View>,\n      locale: string,\n      device: string\n    })\n  {\n    this.templateUrl = templateUrl;\n    this.template = template;\n    this.directives = directives;\n    this.formatters = formatters;\n    this.source = source;\n    this.locale = locale;\n    this.device = device;\n  }\n}\n"]}