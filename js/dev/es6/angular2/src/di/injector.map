{"version":3,"sources":["injector.js"],"names":[],"mappings":"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","file":"angular2/src/di/injector.es6","sourcesContent":["import {Map, List, MapWrapper, ListWrapper} from 'angular2/src/facade/collection';\nimport {ResolvedBinding, Binding, BindingBuilder, bind} from './binding';\nimport {ProviderError, NoProviderError, AsyncBindingError, CyclicDependencyError,\n  InstantiationError, InvalidBindingError} from './exceptions';\nimport {FunctionWrapper, Type, isPresent, isBlank} from 'angular2/src/facade/lang';\nimport {Promise, PromiseWrapper} from 'angular2/src/facade/async';\nimport {Key} from './key';\n\nvar _constructing = new Object();\nvar _notFound = new Object();\n\nclass _Waiting {\n  promise:Promise;\n  constructor(promise:Promise) {\n    this.promise = promise;\n  }\n}\nfunction _isWaiting(obj):boolean {\n  return obj instanceof _Waiting;\n}\n\n\nexport class Injector {\n  _bindings:List;\n  _instances:List;\n  _parent:Injector;\n  _defaultBindings:boolean;\n  _asyncStrategy: _AsyncInjectorStrategy;\n  _syncStrategy:_SyncInjectorStrategy;\n\n  /**\n   * Creates/looks up factory functions and dependencies from binding\n   * declarations and flattens bindings into a single [List].\n   *\n   * The returned list is sparse, indexed by [Key.id]. It is generally not\n   * useful to application code other than for passing it to [Injector]\n   * functions that require resolved binding lists, such as\n   * [fromResolvedBindings] and [createChildFromResolved].\n   */\n  static resolve(bindings:List/*<ResolvedBinding|Binding|Type|List>*/):List<ResolvedBinding> {\n    var resolvedBindings = _resolveBindings(bindings);\n    var flatten = _flattenBindings(resolvedBindings, MapWrapper.create());\n    return _createListOfBindings(flatten);\n  }\n\n  /**\n   * Resolves bindings and creates an injector based on those bindings. This function is slower than the\n   * corresponding [fromResolvedBindings] because it needs to resolve bindings. Prefer [fromResolvedBindings]\n   * in performance-critical code that creates lots of injectors.\n   */\n  static resolveAndCreate(bindings:List/*<ResolvedBinding|Binding|Type|List>*/, {defaultBindings=false}={}) {\n    return new Injector(Injector.resolve(bindings), null, defaultBindings);\n  }\n\n  /**\n   * Creates an injector from previously resolved bindings. This bypasses a lot\n   * of computation and is the recommended way to construct injectors in\n   * performance-sensitive parts.\n   */\n  static fromResolvedBindings(bindings:List<ResolvedBinding>, {defaultBindings=false}={}) {\n    return new Injector(bindings, null, defaultBindings);\n  }\n\n  constructor(bindings:List<ResolvedBinding>, parent:Injector, defaultBindings:boolean) {\n    this._bindings = bindings;\n    this._instances = this._createInstances();\n    this._parent = parent;\n    this._defaultBindings = defaultBindings;\n    this._asyncStrategy = new _AsyncInjectorStrategy(this);\n    this._syncStrategy = new _SyncInjectorStrategy(this);\n  }\n\n  get(token) {\n    return this._getByKey(Key.get(token), false, false, false);\n  }\n\n  getOptional(token) {\n    return this._getByKey(Key.get(token), false, false, true);\n  }\n\n  asyncGet(token) {\n    return this._getByKey(Key.get(token), true, false, false);\n  }\n\n  resolveAndCreateChild(bindings:List/*<ResolvedBinding|Binding|Type|List>*/):Injector {\n    return new Injector(Injector.resolve(bindings), this, false);\n  }\n\n  createChildFromResolved(bindings:List<ResolvedBinding>):Injector {\n    return new Injector(bindings, this, false);\n  }\n\n  _createInstances():List {\n    return ListWrapper.createFixedSize(Key.numberOfKeys + 1);\n  }\n\n  _getByKey(key:Key, returnPromise:boolean, returnLazy:boolean, optional:boolean) {\n    if (returnLazy) {\n      return () => this._getByKey(key, returnPromise, false, optional);\n    }\n\n    var strategy = returnPromise ? this._asyncStrategy : this._syncStrategy;\n\n    var instance = strategy.readFromCache(key);\n    if (instance !== _notFound) return instance;\n\n    instance = strategy.instantiate(key);\n    if (instance !== _notFound) return instance;\n\n    if (isPresent(this._parent)) {\n      return this._parent._getByKey(key, returnPromise, returnLazy, optional);\n    }\n\n    if (optional) {\n      return null;\n    } else {\n      throw new NoProviderError(key);\n    }\n  }\n\n  _resolveDependencies(key:Key, binding:ResolvedBinding, forceAsync:boolean):List {\n    try {\n      var getDependency = d => this._getByKey(d.key, forceAsync || d.asPromise, d.lazy, d.optional);\n      return ListWrapper.map(binding.dependencies, getDependency);\n    } catch (e) {\n      this._clear(key);\n      if (e instanceof ProviderError) e.addKey(key);\n      throw e;\n    }\n  }\n\n  _getInstance(key:Key) {\n    if (this._instances.length <= key.id) return null;\n    return ListWrapper.get(this._instances, key.id);\n  }\n\n  _setInstance(key:Key, obj) {\n    ListWrapper.set(this._instances, key.id, obj);\n  }\n\n  _getBinding(key:Key) {\n    var binding = this._bindings.length <= key.id ?\n      null :\n      ListWrapper.get(this._bindings, key.id);\n\n    if (isBlank(binding) && this._defaultBindings) {\n      return bind(key.token).toClass(key.token).resolve();\n    } else {\n      return binding;\n    }\n  }\n\n  _markAsConstructing(key:Key) {\n    this._setInstance(key, _constructing);\n  }\n\n  _clear(key:Key) {\n    this._setInstance(key, null);\n  }\n}\n\n\nclass _SyncInjectorStrategy {\n  injector:Injector;\n  constructor(injector:Injector) {\n    this.injector = injector;\n  }\n\n  readFromCache(key:Key) {\n    if (key.token === Injector) {\n      return this.injector;\n    }\n\n    var instance = this.injector._getInstance(key);\n\n    if (instance === _constructing) {\n      throw new CyclicDependencyError(key);\n    } else if (isPresent(instance) && !_isWaiting(instance)) {\n      return instance;\n    } else {\n      return _notFound;\n    }\n  }\n\n  instantiate(key:Key) {\n    var binding = this.injector._getBinding(key);\n    if (isBlank(binding)) return _notFound;\n\n    if (binding.providedAsPromise) throw new AsyncBindingError(key);\n\n    //add a marker so we can detect cyclic dependencies\n    this.injector._markAsConstructing(key);\n\n    var deps = this.injector._resolveDependencies(key, binding, false);\n    return this._createInstance(key, binding, deps);\n  }\n\n  _createInstance(key:Key, binding:ResolvedBinding, deps:List) {\n    try {\n      var instance = FunctionWrapper.apply(binding.factory, deps);\n      this.injector._setInstance(key, instance);\n      return instance;\n    } catch (e) {\n      this.injector._clear(key);\n      throw new InstantiationError(e, key);\n    }\n  }\n}\n\n\nclass _AsyncInjectorStrategy {\n  injector:Injector;\n  constructor(injector:Injector) {\n    this.injector = injector;\n  }\n\n  readFromCache(key:Key) {\n    if (key.token === Injector) {\n      return PromiseWrapper.resolve(this.injector);\n    }\n\n    var instance = this.injector._getInstance(key);\n\n    if (instance === _constructing) {\n      throw new CyclicDependencyError(key);\n    } else if (_isWaiting(instance)) {\n      return instance.promise;\n    } else if (isPresent(instance)) {\n      return PromiseWrapper.resolve(instance);\n    } else {\n      return _notFound;\n    }\n  }\n\n  instantiate(key:Key) {\n    var binding = this.injector._getBinding(key);\n    if (isBlank(binding)) return _notFound;\n\n    //add a marker so we can detect cyclic dependencies\n    this.injector._markAsConstructing(key);\n\n    var deps = this.injector._resolveDependencies(key, binding, true);\n    var depsPromise = PromiseWrapper.all(deps);\n\n    var promise = PromiseWrapper\n      .then(depsPromise, null, (e) => this._errorHandler(key, e))\n      .then(deps => this._findOrCreate(key, binding, deps))\n      .then(instance => this._cacheInstance(key, instance));\n\n    this.injector._setInstance(key, new _Waiting(promise));\n    return promise;\n  }\n\n  _errorHandler(key:Key, e):Promise {\n    if (e instanceof ProviderError) e.addKey(key);\n    return PromiseWrapper.reject(e);\n  }\n\n  _findOrCreate(key:Key, binding:ResolvedBinding, deps:List) {\n    try {\n      var instance = this.injector._getInstance(key);\n      if (!_isWaiting(instance)) return instance;\n      return FunctionWrapper.apply(binding.factory, deps);\n    } catch (e) {\n      this.injector._clear(key);\n      throw new InstantiationError(e, key);\n    }\n  }\n\n  _cacheInstance(key, instance) {\n    this.injector._setInstance(key, instance);\n    return instance\n  }\n}\n\nfunction _resolveBindings(bindings:List): List {\n  var resolvedList = ListWrapper.createFixedSize(bindings.length);\n  for (var i = 0; i < bindings.length; i++) {\n    var unresolved = bindings[i];\n    var resolved;\n    if (unresolved instanceof ResolvedBinding) {\n      resolved = unresolved;  // ha-ha! I'm easily amused\n    } else if (unresolved instanceof Type) {\n      resolved = bind(unresolved).toClass(unresolved).resolve();\n    } else if (unresolved instanceof Binding) {\n      resolved = unresolved.resolve(); \n    } else if (unresolved instanceof List) {\n      resolved = _resolveBindings(unresolved);\n    } else if (unresolved instanceof BindingBuilder) {\n      throw new InvalidBindingError(unresolved.token);\n    } else {\n      throw new InvalidBindingError(unresolved);\n    }\n    resolvedList[i] = resolved;\n  }\n  return resolvedList;\n}\n\nfunction _createListOfBindings(flattenedBindings):List {\n  var bindings = ListWrapper.createFixedSize(Key.numberOfKeys + 1);\n  MapWrapper.forEach(flattenedBindings, (v, keyId) => bindings[keyId] = v);\n  return bindings;\n}\n\nfunction _flattenBindings(bindings:List, res:Map) {\n  ListWrapper.forEach(bindings, function (b) {\n    if (b instanceof ResolvedBinding) {\n      MapWrapper.set(res, b.key.id, b);\n    } else if (b instanceof List) {\n      _flattenBindings(b, res);\n    }\n  });\n  return res;\n}\n"]}