{"version":3,"sources":["url_resolver_spec.es6"],"names":[],"mappings":"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","file":"angular2/test/services/url_resolver_spec.js","sourcesContent":["import {describe,\n  it,\n  expect,\n  beforeEach,\n  ddescribe,\n  iit,\n  xit,\n  el} from 'angular2/test_lib';\nimport {UrlResolver} from 'angular2/src/services/url_resolver';\nexport function main() {\n  describe('UrlResolver', () => {\n    var resolver = new UrlResolver();\n    it('should add a relative path to the base url', () => {\n      expect(resolver.resolve('http://www.foo.com', 'bar')).toEqual('http://www.foo.com/bar');\n      expect(resolver.resolve('http://www.foo.com/', 'bar')).toEqual('http://www.foo.com/bar');\n      expect(resolver.resolve('http://www.foo.com', './bar')).toEqual('http://www.foo.com/bar');\n      expect(resolver.resolve('http://www.foo.com/', './bar')).toEqual('http://www.foo.com/bar');\n    });\n    it('should replace the base path', () => {\n      expect(resolver.resolve('http://www.foo.com/baz', 'bar')).toEqual('http://www.foo.com/bar');\n      expect(resolver.resolve('http://www.foo.com/baz', './bar')).toEqual('http://www.foo.com/bar');\n    });\n    it('should append to the base path', () => {\n      expect(resolver.resolve('http://www.foo.com/baz/', 'bar')).toEqual('http://www.foo.com/baz/bar');\n      expect(resolver.resolve('http://www.foo.com/baz/', './bar')).toEqual('http://www.foo.com/baz/bar');\n    });\n    it('should support \"..\" in the path', () => {\n      expect(resolver.resolve('http://www.foo.com/baz/', '../bar')).toEqual('http://www.foo.com/bar');\n      expect(resolver.resolve('http://www.foo.com/1/2/3/', '../../bar')).toEqual('http://www.foo.com/1/bar');\n      expect(resolver.resolve('http://www.foo.com/1/2/3/', '../biz/bar')).toEqual('http://www.foo.com/1/2/biz/bar');\n      expect(resolver.resolve('http://www.foo.com/1/2/baz', '../../bar')).toEqual('http://www.foo.com/bar');\n    });\n    it('should ignore the base path when the url has a scheme', () => {\n      expect(resolver.resolve('http://www.foo.com', 'http://www.bar.com')).toEqual('http://www.bar.com');\n    });\n    it('should throw when the url start with \"/\"', () => {\n      expect(() => {\n        resolver.resolve('http://www.foo.com/1/2', '/test');\n      }).toThrowError();\n    });\n  });\n}\n//# sourceMappingURL=url_resolver_spec.js.map\n\n//# sourceMappingURL=./url_resolver_spec.map"]}