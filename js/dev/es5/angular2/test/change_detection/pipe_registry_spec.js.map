{"version":3,"sources":["pipe_registry_spec.es6"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,mJAAoB,UAAS,SAAQ;;;;;;;;;;;;;;AAW7C,SAAS,KAAG,CAAE,AAAD;AAClB,WAAO,AAAC,CAAC,eAAc,GAAG,SAAC,AAAD;AACxB,AAAI,QAAA,CAAA,SAAQ,EAAI,IAAI,KAAG,AAAC,EAAC,CAAC;AAC1B,AAAI,QAAA,CAAA,UAAS,EAAI,IAAI,KAAG,AAAC,EAAC,CAAC;AAC3B,OAAC,AAAC,CAAC,uDAAsD,GAAG,SAAC,AAAD,CAAM;AAChE,AAAI,UAAA,CAAA,CAAA,EAAI,IAAI,aAAW,AAAC,CAAC,CAAC,MAAK,CAAG,EAAC,GAAI,YAAU,AAAC,CAAC,KAAI,CAAG,UAAQ,CAAC,CAAG,IAAI,YAAU,AAAC,CAAC,IAAG,CAAG,WAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1G,aAAK,AAAC,CAAC,CAAA,IAAI,AAAC,CAAC,MAAK,CAAG,cAAY,CAAG,KAAG,CAAC,CAAC,KAAK,AAAC,CAAC,UAAS,CAAC,CAAC;MAC7D,EAAC,CAAC;AACF,OAAC,AAAC,CAAC,oCAAmC,GAAG,SAAC,AAAD;AACvC,AAAI,UAAA,CAAA,CAAA,EAAI,IAAI,aAAW,AAAC,CAAC,EAAC,CAAC,CAAC;AAC5B,aAAK,AAAC,EAAC,SAAC,AAAD;eAAM,CAAA,CAAA,IAAI,AAAC,CAAC,SAAQ,CAAG,cAAY,CAAG,KAAG,CAAC;QAAA,EAAC,aAAa,AAAC,CAAC,4DAA2D,CAAC,CAAC;MAChI,EAAC,CAAC;AACF,OAAC,AAAC,CAAC,oCAAmC,GAAG,SAAC,AAAD;AACvC,AAAI,UAAA,CAAA,CAAA,EAAI,IAAI,aAAW,AAAC,CAAC,CAAC,MAAK,CAAG,GAAC,CAAC,CAAC,CAAC;AACtC,aAAK,AAAC,EAAC,SAAC,AAAD;eAAM,CAAA,CAAA,IAAI,AAAC,CAAC,MAAK,CAAG,cAAY,CAAG,KAAG,CAAC;QAAA,EAAC,aAAa,AAAC,CAAC,yDAAwD,CAAC,CAAC;MAC1H,EAAC,CAAC;IACJ,EAAC,CAAC;EACJ;AA3BQ,UAAQ,AAAC,cAAqC,CAAA;AADtD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG,CAAG;AAAf,aAAoB,KAAG,OAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,eAAoB,KAAG,SAAkB,CAAC;AAA1C,SAAoB,KAAG,GAAkB,CAAC;AAA1C,UAAoB,KAAG,IAAkB,CAAC;AAA1C,UAAoB,KAAG,IAAkB,CAAC;AAA1C,aAAoB,KAAG,OAAkB,CAAC;AAA1C,iBAAoB,KAAG,WAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,mBAAoB,KAAG,aAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,WAAoB,KAAG,KAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;AAFZ,oBAAA,SAAS,AAAD;AACE,AAAI,UAAA,cA4Bd,SAAM,YAAU,CACF,aAAY,CAAG,CAAA,IAAG,CAAG;AAC/B,eAAK,cAAc,AAAC,CAAC,aAAY,CAAG,CAAA,MAAK,KAAK,QAAQ,CAAG,KAAG,CAAG,CAAA,MAAK,KAAK,IAAI,CAAC,CAAC;AAC/E,aAAG,cAAc,EAAI,cAAY,CAAC;AAClC,aAAG,KAAK,EAAI,KAAG,CAAC;QAClB,AAjCgD,CAAC;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AAiC5C,iBAAO,CAAP,UAAS,GAAE,CAAG;AACZ,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,IAAG,cAAc,CAAC,CAAG,CAAA,MAAK,KAAK,QAAQ,CAAC,CAAC;UACrE;AACA,eAAK,CAAL,UAAO,GAAE,CAAG;AACV,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,IAAG,KAAK,CAAC,CAAG,KAAG,CAAC,CAAC;UAC7C;AAAA,aArC8D,CAAC;MACzD,AAAC,EAAC,CAJ0B,CAAA;AA0CpC,WAAK,eAAe,AAAC,CAAC,WAAU,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAC9D,eAAO,EAAC,CAAC,MAAK,KAAK,QAAQ,CAAC,CAAG,EAAC,MAAK,KAAK,IAAI,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IA1C0B;EAC3B,CAAA;AADI,CAAC,CAAC;AA6CkC","file":"angular2/test/change_detection/pipe_registry_spec.js","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {ddescribe,\n  describe,\n  it,\n  iit,\n  xit,\n  expect,\n  beforeEach,\n  afterEach} from 'angular2/test_lib';\nimport {PipeRegistry} from 'angular2/src/change_detection/pipes/pipe_registry';\nimport {Pipe} from 'angular2/src/change_detection/pipes/pipe';\nexport function main() {\n  describe(\"pipe registry\", () => {\n    var firstPipe = new Pipe();\n    var secondPipe = new Pipe();\n    it(\"should return the first pipe supporting the data type\", () => {\n      var r = new PipeRegistry({\"type\": [new PipeFactory(false, firstPipe), new PipeFactory(true, secondPipe)]});\n      expect(r.get(\"type\", \"some object\", null)).toBe(secondPipe);\n    });\n    it(\"should throw when no matching type\", () => {\n      var r = new PipeRegistry({});\n      expect(() => r.get(\"unknown\", \"some object\", null)).toThrowError(`Cannot find a pipe for type 'unknown' object 'some object'`);\n    });\n    it(\"should throw when no matching pipe\", () => {\n      var r = new PipeRegistry({\"type\": []});\n      expect(() => r.get(\"type\", \"some object\", null)).toThrowError(`Cannot find a pipe for type 'type' object 'some object'`);\n    });\n  });\n}\nclass PipeFactory {\n  constructor(shouldSupport, pipe) {\n    assert.argumentTypes(shouldSupport, assert.type.boolean, pipe, assert.type.any);\n    this.shouldSupport = shouldSupport;\n    this.pipe = pipe;\n  }\n  supports(obj) {\n    return assert.returnType((this.shouldSupport), assert.type.boolean);\n  }\n  create(bpc) {\n    return assert.returnType((this.pipe), Pipe);\n  }\n}\nObject.defineProperty(PipeFactory, \"parameters\", {get: function() {\n    return [[assert.type.boolean], [assert.type.any]];\n  }});\n//# sourceMappingURL=pipe_registry_spec.js.map\n\n//# sourceMappingURL=./pipe_registry_spec.map"]}