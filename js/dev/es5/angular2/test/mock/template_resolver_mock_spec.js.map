{"version":3,"sources":["template_resolver_mock_spec.es6"],"names":[],"mappings":"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","file":"angular2/test/mock/template_resolver_mock_spec.js","sourcesContent":["import {beforeEach,\n  ddescribe,\n  describe,\n  el,\n  expect,\n  iit,\n  it} from 'angular2/test_lib';\nimport {MockTemplateResolver} from 'angular2/src/mock/template_resolver_mock';\nimport {Component} from 'angular2/src/core/annotations/annotations';\nimport {View} from 'angular2/src/core/annotations/view';\nimport {isBlank} from 'angular2/src/facade/lang';\nexport function main() {\n  describe('MockTemplateResolver', () => {\n    var resolver;\n    beforeEach(() => {\n      resolver = new MockTemplateResolver();\n    });\n    describe('View overriding', () => {\n      it('should fallback to the default TemplateResolver when templates are not overridden', () => {\n        var template = resolver.resolve(SomeComponent);\n        expect(template.template).toEqual('template');\n        expect(template.directives).toEqual([SomeDirective]);\n      });\n      it('should allow overriding the @View', () => {\n        resolver.setView(SomeComponent, new View({template: 'overridden template'}));\n        var template = resolver.resolve(SomeComponent);\n        expect(template.template).toEqual('overridden template');\n        expect(isBlank(template.directives)).toBe(true);\n      });\n      it('should not allow overriding a template after it has been resolved', () => {\n        resolver.resolve(SomeComponent);\n        expect(() => {\n          resolver.setView(SomeComponent, new View({template: 'overridden template'}));\n        }).toThrowError('The component SomeComponent has already been compiled, its configuration can not be changed');\n      });\n    });\n    describe('inline template definition overriding', () => {\n      it('should allow overriding the default template', () => {\n        resolver.setInlineTemplate(SomeComponent, 'overridden template');\n        var template = resolver.resolve(SomeComponent);\n        expect(template.template).toEqual('overridden template');\n        expect(template.directives).toEqual([SomeDirective]);\n      });\n      it('should allow overriding an overriden @View', () => {\n        resolver.setView(SomeComponent, new View({template: 'overridden template'}));\n        resolver.setInlineTemplate(SomeComponent, 'overridden template x 2');\n        var template = resolver.resolve(SomeComponent);\n        expect(template.template).toEqual('overridden template x 2');\n      });\n      it('should not allow overriding a template after it has been resolved', () => {\n        resolver.resolve(SomeComponent);\n        expect(() => {\n          resolver.setInlineTemplate(SomeComponent, 'overridden template');\n        }).toThrowError('The component SomeComponent has already been compiled, its configuration can not be changed');\n      });\n    });\n    describe('Directive overriding', () => {\n      it('should allow overriding a directive from the default template', () => {\n        resolver.overrideTemplateDirective(SomeComponent, SomeDirective, SomeOtherDirective);\n        var template = resolver.resolve(SomeComponent);\n        expect(template.directives.length).toEqual(1);\n        expect(template.directives[0]).toBe(SomeOtherDirective);\n      });\n      it('should allow overriding a directive from an overriden @View', () => {\n        resolver.setView(SomeComponent, new View({directives: [SomeOtherDirective]}));\n        resolver.overrideTemplateDirective(SomeComponent, SomeOtherDirective, SomeComponent);\n        var template = resolver.resolve(SomeComponent);\n        expect(template.directives.length).toEqual(1);\n        expect(template.directives[0]).toBe(SomeComponent);\n      });\n      it('should throw when the overridden directive is not present', () => {\n        resolver.overrideTemplateDirective(SomeComponent, SomeOtherDirective, SomeDirective);\n        expect(() => {\n          resolver.resolve(SomeComponent);\n        }).toThrowError('Overriden directive SomeOtherDirective not found in the template of SomeComponent');\n      });\n      it('should not allow overriding a directive after its template has been resolved', () => {\n        resolver.resolve(SomeComponent);\n        expect(() => {\n          resolver.overrideTemplateDirective(SomeComponent, SomeDirective, SomeOtherDirective);\n        }).toThrowError('The component SomeComponent has already been compiled, its configuration can not be changed');\n      });\n    });\n  });\n}\nclass SomeComponent {}\nObject.defineProperty(SomeComponent, \"annotations\", {get: function() {\n    return [new Component({selector: 'cmp'}), new View({\n      template: 'template',\n      directives: [SomeDirective]\n    })];\n  }});\nclass SomeDirective {}\nclass SomeOtherDirective {}\n//# sourceMappingURL=template_resolver_mock_spec.js.map\n\n//# sourceMappingURL=./template_resolver_mock_spec.map"]}