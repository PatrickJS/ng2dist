{"version":3,"sources":["style_url_resolver_spec.es6"],"names":[],"mappings":"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","file":"angular2/test/render/dom/shadow_dom/style_url_resolver_spec.js","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {describe,\n  it,\n  expect,\n  beforeEach,\n  ddescribe,\n  iit,\n  xit,\n  el} from 'angular2/test_lib';\nimport {StyleUrlResolver} from 'angular2/src/render/dom/shadow_dom/style_url_resolver';\nimport {UrlResolver} from 'angular2/src/services/url_resolver';\nexport function main() {\n  describe('StyleUrlResolver', () => {\n    it('should resolve \"url()\" urls', () => {\n      var styleUrlResolver = new StyleUrlResolver(new FakeUrlResolver());\n      var css = `\n      .foo {\n        background-image: url(\"double.jpg\");\n        background-image: url('simple.jpg');\n        background-image: url(noquote.jpg);\n      }`;\n      var expectedCss = `\n      .foo {\n        background-image: url('base/double.jpg');\n        background-image: url('base/simple.jpg');\n        background-image: url('base/noquote.jpg');\n      }`;\n      var resolvedCss = styleUrlResolver.resolveUrls(css, 'base');\n      expect(resolvedCss).toEqual(expectedCss);\n    });\n    it('should resolve \"@import\" urls', () => {\n      var styleUrlResolver = new StyleUrlResolver(new FakeUrlResolver());\n      var css = `\n      @import '1.css';\n      @import \"2.css\";\n      `;\n      var expectedCss = `\n      @import 'base/1.css';\n      @import 'base/2.css';\n      `;\n      var resolvedCss = styleUrlResolver.resolveUrls(css, 'base');\n      expect(resolvedCss).toEqual(expectedCss);\n    });\n    it('should resolve \"@import url()\" urls', () => {\n      var styleUrlResolver = new StyleUrlResolver(new FakeUrlResolver());\n      var css = `\n      @import url('3.css');\n      @import url(\"4.css\");\n      @import url(5.css);\n      `;\n      var expectedCss = `\n      @import url('base/3.css');\n      @import url('base/4.css');\n      @import url('base/5.css');\n      `;\n      var resolvedCss = styleUrlResolver.resolveUrls(css, 'base');\n      expect(resolvedCss).toEqual(expectedCss);\n    });\n    it('should support media query in \"@import\"', () => {\n      var styleUrlResolver = new StyleUrlResolver(new FakeUrlResolver());\n      var css = `\n      @import 'print.css' print;\n      @import url(print.css) print;\n      `;\n      var expectedCss = `\n      @import 'base/print.css' print;\n      @import url('base/print.css') print;\n      `;\n      var resolvedCss = styleUrlResolver.resolveUrls(css, 'base');\n      expect(resolvedCss).toEqual(expectedCss);\n    });\n  });\n}\nclass FakeUrlResolver extends UrlResolver {\n  resolve(baseUrl, url) {\n    assert.argumentTypes(baseUrl, assert.type.string, url, assert.type.string);\n    return assert.returnType((baseUrl + '/' + url), assert.type.string);\n  }\n}\nObject.defineProperty(FakeUrlResolver.prototype.resolve, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\n//# sourceMappingURL=style_url_resolver_spec.js.map\n\n//# sourceMappingURL=./style_url_resolver_spec.map"]}