{"version":3,"sources":["form_builder_spec.es6"],"names":[],"mappings":"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","file":"angular2/test/forms/form_builder_spec.js","sourcesContent":["import {ddescribe,\n  describe,\n  it,\n  iit,\n  xit,\n  expect,\n  beforeEach,\n  afterEach,\n  el} from 'angular2/test_lib';\nimport {Control,\n  FormBuilder,\n  Validators} from 'angular2/forms';\nexport function main() {\n  describe(\"Form Builder\", () => {\n    var b;\n    beforeEach(() => {\n      b = new FormBuilder();\n    });\n    it(\"should create controls from a value\", () => {\n      var g = b.group({\"login\": \"some value\"});\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n    });\n    it(\"should create controls from an array\", () => {\n      var g = b.group({\n        \"login\": [\"some value\"],\n        \"password\": [\"some value\", Validators.required]\n      });\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n      expect(g.controls[\"password\"].value).toEqual(\"some value\");\n      expect(g.controls[\"password\"].validator).toEqual(Validators.required);\n    });\n    it(\"should use controls\", () => {\n      var g = b.group({\"login\": b.control(\"some value\", Validators.required)});\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n      expect(g.controls[\"login\"].validator).toBe(Validators.required);\n    });\n    it(\"should create groups with optional controls\", () => {\n      var g = b.group({\"login\": \"some value\"}, {\"optionals\": {\"login\": false}});\n      expect(g.contains(\"login\")).toEqual(false);\n    });\n    it(\"should create groups with a custom validator\", () => {\n      var g = b.group({\"login\": \"some value\"}, {\"validator\": Validators.nullValidator});\n      expect(g.validator).toBe(Validators.nullValidator);\n    });\n    it(\"should use default validators when no validators are provided\", () => {\n      var g = b.group({\"login\": \"some value\"});\n      expect(g.controls[\"login\"].validator).toBe(Validators.nullValidator);\n      expect(g.validator).toBe(Validators.group);\n    });\n    it(\"should create control arrays\", () => {\n      var c = b.control(\"three\");\n      var a = b.array([\"one\", [\"two\", Validators.required], c, b.array(['four'])]);\n      expect(a.value).toEqual(['one', 'two', 'three', ['four']]);\n    });\n  });\n}\n//# sourceMappingURL=form_builder_spec.js.map\n\n//# sourceMappingURL=./form_builder_spec.map"]}