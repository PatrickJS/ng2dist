{"version":3,"sources":["compile_pipeline.es6"],"names":[],"mappings":"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","file":"angular2/src/render/dom/compiler/compile_pipeline.js","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {isPresent} from 'angular2/src/facade/lang';\nimport {List,\n  ListWrapper} from 'angular2/src/facade/collection';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\nimport {CompileElement} from './compile_element';\nimport {CompileControl} from './compile_control';\nimport {CompileStep} from './compile_step';\nimport {ProtoViewBuilder} from '../view/proto_view_builder';\nexport class CompilePipeline {\n  constructor(steps) {\n    assert.argumentTypes(steps, assert.genericType(List, CompileStep));\n    this._control = new CompileControl(steps);\n  }\n  process(rootElement, compilationCtxtDescription = '') {\n    assert.argumentTypes(rootElement, assert.type.any, compilationCtxtDescription, assert.type.string);\n    var results = ListWrapper.create();\n    var rootCompileElement = new CompileElement(rootElement, compilationCtxtDescription);\n    rootCompileElement.inheritedProtoView = new ProtoViewBuilder(rootElement);\n    rootCompileElement.isViewRoot = true;\n    this._process(results, null, rootCompileElement, compilationCtxtDescription);\n    return assert.returnType((results), List);\n  }\n  _process(results, parent, current, compilationCtxtDescription = '') {\n    assert.argumentTypes(results, assert.type.any, parent, CompileElement, current, CompileElement, compilationCtxtDescription, assert.type.string);\n    var additionalChildren = this._control.internalProcess(results, 0, parent, current);\n    if (current.compileChildren) {\n      var node = DOM.firstChild(DOM.templateAwareRoot(current.element));\n      while (isPresent(node)) {\n        var nextNode = DOM.nextSibling(node);\n        if (DOM.isElementNode(node)) {\n          var childCompileElement = new CompileElement(node, compilationCtxtDescription);\n          childCompileElement.inheritedProtoView = current.inheritedProtoView;\n          childCompileElement.inheritedElementBinder = current.inheritedElementBinder;\n          childCompileElement.distanceToInheritedBinder = current.distanceToInheritedBinder + 1;\n          this._process(results, current, childCompileElement);\n        }\n        node = nextNode;\n      }\n    }\n    if (isPresent(additionalChildren)) {\n      for (var i = 0; i < additionalChildren.length; i++) {\n        this._process(results, current, additionalChildren[i]);\n      }\n    }\n  }\n}\nObject.defineProperty(CompilePipeline, \"parameters\", {get: function() {\n    return [[assert.genericType(List, CompileStep)]];\n  }});\nObject.defineProperty(CompilePipeline.prototype.process, \"parameters\", {get: function() {\n    return [[], [assert.type.string]];\n  }});\nObject.defineProperty(CompilePipeline.prototype._process, \"parameters\", {get: function() {\n    return [[], [CompileElement], [CompileElement], [assert.type.string]];\n  }});\n//# sourceMappingURL=compile_pipeline.js.map\n\n//# sourceMappingURL=./compile_pipeline.map"]}