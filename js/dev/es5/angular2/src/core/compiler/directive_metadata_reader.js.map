{"version":3,"sources":["directive_metadata_reader.es6"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,oKAAoB,UAAS,SAAQ;;;;;;;;;;;;;;AAApD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG,CAAG;AAAf,aAAoB,KAAG,OAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,iBAAoB,KAAG,WAAkB,CAAC;AAA1C,eAAoB,KAAG,SAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,wBAAoB,KAAG,kBAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,gBAAoB,KAAG,UAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;8BAFY,CAAA,SAAQ,AAAC,6BAAjC,SAAS,AAAD;AACE,AAAI,UAAA,0BAUP,SAAM,wBAAsB;;QAkBnC,AA5BkD,CAAC;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,2BAU5C,IAAG,CAAH,UAAK,IAAG,CAAG;AACT,iBAAK,cAAc,AAAC,CAAC,IAAG,CAAG,KAAG,CAAC,CAAC;AAChC,AAAI,cAAA,CAAA,WAAU,EAAI,CAAA,SAAQ,YAAY,AAAC,CAAC,IAAG,CAAC,CAAC;AAC7C,eAAI,SAAQ,AAAC,CAAC,WAAU,CAAC,CAAG;AAC1B,kBAAS,GAAA,CAAA,CAAA,EAAI,EAAA,CAAG,CAAA,CAAA,EAAI,CAAA,WAAU,OAAO,CAAG,CAAA,CAAA,EAAE,CAAG;AAC3C,AAAI,kBAAA,CAAA,UAAS,EAAI,CAAA,WAAU,CAAE,CAAA,CAAC,CAAC;AAC/B,mBAAI,UAAS,WAAa,UAAQ,CAAG;AACnC,AAAI,oBAAA,CAAA,mBAAkB,EAAI,KAAG,CAAC;AAC9B,qBAAI,UAAS,WAAa,UAAQ,CAAA,EAAK,CAAA,SAAQ,AAAC,CAAC,UAAS,YAAY,CAAC,CAAG;AACxE,sCAAkB,EAAI,CAAA,QAAO,QAAQ,AAAC,CAAC,UAAS,YAAY,CAAC,CAAC;kBAChE;AAAA,AACA,uBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,GAAI,kBAAgB,AAAC,CAAC,IAAG,CAAG,WAAS,CAAG,oBAAkB,CAAC,CAAC,CAAG,kBAAgB,CAAC,CAAC;gBAC7G;AAAA,cACF;AAAA,YACF;AAAA,AACA,gBAAM,IAAI,cAAY,AAAC,EAAC,mCAAmC,EAAC,CAAA,SAAQ,AAAC,CAAC,IAAG,CAAC,EAAG,CAAC;UAChF,MAzB8D,CAAC;MACzD,AAAC,EAAC,EAJ4D;AA8BtE,WAAK,eAAe,AAAC,CAAC,uBAAsB,CAAG,cAAY,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAC3E,eAAO,EAAC,GAAI,WAAS,AAAC,EAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,uBAAsB,UAAU,KAAK,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AACzF,eAAO,EAAC,CAAC,IAAG,CAAC,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;IAjC0B;EAC3B,CAAA;AADI,CAAC,CAAC;AAoCyC","file":"angular2/src/core/compiler/directive_metadata_reader.js","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {Injectable,\n  Injector} from 'angular2/di';\nimport {Type,\n  isPresent,\n  BaseException,\n  stringify} from 'angular2/src/facade/lang';\nimport {Directive,\n  Component} from '../annotations/annotations';\nimport {DirectiveMetadata} from './directive_metadata';\nimport {reflector} from 'angular2/src/reflection/reflection';\nexport class DirectiveMetadataReader {\n  read(type) {\n    assert.argumentTypes(type, Type);\n    var annotations = reflector.annotations(type);\n    if (isPresent(annotations)) {\n      for (var i = 0; i < annotations.length; i++) {\n        var annotation = annotations[i];\n        if (annotation instanceof Directive) {\n          var resolvedInjectables = null;\n          if (annotation instanceof Component && isPresent(annotation.injectables)) {\n            resolvedInjectables = Injector.resolve(annotation.injectables);\n          }\n          return assert.returnType((new DirectiveMetadata(type, annotation, resolvedInjectables)), DirectiveMetadata);\n        }\n      }\n    }\n    throw new BaseException(`No Directive annotation found on ${stringify(type)}`);\n  }\n}\nObject.defineProperty(DirectiveMetadataReader, \"annotations\", {get: function() {\n    return [new Injectable()];\n  }});\nObject.defineProperty(DirectiveMetadataReader.prototype.read, \"parameters\", {get: function() {\n    return [[Type]];\n  }});\n//# sourceMappingURL=directive_metadata_reader.js.map\n\n//# sourceMappingURL=./directive_metadata_reader.map"]}