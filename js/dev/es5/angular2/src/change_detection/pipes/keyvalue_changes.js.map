{"version":3,"sources":["keyvalue_changes.es6"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,qGAAoB,UAAS,SAAQ;;;;;;;;;;;;;;AAApD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG,CAAG;AAAf,aAAoB,KAAG,OAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,kBAAoB,KAAG,YAAkB,CAAC;AAA1C,iBAAoB,KAAG,WAAkB,CAAC;AAA1C,uBAAoB,KAAG,iBAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,qBAAoB,KAAG,eAAkB,CAAC;AAA1C,iBAAoB,KAAG,WAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,WAAoB,KAAG,KAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;6BAFY,CAAA,SAAQ,AAAC,4BAAjC,SAAS,AAAD;AACE,AAAI,UAAA,yBAQP,SAAM,uBAAqB;;QAOlC,AAfkD,CAAC;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AAQ5C,iBAAO,CAAP,UAAS,GAAE,CAAG;AACZ,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,eAAc,YAAY,AAAC,CAAC,GAAE,CAAC,CAAC,CAAG,CAAA,MAAK,KAAK,QAAQ,CAAC,CAAC;UACnF;AACA,eAAK,CAAL,UAAO,GAAE,CAAG;AACV,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,GAAI,gBAAc,AAAC,EAAC,CAAC,CAAG,KAAG,CAAC,CAAC;UACzD;AAAA,aAZ8D,CAAC;MACzD,AAAC,EAAC,EAJ4D;sBAA9C,CAAA,SAAQ,AAAC,qBAAjC,SAAS,QAAO;AACN,AAAI,UAAA,kBAgBP,SAAM,gBAAc,CACb,AAAD,CAAG;AACZ,AAnBJ,wBAAc,iBAAiB,AAAC,iBAAkB,KAAK,MAAmB,CAmB/D;AACP,aAAG,SAAS,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;AACnC,aAAG,SAAS,EAAI,KAAG,CAAC;AACpB,aAAG,iBAAiB,EAAI,KAAG,CAAC;AAC5B,aAAG,aAAa,EAAI,KAAG,CAAC;AACxB,aAAG,aAAa,EAAI,KAAG,CAAC;AACxB,aAAG,eAAe,EAAI,KAAG,CAAC;AAC1B,aAAG,eAAe,EAAI,KAAG,CAAC;AAC1B,aAAG,cAAc,EAAI,KAAG,CAAC;AACzB,aAAG,cAAc,EAAI,KAAG,CAAC;QAC3B,AA5BgD,CAAC;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AA+B5C,iBAAO,CAAP,UAAS,GAAE,CAAG;AACZ,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,eAAc,YAAY,AAAC,CAAC,GAAE,CAAC,CAAC,CAAG,CAAA,MAAK,KAAK,QAAQ,CAAC,CAAC;UACnF;AACA,kBAAQ,CAAR,UAAU,GAAE,CAAG;AACb,eAAI,IAAG,MAAM,AAAC,CAAC,GAAE,CAAC,CAAG;AACnB,mBAAO,KAAG,CAAC;YACb,KAAO;AACL,mBAAO,UAAQ,CAAC;YAClB;AAAA,UACF;AACA,YAAI,QAAM,EAAI;AACZ,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,IAAG,eAAe,IAAM,KAAG,CAAA,EAAK,CAAA,IAAG,aAAa,IAAM,KAAG,CAAA,EAAK,CAAA,IAAG,cAAc,IAAM,KAAG,CAAC,CAAG,CAAA,MAAK,KAAK,QAAQ,CAAC,CAAC;UAC5I;AACA,oBAAU,CAAV,UAAY,EAAC,CAAG;AACd,iBAAK,cAAc,AAAC,CAAC,EAAC,CAAG,SAAO,CAAC,CAAC;AAClC,AAAI,cAAA,CAAA,MAAK,CAAC;AACV,gBAAK,MAAK,EAAI,CAAA,IAAG,SAAS,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,MAAM,CAAG;AACnE,eAAC,AAAC,CAAC,MAAK,CAAC,CAAC;YACZ;AAAA,UACF;AACA,4BAAkB,CAAlB,UAAoB,EAAC,CAAG;AACtB,iBAAK,cAAc,AAAC,CAAC,EAAC,CAAG,SAAO,CAAC,CAAC;AAClC,AAAI,cAAA,CAAA,MAAK,CAAC;AACV,gBAAK,MAAK,EAAI,CAAA,IAAG,iBAAiB,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,cAAc,CAAG;AACnF,eAAC,AAAC,CAAC,MAAK,CAAC,CAAC;YACZ;AAAA,UACF;AACA,2BAAiB,CAAjB,UAAmB,EAAC,CAAG;AACrB,iBAAK,cAAc,AAAC,CAAC,EAAC,CAAG,SAAO,CAAC,CAAC;AAClC,AAAI,cAAA,CAAA,MAAK,CAAC;AACV,gBAAK,MAAK,EAAI,CAAA,IAAG,aAAa,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,aAAa,CAAG;AAC9E,eAAC,AAAC,CAAC,MAAK,CAAC,CAAC;YACZ;AAAA,UACF;AACA,yBAAe,CAAf,UAAiB,EAAC,CAAG;AACnB,iBAAK,cAAc,AAAC,CAAC,EAAC,CAAG,SAAO,CAAC,CAAC;AAClC,AAAI,cAAA,CAAA,MAAK,CAAC;AACV,gBAAK,MAAK,EAAI,CAAA,IAAG,eAAe,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,WAAW,CAAG;AAC9E,eAAC,AAAC,CAAC,MAAK,CAAC,CAAC;YACZ;AAAA,UACF;AACA,2BAAiB,CAAjB,UAAmB,EAAC,CAAG;AACrB,iBAAK,cAAc,AAAC,CAAC,EAAC,CAAG,SAAO,CAAC,CAAC;AAClC,AAAI,cAAA,CAAA,MAAK,CAAC;AACV,gBAAK,MAAK,EAAI,CAAA,IAAG,cAAc,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,aAAa,CAAG;AAC/E,eAAC,AAAC,CAAC,MAAK,CAAC,CAAC;YACZ;AAAA,UACF;AACA,cAAI,CAAJ,UAAM,GAAE;;AACN,eAAG,OAAO,AAAC,EAAC,CAAC;AACb,AAAI,cAAA,CAAA,OAAM,EAAI,CAAA,IAAG,SAAS,CAAC;AAC3B,AAAI,cAAA,CAAA,YAAW,EAAI,CAAA,MAAK,KAAK,AAAC,CAAC,IAAG,SAAS,CAAG,eAAa,CAAC,CAAC;AAC7D,AAAI,cAAA,CAAA,gBAAe,EAAI,CAAA,MAAK,KAAK,AAAC,CAAC,IAAG,CAAG,eAAa,CAAC,CAAC;AACxD,AAAI,cAAA,CAAA,gBAAe,EAAI,CAAA,MAAK,KAAK,AAAC,CAAC,IAAG,CAAG,eAAa,CAAC,CAAC;AACxD,AAAI,cAAA,CAAA,UAAS,EAAI,CAAA,MAAK,KAAK,AAAC,CAAC,KAAI,CAAG,CAAA,MAAK,KAAK,QAAQ,CAAC,CAAC;AACxD,eAAG,SAAS,AAAC,CAAC,GAAE,GAAG,SAAC,KAAI,CAAG,CAAA,GAAE,CAAM;AACjC,AAAI,gBAAA,CAAA,YAAW,CAAC;AAChB,iBAAI,YAAW,IAAM,KAAG,CAAA,EAAK,CAAA,GAAE,IAAM,CAAA,YAAW,IAAI,CAAG;AACrD,2BAAW,EAAI,aAAW,CAAC;AAC3B,mBAAI,CAAC,cAAa,AAAC,CAAC,KAAI,CAAG,CAAA,YAAW,aAAa,CAAC,CAAG;AACrD,6BAAW,cAAc,EAAI,CAAA,YAAW,aAAa,CAAC;AACtD,6BAAW,aAAa,EAAI,MAAI,CAAC;AACjC,mCAAiB,AAAC,CAAC,YAAW,CAAC,CAAC;gBAClC;AAAA,cACF,KAAO;AACL,yBAAS,EAAI,KAAG,CAAC;AACjB,mBAAI,YAAW,IAAM,KAAG,CAAG;AACzB,6BAAW,MAAM,EAAI,KAAG,CAAC;AACzB,oCAAkB,AAAC,CAAC,gBAAe,CAAG,aAAW,CAAC,CAAC;AACnD,oCAAkB,AAAC,CAAC,YAAW,CAAC,CAAC;gBACnC;AAAA,AACA,mBAAI,UAAS,SAAS,AAAC,CAAC,OAAM,CAAG,IAAE,CAAC,CAAG;AACrC,6BAAW,EAAI,CAAA,UAAS,IAAI,AAAC,CAAC,OAAM,CAAG,IAAE,CAAC,CAAC;gBAC7C,KAAO;AACL,6BAAW,EAAI,IAAI,eAAa,AAAC,CAAC,GAAE,CAAC,CAAC;AACtC,2BAAS,IAAI,AAAC,CAAC,OAAM,CAAG,IAAE,CAAG,aAAW,CAAC,CAAC;AAC1C,6BAAW,aAAa,EAAI,MAAI,CAAC;AACjC,qCAAmB,AAAC,CAAC,YAAW,CAAC,CAAC;gBACpC;AAAA,cACF;AAAA,AACA,iBAAI,UAAS,CAAG;AACd,mBAAI,kBAAiB,AAAC,CAAC,YAAW,CAAC,CAAG;AACpC,yCAAuB,AAAC,CAAC,YAAW,CAAC,CAAC;gBACxC;AAAA,AACA,mBAAI,gBAAe,GAAK,KAAG,CAAG;AAC5B,8BAAY,EAAI,aAAW,CAAC;gBAC9B,KAAO;AACL,iCAAe,MAAM,EAAI,aAAW,CAAC;gBACvC;AAAA,cACF;AAAA,AACA,6BAAe,EAAI,aAAW,CAAC;AAC/B,6BAAe,EAAI,aAAW,CAAC;AAC/B,yBAAW,EAAI,CAAA,YAAW,IAAM,KAAG,CAAA,CAAI,KAAG,EAAI,CAAA,YAAW,MAAM,CAAC;YAClE,EAAC,CAAC;AACF,eAAG,UAAU,AAAC,CAAC,gBAAe,CAAG,aAAW,CAAC,CAAC;AAC9C,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,IAAG,QAAQ,CAAC,CAAG,CAAA,MAAK,KAAK,QAAQ,CAAC,CAAC;UAC/D;AACA,eAAK,CAAL,UAAO,AAAD,CAAG;AACP,eAAI,IAAG,QAAQ,CAAG;AAChB,AAAI,gBAAA,CAAA,MAAK,CAAC;AACV,kBAAK,MAAK,EAAI,CAAA,IAAG,iBAAiB,EAAI,CAAA,IAAG,SAAS,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,MAAM,CAAG;AAC3F,qBAAK,cAAc,EAAI,CAAA,MAAK,MAAM,CAAC;cACrC;AAAA,AACA,kBAAK,MAAK,EAAI,CAAA,IAAG,aAAa,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,aAAa,CAAG;AAC9E,qBAAK,cAAc,EAAI,CAAA,MAAK,aAAa,CAAC;cAC5C;AAAA,AACA,kBAAK,MAAK,EAAI,CAAA,IAAG,eAAe,CAAG,CAAA,MAAK,GAAK,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,WAAW,CAAG;AAC7E,qBAAK,cAAc,EAAI,CAAA,MAAK,aAAa,CAAC;cAC5C;AAAA,AACA,iBAAG,aAAa,EAAI,CAAA,IAAG,aAAa,EAAI,KAAG,CAAC;AAC5C,iBAAG,eAAe,EAAI,CAAA,IAAG,eAAe,EAAI,KAAG,CAAC;AAChD,iBAAG,cAAc,EAAI,CAAA,IAAG,cAAc,EAAI,KAAG,CAAC;YAChD;AAAA,UACF;AACA,kBAAQ,CAAR,UAAU,UAAS,CAAG,CAAA,MAAK,CAAG;AAC5B,iBAAK,cAAc,AAAC,CAAC,UAAS,CAAG,eAAa,CAAG,OAAK,CAAG,eAAa,CAAC,CAAC;AACxE,kBAAO,MAAK,IAAM,KAAG,CAAG;AACtB,iBAAI,UAAS,IAAM,KAAG,CAAG;AACvB,mBAAG,SAAS,EAAI,KAAG,CAAC;cACtB,KAAO;AACL,yBAAS,MAAM,EAAI,KAAG,CAAC;cACzB;AAAA,AACI,gBAAA,CAAA,UAAS,EAAI,CAAA,MAAK,MAAM,CAAC;AAC7B,iBAAG,eAAe,AAAC,CAAC,MAAK,CAAC,CAAC;AAC3B,uBAAS,EAAI,OAAK,CAAC;AACnB,mBAAK,EAAI,WAAS,CAAC;YACrB;AAAA,AACA,gBAAS,GAAA,CAAA,GAAE,EAAI,CAAA,MAAK,KAAK,AAAC,CAAC,IAAG,cAAc,CAAG,eAAa,CAAC,CAAG,CAAA,GAAE,IAAM,KAAG,CAAG,CAAA,GAAE,EAAI,CAAA,GAAE,aAAa,CAAG;AACpG,gBAAE,cAAc,EAAI,CAAA,GAAE,aAAa,CAAC;AACpC,gBAAE,aAAa,EAAI,KAAG,CAAC;AACvB,uBAAS,OAAO,AAAC,CAAC,IAAG,SAAS,CAAG,CAAA,GAAE,IAAI,CAAC,CAAC;YAC3C;AAAA,UACF;AACA,sBAAY,CAAZ,UAAc,MAAK,CAAG;AACpB,iBAAK,cAAc,AAAC,CAAC,MAAK,CAAG,eAAa,CAAC,CAAC;AAC5C,iBAAO,CAAA,MAAK,IAAM,CAAA,IAAG,cAAc,CAAA,EAAK,CAAA,MAAK,aAAa,IAAM,KAAG,CAAA,EAAK,CAAA,MAAK,aAAa,IAAM,KAAG,CAAC;UACtG;AACA,uBAAa,CAAb,UAAe,MAAK,CAAG;AACrB,iBAAK,cAAc,AAAC,CAAC,MAAK,CAAG,eAAa,CAAC,CAAC;AAC5C,eAAI,IAAG,cAAc,IAAM,KAAG,CAAG;AAC/B,iBAAG,cAAc,EAAI,CAAA,IAAG,cAAc,EAAI,OAAK,CAAC;YAClD,KAAO;AACL,iBAAG,cAAc,aAAa,EAAI,OAAK,CAAC;AACxC,mBAAK,aAAa,EAAI,CAAA,IAAG,cAAc,CAAC;AACxC,iBAAG,cAAc,EAAI,OAAK,CAAC;YAC7B;AAAA,UACF;AACA,uBAAa,CAAb,UAAe,IAAG,CAAG,CAAA,MAAK,CAAG;AAC3B,iBAAK,cAAc,AAAC,CAAC,IAAG,CAAG,eAAa,CAAG,OAAK,CAAG,eAAa,CAAC,CAAC;AAClE,AAAI,cAAA,CAAA,IAAG,EAAI,CAAA,MAAK,MAAM,CAAC;AACvB,eAAI,IAAG,IAAM,KAAG,CAAG;AACjB,iBAAG,SAAS,EAAI,KAAG,CAAC;YACtB,KAAO;AACL,iBAAG,MAAM,EAAI,KAAG,CAAC;YACnB;AAAA,UACF;AACA,4BAAkB,CAAlB,UAAoB,MAAK,CAAG;AAC1B,iBAAK,cAAc,AAAC,CAAC,MAAK,CAAG,eAAa,CAAC,CAAC;AAC5C,AAAI,cAAA,CAAA,IAAG,EAAI,CAAA,MAAK,aAAa,CAAC;AAC9B,AAAI,cAAA,CAAA,IAAG,EAAI,CAAA,MAAK,aAAa,CAAC;AAC9B,eAAI,IAAG,IAAM,KAAG,CAAG;AACjB,iBAAG,cAAc,EAAI,KAAG,CAAC;YAC3B,KAAO;AACL,iBAAG,aAAa,EAAI,KAAG,CAAC;YAC1B;AAAA,AACA,eAAI,IAAG,IAAM,KAAG,CAAG;AACjB,iBAAG,cAAc,EAAI,KAAG,CAAC;YAC3B,KAAO;AACL,iBAAG,aAAa,EAAI,KAAG,CAAC;YAC1B;AAAA,AACA,iBAAK,aAAa,EAAI,CAAA,MAAK,aAAa,EAAI,KAAG,CAAC;UAClD;AACA,wBAAc,CAAd,UAAgB,MAAK,CAAG;AACtB,iBAAK,cAAc,AAAC,CAAC,MAAK,CAAG,eAAa,CAAC,CAAC;AAC5C,eAAI,IAAG,eAAe,IAAM,KAAG,CAAG;AAChC,iBAAG,eAAe,EAAI,CAAA,IAAG,eAAe,EAAI,OAAK,CAAC;YACpD,KAAO;AACL,iBAAG,eAAe,WAAW,EAAI,OAAK,CAAC;AACvC,iBAAG,eAAe,EAAI,OAAK,CAAC;YAC9B;AAAA,UACF;AACA,sBAAY,CAAZ,UAAc,MAAK,CAAG;AACpB,iBAAK,cAAc,AAAC,CAAC,MAAK,CAAG,eAAa,CAAC,CAAC;AAC5C,eAAI,IAAG,aAAa,IAAM,KAAG,CAAG;AAC9B,iBAAG,aAAa,EAAI,CAAA,IAAG,aAAa,EAAI,OAAK,CAAC;YAChD,KAAO;AACL,iBAAG,aAAa,aAAa,EAAI,OAAK,CAAC;AACvC,iBAAG,aAAa,EAAI,OAAK,CAAC;YAC5B;AAAA,UACF;AACA,iBAAO,CAAP,UAAS,AAAD,CAAG;AACT,AAAI,cAAA,CAAA,KAAI,EAAI,GAAC,CAAC;AACd,AAAI,cAAA,CAAA,QAAO,EAAI,GAAC,CAAC;AACjB,AAAI,cAAA,CAAA,OAAM,EAAI,GAAC,CAAC;AAChB,AAAI,cAAA,CAAA,SAAQ,EAAI,GAAC,CAAC;AAClB,AAAI,cAAA,CAAA,QAAO,EAAI,GAAC,CAAC;AACjB,AAAI,cAAA,CAAA,MAAK,CAAC;AACV,gBAAK,MAAK,EAAI,CAAA,IAAG,SAAS,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,MAAM,CAAG;AACnE,wBAAU,KAAK,AAAC,CAAC,KAAI,CAAG,CAAA,SAAQ,AAAC,CAAC,MAAK,CAAC,CAAC,CAAC;YAC5C;AAAA,AACA,gBAAK,MAAK,EAAI,CAAA,IAAG,iBAAiB,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,cAAc,CAAG;AACnF,wBAAU,KAAK,AAAC,CAAC,QAAO,CAAG,CAAA,SAAQ,AAAC,CAAC,MAAK,CAAC,CAAC,CAAC;YAC/C;AAAA,AACA,gBAAK,MAAK,EAAI,CAAA,IAAG,aAAa,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,aAAa,CAAG;AAC9E,wBAAU,KAAK,AAAC,CAAC,OAAM,CAAG,CAAA,SAAQ,AAAC,CAAC,MAAK,CAAC,CAAC,CAAC;YAC9C;AAAA,AACA,gBAAK,MAAK,EAAI,CAAA,IAAG,eAAe,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,WAAW,CAAG;AAC9E,wBAAU,KAAK,AAAC,CAAC,SAAQ,CAAG,CAAA,SAAQ,AAAC,CAAC,MAAK,CAAC,CAAC,CAAC;YAChD;AAAA,AACA,gBAAK,MAAK,EAAI,CAAA,IAAG,cAAc,CAAG,CAAA,MAAK,IAAM,KAAG,CAAG,CAAA,MAAK,EAAI,CAAA,MAAK,aAAa,CAAG;AAC/E,wBAAU,KAAK,AAAC,CAAC,QAAO,CAAG,CAAA,SAAQ,AAAC,CAAC,MAAK,CAAC,CAAC,CAAC;YAC/C;AAAA,AACA,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,OAAM,EAAI,CAAA,KAAI,KAAK,AAAC,CAAC,IAAG,CAAC,CAAA,CAAI,KAAG,CAAA,CAAI,aAAW,CAAA,CAAI,CAAA,QAAO,KAAK,AAAC,CAAC,IAAG,CAAC,CAAA,CAAI,KAAG,CAAA,CAAI,cAAY,CAAA,CAAI,CAAA,SAAQ,KAAK,AAAC,CAAC,IAAG,CAAC,CAAA,CAAI,KAAG,CAAA,CAAI,YAAU,CAAA,CAAI,CAAA,OAAM,KAAK,AAAC,CAAC,IAAG,CAAC,CAAA,CAAI,KAAG,CAAA,CAAI,aAAW,CAAA,CAAI,CAAA,QAAO,KAAK,AAAC,CAAC,IAAG,CAAC,CAAA,CAAI,KAAG,CAAC,CAAG,CAAA,MAAK,KAAK,OAAO,CAAC,CAAC;UACnQ;AACA,iBAAO,CAAP,UAAS,GAAE,CAAG,CAAA,EAAC,CAAG;AAChB,iBAAK,cAAc,AAAC,CAAC,GAAE,CAAG,CAAA,MAAK,KAAK,IAAI,CAAG,GAAC,CAAG,SAAO,CAAC,CAAC;AACxD,eAAI,GAAE,WAAa,IAAE,CAAG;AACtB,uBAAS,QAAQ,AAAC,CAAC,GAAE,CAAG,GAAC,CAAC,CAAC;YAC7B,KAAO;AACL,6BAAe,QAAQ,AAAC,CAAC,GAAE,CAAG,GAAC,CAAC,CAAC;YACnC;AAAA,UACF;AAAA,WAhOO,WAAU,CAAjB,UAAmB,GAAE,CAAG;AACtB,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,GAAE,WAAa,IAAE,CAAA,EAAK,CAAA,UAAS,AAAC,CAAC,GAAE,CAAC,CAAC,CAAG,CAAA,MAAK,KAAK,QAAQ,CAAC,CAAC;UACxF,EA7BgE,SAAO,CAAC,CAAC;MACnE,AAAC,CAa4B,IAAG,CAbb,EAJ2C;AAgQtE,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,YAAY,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AACxF,eAAO,EAAC,CAAC,QAAO,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,oBAAoB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAChG,eAAO,EAAC,CAAC,QAAO,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,mBAAmB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAC/F,eAAO,EAAC,CAAC,QAAO,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,iBAAiB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAC7F,eAAO,EAAC,CAAC,QAAO,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,mBAAmB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAC/F,eAAO,EAAC,CAAC,QAAO,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,UAAU,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AACtF,eAAO,EAAC,CAAC,cAAa,CAAC,CAAG,EAAC,cAAa,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,cAAc,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAC1F,eAAO,EAAC,CAAC,cAAa,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,eAAe,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAC3F,eAAO,EAAC,CAAC,cAAa,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,eAAe,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAC3F,eAAO,EAAC,CAAC,cAAa,CAAC,CAAG,EAAC,cAAa,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,oBAAoB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAChG,eAAO,EAAC,CAAC,cAAa,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,gBAAgB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAC5F,eAAO,EAAC,CAAC,cAAa,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,cAAc,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAC1F,eAAO,EAAC,CAAC,cAAa,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,SAAS,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AACrF,eAAO,EAAC,EAAC,CAAG,EAAC,QAAO,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;qBAtSmB,CAAA,SAAQ,AAAC,oBAAjC,SAAS,AAAD;AACE,AAAI,UAAA,iBAsSP,SAAM,eAAa,CACZ,GAAE,CAAG;AACf,aAAG,IAAI,EAAI,IAAE,CAAC;AACd,aAAG,cAAc,EAAI,KAAG,CAAC;AACzB,aAAG,aAAa,EAAI,KAAG,CAAC;AACxB,aAAG,cAAc,EAAI,KAAG,CAAC;AACzB,aAAG,MAAM,EAAI,KAAG,CAAC;AACjB,aAAG,WAAW,EAAI,KAAG,CAAC;AACtB,aAAG,aAAa,EAAI,KAAG,CAAC;AACxB,aAAG,aAAa,EAAI,KAAG,CAAC;AACxB,aAAG,aAAa,EAAI,KAAG,CAAC;QAC1B,AAjTgD,CAAC;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,kBAiT5C,QAAO,CAAP,UAAS,AAAD,CAAG;AACT,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,cAAa,AAAC,CAAC,IAAG,cAAc,CAAG,CAAA,IAAG,aAAa,CAAC,CAAA,CAAI,CAAA,SAAQ,AAAC,CAAC,IAAG,IAAI,CAAC,CAAA,CAAI,EAAC,SAAQ,AAAC,CAAC,IAAG,IAAI,CAAC,CAAA,CAAI,IAAE,CAAA,CAAI,CAAA,SAAQ,AAAC,CAAC,IAAG,cAAc,CAAC,CAAA,CAAI,KAAG,CAAA,CAAI,CAAA,SAAQ,AAAC,CAAC,IAAG,aAAa,CAAC,CAAA,CAAI,IAAE,CAAC,CAAC,CAAG,CAAA,MAAK,KAAK,OAAO,CAAC,CAAC;UACvO,MAlT8D,CAAC;MACzD,AAAC,EAAC,EAJ4D;IAEvC;EAC3B,CAAA;AADI,CAAC,CAAC;AAuTgC","file":"angular2/src/change_detection/pipes/keyvalue_changes.js","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {ListWrapper,\n  MapWrapper,\n  StringMapWrapper} from 'angular2/src/facade/collection';\nimport {stringify,\n  looseIdentical,\n  isJsObject} from 'angular2/src/facade/lang';\nimport {NO_CHANGE,\n  Pipe} from './pipe';\nexport class KeyValueChangesFactory {\n  supports(obj) {\n    return assert.returnType((KeyValueChanges.supportsObj(obj)), assert.type.boolean);\n  }\n  create(bpc) {\n    return assert.returnType((new KeyValueChanges()), Pipe);\n  }\n}\nexport class KeyValueChanges extends Pipe {\n  constructor() {\n    super();\n    this._records = MapWrapper.create();\n    this._mapHead = null;\n    this._previousMapHead = null;\n    this._changesHead = null;\n    this._changesTail = null;\n    this._additionsHead = null;\n    this._additionsTail = null;\n    this._removalsHead = null;\n    this._removalsTail = null;\n  }\n  static supportsObj(obj) {\n    return assert.returnType((obj instanceof Map || isJsObject(obj)), assert.type.boolean);\n  }\n  supports(obj) {\n    return assert.returnType((KeyValueChanges.supportsObj(obj)), assert.type.boolean);\n  }\n  transform(map) {\n    if (this.check(map)) {\n      return this;\n    } else {\n      return NO_CHANGE;\n    }\n  }\n  get isDirty() {\n    return assert.returnType((this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null), assert.type.boolean);\n  }\n  forEachItem(fn) {\n    assert.argumentTypes(fn, Function);\n    var record;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n  forEachPreviousItem(fn) {\n    assert.argumentTypes(fn, Function);\n    var record;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n  forEachChangedItem(fn) {\n    assert.argumentTypes(fn, Function);\n    var record;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n  forEachAddedItem(fn) {\n    assert.argumentTypes(fn, Function);\n    var record;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n  forEachRemovedItem(fn) {\n    assert.argumentTypes(fn, Function);\n    var record;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n  check(map) {\n    this._reset();\n    var records = this._records;\n    var oldSeqRecord = assert.type(this._mapHead, KVChangeRecord);\n    var lastOldSeqRecord = assert.type(null, KVChangeRecord);\n    var lastNewSeqRecord = assert.type(null, KVChangeRecord);\n    var seqChanged = assert.type(false, assert.type.boolean);\n    this._forEach(map, (value, key) => {\n      var newSeqRecord;\n      if (oldSeqRecord !== null && key === oldSeqRecord.key) {\n        newSeqRecord = oldSeqRecord;\n        if (!looseIdentical(value, oldSeqRecord.currentValue)) {\n          oldSeqRecord.previousValue = oldSeqRecord.currentValue;\n          oldSeqRecord.currentValue = value;\n          this._addToChanges(oldSeqRecord);\n        }\n      } else {\n        seqChanged = true;\n        if (oldSeqRecord !== null) {\n          oldSeqRecord._next = null;\n          this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);\n          this._addToRemovals(oldSeqRecord);\n        }\n        if (MapWrapper.contains(records, key)) {\n          newSeqRecord = MapWrapper.get(records, key);\n        } else {\n          newSeqRecord = new KVChangeRecord(key);\n          MapWrapper.set(records, key, newSeqRecord);\n          newSeqRecord.currentValue = value;\n          this._addToAdditions(newSeqRecord);\n        }\n      }\n      if (seqChanged) {\n        if (this._isInRemovals(newSeqRecord)) {\n          this._removeFromRemovals(newSeqRecord);\n        }\n        if (lastNewSeqRecord == null) {\n          this._mapHead = newSeqRecord;\n        } else {\n          lastNewSeqRecord._next = newSeqRecord;\n        }\n      }\n      lastOldSeqRecord = oldSeqRecord;\n      lastNewSeqRecord = newSeqRecord;\n      oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;\n    });\n    this._truncate(lastOldSeqRecord, oldSeqRecord);\n    return assert.returnType((this.isDirty), assert.type.boolean);\n  }\n  _reset() {\n    if (this.isDirty) {\n      var record;\n      for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = this._removalsTail = null;\n    }\n  }\n  _truncate(lastRecord, record) {\n    assert.argumentTypes(lastRecord, KVChangeRecord, record, KVChangeRecord);\n    while (record !== null) {\n      if (lastRecord === null) {\n        this._mapHead = null;\n      } else {\n        lastRecord._next = null;\n      }\n      var nextRecord = record._next;\n      this._addToRemovals(record);\n      lastRecord = record;\n      record = nextRecord;\n    }\n    for (var rec = assert.type(this._removalsHead, KVChangeRecord); rec !== null; rec = rec._nextRemoved) {\n      rec.previousValue = rec.currentValue;\n      rec.currentValue = null;\n      MapWrapper.delete(this._records, rec.key);\n    }\n  }\n  _isInRemovals(record) {\n    assert.argumentTypes(record, KVChangeRecord);\n    return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;\n  }\n  _addToRemovals(record) {\n    assert.argumentTypes(record, KVChangeRecord);\n    if (this._removalsHead === null) {\n      this._removalsHead = this._removalsTail = record;\n    } else {\n      this._removalsTail._nextRemoved = record;\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = record;\n    }\n  }\n  _removeFromSeq(prev, record) {\n    assert.argumentTypes(prev, KVChangeRecord, record, KVChangeRecord);\n    var next = record._next;\n    if (prev === null) {\n      this._mapHead = next;\n    } else {\n      prev._next = next;\n    }\n  }\n  _removeFromRemovals(record) {\n    assert.argumentTypes(record, KVChangeRecord);\n    var prev = record._prevRemoved;\n    var next = record._nextRemoved;\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n    record._prevRemoved = record._nextRemoved = null;\n  }\n  _addToAdditions(record) {\n    assert.argumentTypes(record, KVChangeRecord);\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n  _addToChanges(record) {\n    assert.argumentTypes(record, KVChangeRecord);\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n  toString() {\n    var items = [];\n    var previous = [];\n    var changes = [];\n    var additions = [];\n    var removals = [];\n    var record;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      ListWrapper.push(items, stringify(record));\n    }\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      ListWrapper.push(previous, stringify(record));\n    }\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      ListWrapper.push(changes, stringify(record));\n    }\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      ListWrapper.push(additions, stringify(record));\n    }\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      ListWrapper.push(removals, stringify(record));\n    }\n    return assert.returnType((\"map: \" + items.join(', ') + \"\\n\" + \"previous: \" + previous.join(', ') + \"\\n\" + \"additions: \" + additions.join(', ') + \"\\n\" + \"changes: \" + changes.join(', ') + \"\\n\" + \"removals: \" + removals.join(', ') + \"\\n\"), assert.type.string);\n  }\n  _forEach(obj, fn) {\n    assert.argumentTypes(obj, assert.type.any, fn, Function);\n    if (obj instanceof Map) {\n      MapWrapper.forEach(obj, fn);\n    } else {\n      StringMapWrapper.forEach(obj, fn);\n    }\n  }\n}\nObject.defineProperty(KeyValueChanges.prototype.forEachItem, \"parameters\", {get: function() {\n    return [[Function]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype.forEachPreviousItem, \"parameters\", {get: function() {\n    return [[Function]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype.forEachChangedItem, \"parameters\", {get: function() {\n    return [[Function]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype.forEachAddedItem, \"parameters\", {get: function() {\n    return [[Function]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype.forEachRemovedItem, \"parameters\", {get: function() {\n    return [[Function]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype._truncate, \"parameters\", {get: function() {\n    return [[KVChangeRecord], [KVChangeRecord]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype._isInRemovals, \"parameters\", {get: function() {\n    return [[KVChangeRecord]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype._addToRemovals, \"parameters\", {get: function() {\n    return [[KVChangeRecord]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype._removeFromSeq, \"parameters\", {get: function() {\n    return [[KVChangeRecord], [KVChangeRecord]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype._removeFromRemovals, \"parameters\", {get: function() {\n    return [[KVChangeRecord]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype._addToAdditions, \"parameters\", {get: function() {\n    return [[KVChangeRecord]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype._addToChanges, \"parameters\", {get: function() {\n    return [[KVChangeRecord]];\n  }});\nObject.defineProperty(KeyValueChanges.prototype._forEach, \"parameters\", {get: function() {\n    return [[], [Function]];\n  }});\nexport class KVChangeRecord {\n  constructor(key) {\n    this.key = key;\n    this.previousValue = null;\n    this.currentValue = null;\n    this._nextPrevious = null;\n    this._next = null;\n    this._nextAdded = null;\n    this._nextRemoved = null;\n    this._prevRemoved = null;\n    this._nextChanged = null;\n  }\n  toString() {\n    return assert.returnType((looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : (stringify(this.key) + '[' + stringify(this.previousValue) + '->' + stringify(this.currentValue) + ']')), assert.type.string);\n  }\n}\n//# sourceMappingURL=keyvalue_changes.js.map\n\n//# sourceMappingURL=./keyvalue_changes.map"]}