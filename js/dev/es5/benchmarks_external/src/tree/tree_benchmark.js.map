{"version":3,"sources":["tree_benchmark.es6"],"names":[],"mappings":"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","file":"benchmarks_external/src/tree/tree_benchmark.js","sourcesContent":["import {getIntParameter,\n  bindAction} from 'angular2/src/test_lib/benchmark_util';\nexport function main() {\n  angular.bootstrap(document.querySelector('tree'), ['app']);\n}\nangular.module('app', []).directive('tree', function() {\n  return {\n    scope: {data: '='},\n    template: '<span> {{data.value}}' + '  <span tree-if=\"data.left\"></span>' + '  <span tree-if=\"data.right\"></span>' + '</span>'\n  };\n}).directive('treeIf', ['$compile', '$parse', function($compile, $parse) {\n  var transcludeFn;\n  return {compile: function(element, attrs) {\n      var expr = $parse(attrs.treeIf);\n      var template = '<tree data=\"' + attrs.treeIf + '\"></tree>';\n      var transclude;\n      return function($scope, $element, $attrs) {\n        if (!transclude) {\n          transclude = $compile(template);\n        }\n        var childScope;\n        var childElement;\n        $scope.$watch(expr, function(newValue) {\n          if (childScope) {\n            childScope.$destroy();\n            childElement.remove();\n            childScope = null;\n            childElement = null;\n          }\n          if (newValue) {\n            childScope = $scope.$new();\n            childElement = transclude(childScope, function(clone) {\n              $element.append(clone);\n            });\n          }\n        });\n      };\n    }};\n}]).config(['$compileProvider', function($compileProvider) {\n  $compileProvider.debugInfoEnabled(false);\n}]).run(['$rootScope', function($rootScope) {\n  var count = 0;\n  var maxDepth = getIntParameter('depth');\n  bindAction('#destroyDom', destroyDom);\n  bindAction('#createDom', createDom);\n  function destroyDom() {\n    $rootScope.$apply(function() {\n      $rootScope.initData = new TreeNode('', null, null);\n    });\n  }\n  function createDom() {\n    var values = count++ % 2 == 0 ? ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*'] : ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', '-'];\n    $rootScope.$apply(function() {\n      $rootScope.initData = buildTree(maxDepth, values, 0);\n    });\n  }\n}]);\nclass TreeNode {\n  constructor(value, left, right) {\n    this.value = value;\n    this.left = left;\n    this.right = right;\n  }\n}\nfunction buildTree(maxDepth, values, curDepth) {\n  if (maxDepth === curDepth)\n    return new TreeNode('', null, null);\n  return new TreeNode(values[curDepth], buildTree(maxDepth, values, curDepth + 1), buildTree(maxDepth, values, curDepth + 1));\n}\n//# sourceMappingURL=tree_benchmark.es6.map\n\n//# sourceMappingURL=./tree_benchmark.map"]}