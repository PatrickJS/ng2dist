{"version":3,"sources":["multi_metric.es6"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,wHAAoB,UAAS,SAAQ;;;;;;;;;;;;;;;AAkCpD,SAAS,gBAAc,CAAE,IAAG;AAC1B,AAAI,MAAA,CAAA,MAAK,EAAI,GAAC,CAAC;AACf,cAAU,QAAQ,AAAC,CAAC,IAAG,GAAG,SAAC,GAAE;AAC3B,qBAAe,QAAQ,AAAC,CAAC,GAAE,GAAG,SAAC,KAAI,CAAG,CAAA,IAAG,CAAM;AAC7C,aAAK,CAAE,IAAG,CAAC,EAAI,MAAI,CAAC;MACtB,EAAC,CAAC;IACJ,EAAC,CAAC;AACF,SAAO,OAAK,CAAC;EACf;AA1CA,OAAO;AACD,UAAM,GADZ,SAAS,IAAG,CAAG;AAAf,aAAoB,KAAG,OAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,eAAoB,KAAG,SAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;AAA1C,uBAAoB,KAAG,iBAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,cAAoB,KAAG,QAAkB,CAAC;AAA1C,qBAAoB,KAAG,eAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,aAAoB,KAAG,OAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;kBAFY,CAAA,SAAQ,AAAC,iBAAjC,SAAS,QAAO;AACN,AAAI,UAAA,cAUP,SAAM,YAAU,CAIT,OAAM,CAAG;AACnB,AAhBJ,wBAAc,iBAAiB,AAAC,aAAkB,KAAK,MAAmB,CAgB/D;AACP,aAAG,SAAS,EAAI,QAAM,CAAC;QACzB,AAjBgD,CAAC;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AAiB5C,qBAAW,CAAX,UAAa,AAAD;AACV,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,cAAa,IAAI,AAAC,CAAC,WAAU,IAAI,AAAC,CAAC,IAAG,SAAS,GAAG,SAAC,MAAK;mBAAM,CAAA,MAAK,aAAa,AAAC,EAAC;YAAA,EAAC,CAAC,CAAC,CAAG,QAAM,CAAC,CAAC;UAC5H;AACA,mBAAS,CAAT,UAAW,OAAM;AACf,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,cAAa,IAAI,AAAC,CAAC,WAAU,IAAI,AAAC,CAAC,IAAG,SAAS,GAAG,SAAC,MAAK;mBAAM,CAAA,MAAK,WAAW,AAAC,CAAC,OAAM,CAAC;YAAA,EAAC,CAAC,KAAK,AAAC,EAAC,SAAC,MAAK,CAAM;AACpI,mBAAO,CAAA,eAAc,AAAC,CAAC,MAAK,CAAC,CAAC;YAChC,EAAC,CAAC,CAAG,CAAA,MAAK,YAAY,AAAC,CAAC,OAAM,CAAG,UAAQ,CAAC,CAAC,CAAC;UAC9C;AACA,iBAAO,CAAP,UAAS,AAAD;AACN,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,eAAc,AAAC,CAAC,IAAG,SAAS,IAAI,AAAC,EAAC,SAAC,MAAK;mBAAM,CAAA,MAAK,SAAS,AAAC,EAAC;YAAA,EAAC,CAAC,CAAC,CAAG,UAAQ,CAAC,CAAC;UAC1G;WAjBO,cAAa,CAApB,UAAsB,WAAU;AAC9B,iBAAO,EAAC,IAAG,AAAC,CAAC,SAAQ,CAAC,eAAe,AAAC,EAAC,SAAC,QAAO;mBAAM,CAAA,cAAa,IAAI,AAAC,CAAC,WAAU,IAAI,AAAC,CAAC,WAAU,GAAG,SAAC,KAAI;qBAAM,CAAA,QAAO,SAAS,AAAC,CAAC,KAAI,CAAC;cAAA,EAAC,CAAC;YAAA,EAAG,EAAC,QAAO,CAAC,CAAC,CAAG,CAAA,IAAG,AAAC,CAAC,WAAU,CAAC,UAAU,AAAC,EAAC,SAAC,QAAO;mBAAM,IAAI,YAAU,AAAC,CAAC,QAAO,CAAC;YAAA,EAAG,EAAC,SAAQ,CAAC,CAAC,CAAC,CAAC;UAC7O,EAXgE,SAAO,CAAC,CAAC;MACnE,AAAC,CAOwB,MAAK,CAPX,EAJ2C;AA+BtE,WAAK,eAAe,AAAC,CAAC,WAAU,UAAU,WAAW,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AACnF,eAAO,EAAC,CAAC,MAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;gBAUW,IAAI,YAAU,AAAC,CAAC,sBAAqB,CAAC;IAzCvB;EAC3B,CAAA;AADI,CAAC,CAAC;AA4C4B","file":"benchpress/src/metric/multi_metric.js","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {bind,\n  Injector,\n  OpaqueToken} from 'angular2/di';\nimport {List,\n  ListWrapper,\n  StringMapWrapper,\n  StringMap} from 'angular2/src/facade/collection';\nimport {Promise,\n  PromiseWrapper} from 'angular2/src/facade/async';\nimport {Metric} from '../metric';\nexport class MultiMetric extends Metric {\n  static createBindings(childTokens) {\n    return [bind(_CHILDREN).toAsyncFactory((injector) => PromiseWrapper.all(ListWrapper.map(childTokens, (token) => injector.asyncGet(token))), [Injector]), bind(MultiMetric).toFactory((children) => new MultiMetric(children), [_CHILDREN])];\n  }\n  constructor(metrics) {\n    super();\n    this._metrics = metrics;\n  }\n  beginMeasure() {\n    return assert.returnType((PromiseWrapper.all(ListWrapper.map(this._metrics, (metric) => metric.beginMeasure()))), Promise);\n  }\n  endMeasure(restart) {\n    return assert.returnType((PromiseWrapper.all(ListWrapper.map(this._metrics, (metric) => metric.endMeasure(restart))).then((values) => {\n      return mergeStringMaps(values);\n    })), assert.genericType(Promise, StringMap));\n  }\n  describe() {\n    return assert.returnType((mergeStringMaps(this._metrics.map((metric) => metric.describe()))), StringMap);\n  }\n}\nObject.defineProperty(MultiMetric.prototype.endMeasure, \"parameters\", {get: function() {\n    return [[assert.type.boolean]];\n  }});\nfunction mergeStringMaps(maps) {\n  var result = {};\n  ListWrapper.forEach(maps, (map) => {\n    StringMapWrapper.forEach(map, (value, prop) => {\n      result[prop] = value;\n    });\n  });\n  return result;\n}\nvar _CHILDREN = new OpaqueToken('MultiMetric.children');\n//# sourceMappingURL=multi_metric.js.map\n\n//# sourceMappingURL=./multi_metric.map"]}