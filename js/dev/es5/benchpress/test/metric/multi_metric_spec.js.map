{"version":3,"sources":["multi_metric_spec.es6"],"names":[],"mappings":"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","file":"benchpress/test/metric/multi_metric_spec.js","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {afterEach,\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  expect,\n  iit,\n  inject,\n  it,\n  xit} from 'angular2/test_lib';\nimport {List,\n  ListWrapper,\n  StringMap} from 'angular2/src/facade/collection';\nimport {PromiseWrapper,\n  Promise} from 'angular2/src/facade/async';\nimport {Metric,\n  MultiMetric,\n  bind,\n  Injector} from 'benchpress/common';\nexport function main() {\n  function createMetric(ids) {\n    return Injector.resolveAndCreate([ListWrapper.map(ids, (id) => bind(id).toValue(new MockMetric(id))), MultiMetric.createBindings(ids)]).asyncGet(MultiMetric);\n  }\n  describe('multi metric', () => {\n    it('should merge descriptions', inject([AsyncTestCompleter], (async) => {\n      createMetric(['m1', 'm2']).then((m) => {\n        expect(m.describe()).toEqual({\n          'm1': 'describe',\n          'm2': 'describe'\n        });\n        async.done();\n      });\n    }));\n    it('should merge all beginMeasure calls', inject([AsyncTestCompleter], (async) => {\n      createMetric(['m1', 'm2']).then((m) => m.beginMeasure()).then((values) => {\n        expect(values).toEqual(['m1_beginMeasure', 'm2_beginMeasure']);\n        async.done();\n      });\n    }));\n    [false, true].forEach((restartFlag) => {\n      it(`should merge all endMeasure calls for restart=${restartFlag}`, inject([AsyncTestCompleter], (async) => {\n        createMetric(['m1', 'm2']).then((m) => m.endMeasure(restartFlag)).then((values) => {\n          expect(values).toEqual({\n            'm1': {'restart': restartFlag},\n            'm2': {'restart': restartFlag}\n          });\n          async.done();\n        });\n      }));\n    });\n  });\n}\nclass MockMetric extends Metric {\n  constructor(id) {\n    super();\n    this._id = id;\n  }\n  beginMeasure() {\n    return assert.returnType((PromiseWrapper.resolve(`${this._id}_beginMeasure`)), Promise);\n  }\n  endMeasure(restart) {\n    assert.argumentTypes(restart, assert.type.boolean);\n    var result = {};\n    result[this._id] = {'restart': restart};\n    return assert.returnType((PromiseWrapper.resolve(result)), assert.genericType(Promise, StringMap));\n  }\n  describe() {\n    var result = {};\n    result[this._id] = 'describe';\n    return assert.returnType((result), StringMap);\n  }\n}\nObject.defineProperty(MockMetric.prototype.endMeasure, \"parameters\", {get: function() {\n    return [[assert.type.boolean]];\n  }});\n//# sourceMappingURL=multi_metric_spec.js.map\n\n//# sourceMappingURL=./multi_metric_spec.map"]}