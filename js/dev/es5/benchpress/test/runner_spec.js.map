{"version":3,"sources":["runner_spec.es6"],"names":[],"mappings":"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","file":"benchpress/test/runner_spec.js","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {afterEach,\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  expect,\n  iit,\n  inject,\n  it,\n  xit} from 'angular2/test_lib';\nimport {Runner,\n  Sampler,\n  SampleDescription,\n  Validator,\n  bind,\n  Injector,\n  Metric,\n  Options,\n  WebDriverAdapter} from 'benchpress/common';\nimport {isBlank} from 'angular2/src/facade/lang';\nimport {Promise,\n  PromiseWrapper} from 'angular2/src/facade/async';\nexport function main() {\n  describe('runner', () => {\n    var injector;\n    var runner;\n    function createRunner(defaultBindings = null) {\n      if (isBlank(defaultBindings)) {\n        defaultBindings = [];\n      }\n      runner = new Runner([defaultBindings, bind(Sampler).toFactory((_injector) => {\n        injector = _injector;\n        return new MockSampler();\n      }, [Injector]), bind(Metric).toFactory(() => new MockMetric(), []), bind(Validator).toFactory(() => new MockValidator(), []), bind(WebDriverAdapter).toFactory(() => new MockWebDriverAdapter(), [])]);\n      return runner;\n    }\n    it('should set SampleDescription.id', inject([AsyncTestCompleter], (async) => {\n      createRunner().sample({id: 'someId'}).then((_) => injector.asyncGet(SampleDescription)).then((desc) => {\n        expect(desc.id).toBe('someId');\n        async.done();\n      });\n    }));\n    it('should merge SampleDescription.description', inject([AsyncTestCompleter], (async) => {\n      createRunner([bind(Options.DEFAULT_DESCRIPTION).toValue({'a': 1})]).sample({\n        id: 'someId',\n        bindings: [bind(Options.SAMPLE_DESCRIPTION).toValue({'b': 2})]\n      }).then((_) => injector.asyncGet(SampleDescription)).then((desc) => {\n        expect(desc.description).toEqual({\n          'forceGc': false,\n          'userAgent': 'someUserAgent',\n          'a': 1,\n          'b': 2,\n          'v': 11\n        });\n        async.done();\n      });\n    }));\n    it('should fill SampleDescription.metrics from the Metric', inject([AsyncTestCompleter], (async) => {\n      createRunner().sample({id: 'someId'}).then((_) => injector.asyncGet(SampleDescription)).then((desc) => {\n        expect(desc.metrics).toEqual({'m1': 'some metric'});\n        async.done();\n      });\n    }));\n    it('should bind Options.EXECUTE', inject([AsyncTestCompleter], (async) => {\n      var execute = () => {};\n      createRunner().sample({\n        id: 'someId',\n        execute: execute\n      }).then((_) => {\n        expect(injector.get(Options.EXECUTE)).toEqual(execute);\n        async.done();\n      });\n    }));\n    it('should bind Options.PREPARE', inject([AsyncTestCompleter], (async) => {\n      var prepare = () => {};\n      createRunner().sample({\n        id: 'someId',\n        prepare: prepare\n      }).then((_) => {\n        expect(injector.get(Options.PREPARE)).toEqual(prepare);\n        async.done();\n      });\n    }));\n    it('should bind Options.MICRO_METRICS', inject([AsyncTestCompleter], (async) => {\n      createRunner().sample({\n        id: 'someId',\n        microMetrics: {'a': 'b'}\n      }).then((_) => {\n        expect(injector.get(Options.MICRO_METRICS)).toEqual({'a': 'b'});\n        async.done();\n      });\n    }));\n    it('should overwrite bindings per sample call', inject([AsyncTestCompleter], (async) => {\n      createRunner([bind(Options.DEFAULT_DESCRIPTION).toValue({'a': 1})]).sample({\n        id: 'someId',\n        bindings: [bind(Options.DEFAULT_DESCRIPTION).toValue({'a': 2})]\n      }).then((_) => injector.asyncGet(SampleDescription)).then((desc) => {\n        expect(injector.get(SampleDescription).description['a']).toBe(2);\n        async.done();\n      });\n    }));\n  });\n}\nclass MockWebDriverAdapter extends WebDriverAdapter {\n  executeScript(script) {\n    return assert.returnType((PromiseWrapper.resolve('someUserAgent')), Promise);\n  }\n}\nclass MockValidator extends Validator {\n  constructor() {\n    super();\n  }\n  describe() {\n    return {'v': 11};\n  }\n}\nclass MockMetric extends Metric {\n  constructor() {\n    super();\n  }\n  describe() {\n    return {'m1': 'some metric'};\n  }\n}\nclass MockSampler extends Sampler {\n  constructor() {\n    super();\n  }\n  sample() {\n    return assert.returnType((PromiseWrapper.resolve(23)), Promise);\n  }\n}\n//# sourceMappingURL=runner_spec.js.map\n\n//# sourceMappingURL=./runner_spec.map"]}