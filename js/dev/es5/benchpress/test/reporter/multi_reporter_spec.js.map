{"version":3,"sources":["multi_reporter_spec.es6"],"names":[],"mappings":"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","file":"benchpress/test/reporter/multi_reporter_spec.js","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {afterEach,\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  expect,\n  iit,\n  inject,\n  it,\n  xit} from 'angular2/test_lib';\nimport {List,\n  ListWrapper,\n  StringMap} from 'angular2/src/facade/collection';\nimport {PromiseWrapper,\n  Promise} from 'angular2/src/facade/async';\nimport {DateWrapper} from 'angular2/src/facade/lang';\nimport {Reporter,\n  MultiReporter,\n  bind,\n  Injector,\n  MeasureValues} from 'benchpress/common';\nexport function main() {\n  function createReporters(ids) {\n    return Injector.resolveAndCreate([ListWrapper.map(ids, (id) => bind(id).toValue(new MockReporter(id))), MultiReporter.createBindings(ids)]).asyncGet(MultiReporter);\n  }\n  describe('multi reporter', () => {\n    it('should reportMeasureValues to all', inject([AsyncTestCompleter], (async) => {\n      var mv = new MeasureValues(0, DateWrapper.now(), {});\n      createReporters(['m1', 'm2']).then((r) => r.reportMeasureValues(mv)).then((values) => {\n        expect(values).toEqual([{\n          'id': 'm1',\n          'values': mv\n        }, {\n          'id': 'm2',\n          'values': mv\n        }]);\n        async.done();\n      });\n    }));\n    it('should reportSample to call', inject([AsyncTestCompleter], (async) => {\n      var completeSample = [new MeasureValues(0, DateWrapper.now(), {}), new MeasureValues(1, DateWrapper.now(), {})];\n      var validSample = [completeSample[1]];\n      createReporters(['m1', 'm2']).then((r) => r.reportSample(completeSample, validSample)).then((values) => {\n        expect(values).toEqual([{\n          'id': 'm1',\n          'completeSample': completeSample,\n          'validSample': validSample\n        }, {\n          'id': 'm2',\n          'completeSample': completeSample,\n          'validSample': validSample\n        }]);\n        async.done();\n      });\n    }));\n  });\n}\nclass MockReporter extends Reporter {\n  constructor(id) {\n    super();\n    this._id = id;\n  }\n  reportMeasureValues(values) {\n    assert.argumentTypes(values, MeasureValues);\n    return assert.returnType((PromiseWrapper.resolve({\n      'id': this._id,\n      'values': values\n    })), Promise);\n  }\n  reportSample(completeSample, validSample) {\n    assert.argumentTypes(completeSample, assert.genericType(List, MeasureValues), validSample, assert.genericType(List, MeasureValues));\n    return assert.returnType((PromiseWrapper.resolve({\n      'id': this._id,\n      'completeSample': completeSample,\n      'validSample': validSample\n    })), Promise);\n  }\n}\nObject.defineProperty(MockReporter.prototype.reportMeasureValues, \"parameters\", {get: function() {\n    return [[MeasureValues]];\n  }});\nObject.defineProperty(MockReporter.prototype.reportSample, \"parameters\", {get: function() {\n    return [[assert.genericType(List, MeasureValues)], [assert.genericType(List, MeasureValues)]];\n  }});\n//# sourceMappingURL=multi_reporter_spec.js.map\n\n//# sourceMappingURL=./multi_reporter_spec.map"]}