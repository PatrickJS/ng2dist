{"version":3,"sources":["rtts_assert_spec.es6"],"names":[],"mappings":"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","file":"rtts_assert/test/rtts_assert_spec.js","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nexport function main() {\n  describe('prettyPrint', () => {\n    class Type {}\n    ;\n    it('should limit the number of printed properties', () => {\n      var o = {};\n      for (var i = 0; i < 100; i++) {\n        o['p_' + i] = i;\n      }\n      try {\n        assert.type(o, Type);\n        throw 'fail!';\n      } catch (e) {\n        expect(e.message.indexOf('p_0')).toBeGreaterThan(-1);\n        expect(e.message.indexOf('...')).toBeGreaterThan(-1);\n        expect(e.message.indexOf('p_20')).toBe(-1);\n      }\n    });\n    it('should limit the depth of printed properties', () => {\n      var o = {l1: {l2: {l3: {l4: {l5: {l6: 'deep'}}}}}};\n      expect(() => {\n        assert.type(o, Type);\n      }).toThrowError('Expected an instance of Type, got {l1: {l2: {l3: {l4: [...]}}}}!');\n    });\n  });\n  describe('basic type check', function() {\n    class Type {}\n    it('should pass', function() {\n      assert.type(new Type(), Type);\n    });\n    it('should fail', function() {\n      expect(() => assert.type(123, Type)).toThrowError('Expected an instance of Type, got 123!');\n    });\n    it('should allow null', function() {\n      assert.type(null, Type);\n    });\n  });\n  describe('custom check', function() {\n    class Type {}\n    it('should pass when returns true', function() {\n      Type.assert = function(value) {\n        return true;\n      };\n      assert.type({}, Type);\n    });\n    it('should fail when returns false', function() {\n      Type.assert = function(value) {\n        return false;\n      };\n      expect(() => assert.type({}, Type)).toThrowError('Expected an instance of Type, got {}!');\n    });\n    it('should fail when calls assert.fail()', function() {\n      Type.assert = function(value) {\n        assert.fail('not smart enough');\n        assert.fail('not blue enough');\n      };\n      expect(() => assert.type({}, Type)).toThrowError('Expected an instance of Type, got {}!\\n' + '  - not smart enough\\n' + '  - not blue enough');\n    });\n    it('should fail when throws an exception', function() {\n      Type.assert = function(value) {\n        throw new Error('not long enough');\n      };\n      expect(function() {\n        assert.type(12345, Type);\n      }).toThrowError('Expected an instance of Type, got 12345!\\n' + '  - not long enough');\n    });\n  });\n  describe('primitive value check', function() {\n    var primitive = $traceurRuntime.type;\n    describe('string', function() {\n      it('should pass', function() {\n        assert.type('xxx', primitive.string);\n      });\n      it('should fail', function() {\n        expect(() => assert.type(12345, primitive.string)).toThrowError('Expected an instance of string, got 12345!');\n      });\n      it('should allow null', function() {\n        assert.type(null, primitive.string);\n      });\n    });\n    describe('number', function() {\n      it('should pass', function() {\n        assert.type(123, primitive.number);\n      });\n      it('should fail', function() {\n        expect(() => assert.type(false, primitive.number)).toThrowError('Expected an instance of number, got false!');\n      });\n      it('should allow null', function() {\n        assert.type(null, primitive.number);\n      });\n    });\n    describe('boolean', function() {\n      it('should pass', function() {\n        expect(assert.type(true, primitive.boolean)).toBe(true);\n        expect(assert.type(false, primitive.boolean)).toBe(false);\n      });\n      it('should fail', function() {\n        expect(() => assert.type(123, primitive.boolean)).toThrowError('Expected an instance of boolean, got 123!');\n      });\n      it('should allow null', function() {\n        assert.type(null, primitive.boolean);\n      });\n    });\n  });\n  describe('define', function() {\n    it('should define assert for an existing type', function() {\n      class Type {}\n      assert.define(Type, function(value) {\n        assert(value).is(Function, Object);\n      });\n      assert.type({}, Type);\n      assert.type(function() {}, Type);\n      expect(() => assert.type('str', Type)).toThrowError('Expected an instance of Type, got \"str\"!\\n' + '  - \"str\" is not instance of Function\\n' + '  - \"str\" is not instance of Object');\n    });\n    it('should define an interface', function() {\n      var User = assert.define('MyUser', function(user) {\n        assert(user).is(Object);\n      });\n      assert.type({}, User);\n      expect(() => assert.type(12345, User)).toThrowError('Expected an instance of MyUser, got 12345!\\n' + '  - 12345 is not instance of Object');\n    });\n    describe('arrayOf', function() {\n      var Titles = assert.define('ListOfTitles', function(value) {\n        assert(value).is(assert.arrayOf(assert.string, assert.number));\n      });\n      it('should pass', function() {\n        assert.type(['one', 55, 'two'], Titles);\n      });\n      it('should fail when non-array given', function() {\n        expect(() => assert.type('foo', Titles)).toThrowError('Expected an instance of ListOfTitles, got \"foo\"!\\n' + '  - \"foo\" is not instance of array of string/number\\n' + '    - \"foo\" is not instance of Array');\n      });\n      it('should fail when an invalid item in the array', function() {\n        expect(() => assert.type(['aaa', true], Titles)).toThrowError('Expected an instance of ListOfTitles, got [\"aaa\", true]!\\n' + '  - [\"aaa\", true] is not instance of array of string/number\\n' + '    - true is not instance of string\\n' + '    - true is not instance of number');\n      });\n    });\n    describe('structure', function() {\n      var User = assert.define('MyUser', function(value) {\n        assert(value).is(assert.structure({\n          name: assert.string,\n          age: assert.number\n        }));\n      });\n      it('should pass', function() {\n        assert.type({\n          name: 'Vojta',\n          age: 28\n        }, User);\n      });\n      it('should fail when non-object given', function() {\n        expect(() => assert.type(123, User)).toThrowError('Expected an instance of MyUser, got 123!\\n' + '  - 123 is not instance of object with properties name, age\\n' + '    - 123 is not instance of Object');\n      });\n      it('should fail when an invalid property', function() {\n        expect(() => assert.type({\n          name: 'Vojta',\n          age: true\n        }, User)).toThrowError('Expected an instance of MyUser, got {name: \"Vojta\", age: true}!\\n' + '  - {name: \"Vojta\", age: true} is not instance of object with properties name, age\\n' + '    - true is not instance of number');\n      });\n    });\n  });\n  describe('Traceur', function() {\n    describe('arguments', function() {\n      function reverse(str) {\n        assert.argumentTypes(str, assert.type.string);\n        return str ? reverse(str.substring(1)) + str[0] : '';\n      }\n      Object.defineProperty(reverse, \"parameters\", {get: function() {\n          return [[assert.type.string]];\n        }});\n      it('should pass', function() {\n        expect(reverse('angular')).toBe('ralugna');\n      });\n      it('should fail', function() {\n        expect(() => reverse(123)).toThrowError('Invalid arguments given!\\n' + '  - 1st argument has to be an instance of string, got 123');\n      });\n    });\n    describe('return value', function() {\n      function foo(bar) {\n        return assert.returnType((bar), assert.type.number);\n      }\n      it('should pass', function() {\n        expect(foo(123)).toBe(123);\n      });\n      it('should fail', function() {\n        expect(() => foo('bar')).toThrowError('Expected to return an instance of number, got \"bar\"!');\n      });\n    });\n    describe('variables', function() {\n      it('should pass', function() {\n        var count = assert.type(1, assert.type.number);\n      });\n      it('should fail', function() {\n        expect(() => {\n          var count = assert.type(true, assert.type.number);\n        }).toThrowError('Expected an instance of number, got true!');\n      });\n    });\n    describe('void', function() {\n      function foo(bar) {\n        return assert.returnType((bar), assert.type.void);\n      }\n      it('should pass when not defined', function() {\n        function nonReturn() {}\n        function returnNothing() {\n          return ;\n        }\n        function returnUndefined() {\n          return assert.returnType((undefined), assert.type.void);\n        }\n        foo();\n        foo(undefined);\n        nonReturn();\n        returnNothing();\n        returnUndefined();\n      });\n      it('should fail when a value returned', function() {\n        expect(() => foo('bar')).toThrowError('Expected to return an instance of void, got \"bar\"!');\n      });\n      it('should fail when null returned', function() {\n        expect(() => foo(null)).toThrowError('Expected to return an instance of void, got null!');\n      });\n    });\n    describe('generics', function() {\n      it('should pass', function() {\n        var list = assert.type([], assert.genericType(Array, assert.type.string));\n      });\n    });\n  });\n}\n//# sourceMappingURL=rtts_assert_spec.es6.map\n\n//# sourceMappingURL=./rtts_assert_spec.map"]}